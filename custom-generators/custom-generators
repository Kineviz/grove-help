{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Custom Generators\n\nWhen using generators in Observable, one normally uses a [generator cell](/@mbostock/generator-cells-functions-and-objects) with yield expressions:`","pinCode":false,"dname":"022f884c-1922-404d-a1e9-8426ed485c39","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  for (let i = 0; i < 60; ++i) {\n    yield i;\n  }\n}","pinCode":false,"dname":"e47b2031-c871-4090-8690-f4101f4c0c3f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`However, you don’t have to yield; you can also return a [generator object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator) created by a [generator function](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function*):`","pinCode":false,"dname":"73c87876-968f-419d-af32-4b68240e11b1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"range(60)","pinCode":false,"dname":"7764100d-5192-4bf4-a1c3-155961911985","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"range = (function* range(n) {\n  for (let i = 0; i < n; ++i) {\n    yield i;\n  }\n})","pinCode":false,"dname":"639bed1b-28f9-4a87-abbf-463e46aefe62","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`In fact, you can return any object that implements [*generator*.next](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/next) and [*generator*.return](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/return), and Observable will treat it as a generator. We call this a “generatorish” object, akin to how [Promise.resolve](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve) defines a “thenable” as any object that implements [*promise*.then](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise/then). For example, here is a generatorish class:`","pinCode":false,"dname":"26369709-1cd3-4cd7-846d-01c99d504108","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"new Range(60)","pinCode":false,"dname":"6abfc540-0e69-4a5d-9efa-b905ab1b8620","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Range = (class Range {\n  constructor(n) {\n    this.n = n;\n    this.i = 0;\n  }\n  next() {\n    return this.i >= this.n\n        ? {done: true}\n        : {done: false, value: this.i++};\n  }\n  return() {\n    this.i = this.n;\n    return {done: true};\n  }\n})","pinCode":false,"dname":"41d54e3f-d291-4690-9318-06030de0ae49","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`And here is a generatorish object:`","pinCode":false,"dname":"05e900b9-953e-47ce-aff7-cebfd07a5b24","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const n = 60;\n  let i = 0;\n  return {\n    next: () => {\n      return i > n \n          ? {done: true} \n          : {done: false, value: i++};\n    },\n    return: () => {\n      i = n;\n      return {done: true};\n    }\n  };\n}","pinCode":false,"dname":"97acc6c2-0dfa-41d6-9650-1465ed3dde34","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can adapt any iterable to a generator cell by [delegating](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/yield*):`","pinCode":false,"dname":"3a125e8d-62fb-4915-961d-bceb5a657cf0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"yield* [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","pinCode":false,"dname":"a350a993-5398-458c-bb81-abfdf19978bb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"yield* iterableRange(60)","pinCode":false,"dname":"1a5d24aa-a71b-4631-9df4-66edc268c0df","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"iterableRange = (function iterableRange(n) {\n  return {\n    [Symbol.iterator]: () => {\n      let i = 0;\n      return {\n        next: () => {\n          return i > n \n             ? {done: true} \n             : {done: false, value: i++};\n        }\n      };\n    }\n  };\n})","pinCode":false,"dname":"308956a5-e50f-4170-880b-4154a40f450f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can also use a for-of loop:`","pinCode":false,"dname":"8fb652eb-618b-4523-8b1a-6cb87d9dadb2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  for (const i of iterableRange(60)) {\n    yield i;\n  }\n}","pinCode":false,"dname":"de5ee9da-512a-430b-af05-d430c11e2d8d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can delegate to async iterables, but unfortunately you have to give Observable a hint that the cell is async. You can do that using a “noop” await on an already-resolved value (here the iterable itself):`","pinCode":false,"dname":"5add918f-1aa9-4846-b693-92955cd86a5c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"yield* await asyncIterableRange(60, 1000)","pinCode":false,"dname":"b28f253a-e6b5-4056-ac6b-80ef5a7de758","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"function asyncIterableRange(n, delay) {\n  return {\n    [Symbol.asyncIterator]: () => {\n      let i = 0\n      return {\n        next: async () => {\n          await Promises.delay(delay);\n          return i > n \n             ? {done: true} \n             : {done: false, value: i++};\n        }\n      };\n    }\n  };\n}","pinCode":false,"dname":"ede5b628-d0af-45b9-981e-e62a9a659eb0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can also use a for-await-of loop:`","pinCode":false,"dname":"c6fb2cb1-b249-43ee-8f99-6e8638330473","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  for await (const i of asyncIterableRange(60, 1000)) {\n    yield i;\n  }\n}","pinCode":false,"dname":"913afe26-142b-466a-81b2-46ecab943250","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"# Cypher Editor","pinCode":false,"dname":"d2c6296c-e396-468b-8223-a38ddaa5a01a","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof cpEditor3 = render(({ useSetter }) => {  \n  const { Space, Row, Col, Button } = Antd;  \n  const [value, setValue] = useState(\"MATCH (n)-[r]->(m) RETURN *\");\n  useSetter({});\n  return  <Row key=\"c43c23b9-5355-4f3c-a1bf-84bcfec507c1\" gutter={{\n                xs: 8,\n                sm: 16,\n                md: 24,\n                lg: 32\n              }}>\n              <Col className=\"gutter-row\" sm={24} md={12}>\n                <CypherEditor  className=\"limit-height\"  value={value}  onValueChange={(\n                  value\n                ) => {\n                  setValue(value);\n                }} />\n                </Col>\n                <Col className=\"gutter-row\" sm={24} md={12}>\n                    <div className=\"d-flex\">\n                        <Button className=\"d-flex align-items-center\" onClick={() => {}}>Run</Button>\n                    </div>\n                </Col>\n            </Row> ;\n})","pinCode":true,"dname":"b8963f94-5a53-44d1-9eb6-baedc8e9e3cb","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof cpEditor = render(({ useSetter }) => {  \n  const { Space, Row, Col, Button } = Antd;  \n  const [value, setValue] = useState(\"MATCH (n)-[r]->(m) RETURN *\");\n  useSetter({});\n  return  <Row key=\"a91c3143-0b84-48a6-9d1b-397ee3a5cf20\" gutter={{\n                xs: 8,\n                sm: 16,\n                md: 24,\n                lg: 32,\n              }}>\n              <Col className=\"gutter-row\" sm={24} md={12}>\n                <CypherEditor  className=\"limit-height\"  value={value}  onValueChange={(\n                  value\n                ) => {\n                  setValue(value);\n                }} />\n                </Col>\n                <Col className=\"gutter-row\" sm={24} md={12}>\n                    <div className=\"d-flex\">\n                        <Button className=\"d-flex align-items-center\" onClick={() => {}}>Run</Button>\n                    </div>\n                </Col>\n            </Row> ;\n})","pinCode":false,"dname":"78d0621b-52c6-4a2c-9fb0-785f3adf46a5","codeMode":"jsx","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof cpEditor2 = render(({ useSetter }) => {  \n  const { Space, Row, Col, Button } = Antd;  \n  const [value, setValue] = useState(\"MATCH (n)-[r]->(m) RETURN *\");\n  useSetter({});\n  return  <Row key=\"3bd4f7e9-8412-49ea-b23a-74b97e68f2f3\" gutter={{\n                xs: 8,\n                sm: 16,\n                md: 24,\n                lg: 32,\n              }}>\n              <Col className=\"gutter-row\" sm={24} md={12}>\n                <CypherEditor2  className=\"limit-height\"  value={value}  onValueChange={(\n                  value\n                ) => {\n                  setValue(value);\n                }} />\n                </Col>\n                <Col className=\"gutter-row\" sm={24} md={12}>\n                    <div className=\"d-flex\">\n                        <Button className=\"d-flex align-items-center\" onClick={() => {}}>Run</Button>\n                    </div>\n                </Col>\n            </Row> ;\n})","pinCode":false,"dname":"2b3f1b0a-bb40-48c8-99ef-dfffbb1f93e1","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"showHint = Codemirror.showHint;","pinCode":false,"dname":"59aa9b02-8973-4af7-a124-1e69b492d073","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"CypherEditor2 = class extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      run,\n      value\n    } = this.props;\n    this.state = {\n      cmvalue: value,\n      isFocused: false,\n      items: props.items || [{\n        value: `MATCH (n)-[r]->(m) RETURN *`,\n        label: \"It's the entire graph!\"\n      }, {\n        value: `MATCH (p:Person)--(m:Movie)\n  RETURN p.name as Person, COUNT(m) as Movies \n  ORDER BY Movies DESC`,\n        label: \"Template\"\n      }, {\n        value: `MATCH (n)-[r]-(m) RETURN * LIMIT 100`,\n        label: \"MATCH (n)-[r]-(m) RETURN * LIMIT 100\"\n      }]\n    };\n    this.options = {\n      value: value,\n      lineNumbers: true,\n      mode: \"cypher\",\n      theme: window.editor.getSettings().getTheme(),\n      placeholder: \"Type Cypher, then Shift-Enter.\",\n      gutters: [\"cypher-hints\"],\n      lineWrapping: true,\n      readOnly: props.readOnly,\n      autofocus: true,\n      smartIndent: false,\n      lint: true,\n      extraKeys: assembling([...COMMON_KEYS, {\n        key: linkKeys(cell_shortcuts_keys[\"Force Run Current Cell\"]),\n        value: cm => {\n          run && run();\n        }\n      }, {\n        key: linkKeys(cell_shortcuts_keys[\"Run Current Cell\"]),\n        value: cm => {\n          run && run();\n        }\n      }, {\n        key: linkKeys(code_editor_keys[\"Show Editor LineNumbers\"]),\n        value: cm => {\n          cm.setOption(\"lineNumbers\", !cm.getOption(\"lineNumbers\"));\n        }\n      }, {\n        key: linkKeys(code_editor_keys[\"Fold Code\"]),\n        value: function (cm) {\n          cm.foldCode(cm.getCursor());\n        }\n      }]),\n      hintOptions: {\n        completeSingle: false,\n        closeOnUnfocus: false,\n        alignWithWord: true,\n        async: true\n      },\n      autoCloseBrackets: {\n        explode: \"\"\n      },\n      ...(this.props.options || {})\n    };\n    this.themeElement = document.createElement(\"div\");\n  }\n  componentDidMount() {\n    actions.inspector(this.themeElement, [actions.types.THEME], theme => {\n      this.cm && this.cm.setOption(\"theme\", theme);\n    });\n    this.cm && this.cm.focus();\n  }\n  componentWillUnmount() {\n    actions.deleteCache(this.themeElement);\n  }\n  codemirrorKeyup(cm, e) {\n    if (!(e.ctrlKey || e.metaKey) && !e.altKey && /^[a-z$._]$/gi.test(e.key)) {\n      showHint(cm, Codemirror.hint.cypher);\n    }\n  }\n  render() {\n    const {\n      onBlur\n    } = this.props;\n    const {\n      items,\n      cmvalue\n    } = this.state;\n    const {\n      DownOutlined\n    } = AntdIcons;\n    const {\n      Dropdown,\n      Menu\n    } = Antd;\n    return jsx`<div className=\"code-edit-wrapper\">\n        <div className=\"code-edit-wrapper-icons d-flex align-items-center\">\n          <${Dropdown} placement=\"bottomCenter\" trigger=${[\"click\"]} overlay=${jsx`<${Menu} className=\"data-html2canvas-ignore import-export-menu normal-icon\" \n          onClick=${info => {\n      let item = items[info.key];\n      this.codeMirror.setValue(item.value);\n      if (this.props.onValueChange) {\n        this.props.onValueChange(this.codeMirror.getValue());\n      }\n    }}>\n            ${_.map(items, (item, index) => {\n      return jsx`<${Menu.Item} key=${index}>${item.label}</${Menu.Item}>`;\n    })}\n          </${Menu}>`} >\n            <${DownOutlined} />\n          </${Dropdown}>\n        </div>\n        <${Controlled} className=${`code-edit-cm`}\n            editorDidMount=${(cm, value, cb) => {\n      this.cm = cm;\n      this.cm && this.cm.focus();\n    }}\n            value=${cmvalue}\n            onBeforeChange=${(cm, data, value) => {\n      this.setState({\n        cmvalue: value\n      });\n    }}\n            onKeyUp=${this.codemirrorKeyup}\n            onBlur=${(cm, e) => {\n      if (e && e.relatedTarget === null) {\n        e.preventDefault();\n        return;\n      }\n      onBlur && onBlur(cm);\n    }}\n            options=${this.options}\n        />\n      </div>`;\n  }\n};","pinCode":true,"dname":"1b2ce04a-fb97-439e-9605-01f314184dff","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"CypherEditor = class extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      run\n    } = this.props;\n    this.state = {\n      isFocused: false,\n      items: props.items || [{\n        value: `MATCH (n)-[r]->(m) RETURN *`,\n        label: \"It's the entire graph!\"\n      }, {\n        value: `MATCH (p:Person)--(m:Movie)\n  RETURN p.name as Person, COUNT(m) as Movies \n  ORDER BY Movies DESC`,\n        label: \"Template\"\n      }, {\n        value: `MATCH (n)-[r]-(m) RETURN * LIMIT 100`,\n        label: \"MATCH (n)-[r]-(m) RETURN * LIMIT 100\"\n      }]\n    };\n    this.options = {\n      lineNumbers: true,\n      mode: \"cypher\",\n      theme: window.editor.getSettings().getTheme(),\n      placeholder: \"Type Cypher, then Shift-Enter.\",\n      gutters: [\"cypher-hints\"],\n      lineWrapping: true,\n      readOnly: props.readOnly,\n      autofocus: true,\n      smartIndent: false,\n      lineNumberFormatter: this.lineNumberFormatter,\n      lint: true,\n      extraKeys: assembling([...COMMON_KEYS, {\n        key: linkKeys(cell_shortcuts_keys[\"Force Run Current Cell\"]),\n        value: cm => {\n          run && run();\n        }\n      }, {\n        key: linkKeys(cell_shortcuts_keys[\"Run Current Cell\"]),\n        value: cm => {\n          run && run();\n        }\n      }, {\n        key: linkKeys(code_editor_keys[\"Show Editor LineNumbers\"]),\n        value: cm => {\n          cm.setOption(\"lineNumbers\", !cm.getOption(\"lineNumbers\"));\n        }\n      }, {\n        key: linkKeys(code_editor_keys[\"Fold Code\"]),\n        value: function (cm) {\n          cm.foldCode(cm.getCursor());\n        }\n      }]),\n      hintOptions: {\n        completeSingle: false,\n        closeOnUnfocus: false,\n        alignWithWord: true,\n        async: true\n      },\n      autoCloseBrackets: {\n        explode: \"\"\n      },\n      ...(this.props.options || {})\n    };\n    this.schema = this.props.autoCompleteSchema;\n    this.themeElement = document.createElement(\"div\");\n  }\n  normalizeLineEndings(str) {\n    if (!str) return str;\n    return str.replace(/\\r\\n|\\r/g, \"\\n\");\n  }\n  lineNumberFormatter(line) {\n    if (!this.codeMirror || this.codeMirror.lineCount() === 1) {\n      return \"$\";\n    } else {\n      return line;\n    }\n  }\n  getCodeMirrorInstance() {\n    return Codemirror;\n  }\n  componentDidMount() {\n    const textareaNode = this.editorReference;\n    const {\n      editor,\n      editorSupport\n    } = cypherCodemirror.createCypherEditor(textareaNode, this.options);\n    /**@type{Codemirror.Editor} */\n    this.codeMirror = editor;\n    this.codeMirror.on(\"keyup\", this.codemirrorKeyup.bind(this));\n    this.codeMirror.on(\"change\", this.codemirrorValueChanged.bind(this));\n    this.codeMirror.on(\"focus\", () => this.focusChanged(true));\n    this.codeMirror.on(\"blur\", () => this.focusChanged(false));\n    this.codeMirror.on(\"scroll\", this.scrollChanged.bind(this));\n    this.codeMirror.setValue(this.props.value);\n    this.editorSupport = editorSupport;\n    this.editorSupport.setSchema(this.schema);\n    if (this.props.initialPosition) {\n      this.goToPosition(this.props.initialPosition);\n    }\n    actions.inspector(this.themeElement, [actions.types.THEME], theme => {\n      this.setTheme(theme);\n    });\n    this.codeMirror.focus();\n  }\n  componentWillUnmount() {\n    actions.deleteCache(this.themeElement);\n  }\n  setTheme(theme) {\n    this.codeMirror && this.codeMirror.setOption(\"theme\", theme);\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      if (this.codeMirror && this.codeMirror.getValue() !== nextProps.value) {\n        this.codeMirror.setValue(nextProps.value);\n      }\n    }\n  }\n  goToPosition(position) {\n    for (let i = 0; i < position.line; i++) {\n      this.codeMirror.execCommand(\"goLineDown\");\n    }\n    for (let i = 0; i <= position.column; i++) {\n      this.codeMirror.execCommand(\"goCharRight\");\n    }\n  }\n  getCodeMirror() {\n    return this.codeMirror;\n  }\n  focus() {\n    if (this.codeMirror) {\n      this.codeMirror.focus();\n    }\n  }\n  focusChanged(focused) {\n    let state = {\n      isFocused: focused\n    };\n    this.setState(state);\n    this.props.onFocusChange && this.props.onFocusChange(focused);\n  }\n  scrollChanged(cm) {\n    this.props.onScroll && this.props.onScroll(cm.getScrollInfo());\n  }\n  codemirrorValueChanged(doc, change) {\n    if (this.props.onValueChange && change.origin !== \"setValue\") {\n      this.props.onValueChange(doc.getValue(), change);\n    }\n  }\n  codemirrorKeyup(cm, e) {\n    if (!(e.ctrlKey || e.metaKey) && !e.altKey && /^[a-z$._]$/gi.test(e.key)) {\n      showHint(cm, Codemirror.hint.cypher);\n    }\n  }\n  render() {\n    const {\n      items\n    } = this.state;\n    const {\n      DownOutlined\n    } = AntdIcons;\n    const {\n      Dropdown,\n      Menu\n    } = Antd;\n    const editorClassNames = classNames(\"ReactCodeMirror\", {\n      \"ReactCodeMirror--focused\": this.state.isFocused\n    }, this.props.className);\n    return jsx`<div className=\"code-edit-wrapper\">\n        <div className=\"code-edit-wrapper-icons d-flex align-items-center\">\n          <${Dropdown} placement=\"bottomCenter\" trigger=${[\"click\"]} overlay=${jsx`<${Menu} className=\"data-html2canvas-ignore import-export-menu normal-icon\" \n          onClick=${info => {\n      let item = items[info.key];\n      this.codeMirror.setValue(item.value);\n      if (this.props.onValueChange) {\n        this.props.onValueChange(this.codeMirror.getValue());\n      }\n    }}>\n            ${_.map(items, (item, index) => {\n      return jsx`<${Menu.Item} key=${index}>${item.label}</${Menu.Item}>`;\n    })}\n          </${Menu}>`} >\n            <${DownOutlined} />\n          </${Dropdown}>\n        </div>\n        <div\n          className=${editorClassNames} style=${{\n      maxHeight: \"158px\",\n      overflowY: \"auto\"\n    }}\n          ref=${ref => this.editorReference = ref}\n        ></div>\n      </div>`;\n  }\n};","pinCode":false,"dname":"e4600cce-6439-4c00-a884-c1cd65fd9156","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"assembling = function (objs) {\n  return _.reduce(objs, (prev, curr) => {\n    const { key, value } = curr;\n    prev[key] = value;\n    return prev;\n  }, {})\n}","pinCode":false,"dname":"059683a9-2a92-4780-91f9-588cbd60d91a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"COMMON_KEYS = [{\n  key: linkKeys(code_editor_keys[\"Fold Code\"]),\n  value: function (cm) {\n    cm.foldCode(cm.getCursor());\n  },\n}, {\n  key: linkKeys(code_editor_keys[\"Comment Lines\"]),\n  value: \"toggleComment\",\n}, {\n  key: linkKeys(code_editor_keys[\"Auto-complete\"]),\n  value: \"autocomplete\",\n}, {\n  key: linkKeys(code_editor_keys[\"Full Screen\"]),\n  value: (cm) => {\n    cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n  },\n}, {\n  key: linkKeys(code_editor_keys[\"Auto-indent\"]),\n  value: \"shiftTabAndUnindentMarkdownList\",\n}, {\n  key: linkKeys(code_editor_keys['Find Current']),\n  value: \"findPersistent\"\n},\n]","pinCode":false,"dname":"97235d31-f69b-4a0a-b06a-123d9c71f8be","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"code_editor_keys = keyMap.code_editor_keys.keys","pinCode":false,"dname":"e475cbb2-bb92-45b7-9ded-f4c208c70591","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"cell_shortcuts_keys = keyMap.cell_shortcuts_keys.keys","pinCode":false,"dname":"3ec4aea6-70af-4680-83d8-c9c533f70cc7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"CodeMirror = require(\"codemirror@5\")","pinCode":false,"dname":"e9f967e8-7694-4b4e-988c-ad284c97bdf3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"classNames = require(\"classnames\");","pinCode":false,"dname":"c296cbbe-2db2-49b1-a865-1b955e57ec3b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"cypherCodemirror = require(\"cypher-codemirror\")","pinCode":false,"dname":"f48b382b-6f5a-426e-9e6d-2584606a00bb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {linkKeys, keyMap} from \"https://grove-help.graphxr.com/keyboard-shortcuts/shortcutKey\"","pinCode":false,"dname":"fe14ec73-39a9-411a-9030-8310ad470915","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"e47d3d74-3f97-485b-a549-4868ee95a8ec","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"CodeMirror.showHint = function (cm, getHints, options) {\n    // We want a single cursor position.\n    if (cm.somethingSelected()) return;\n    if (getHints == null) getHints = cm.getHelper(cm.getCursor(), \"hint\");\n    if (getHints == null) return;\n\n    if (cm.state.completionActive) cm.state.completionActive.close();\n\n    let completion = cm.state.completionActive = new Completion(cm, getHints, options || {});\n    CodeMirror.signal(cm, \"startCompletion\", cm);\n    if (completion.options.async)\n        getHints(cm, function (hints) { completion.showHints(hints); }, completion.options);\n    else\n        return completion.showHints(getHints(cm, completion.options));\n};","pinCode":false,"dname":"0f4eb1a1-528d-45af-9707-929d485dc140","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;","pinCode":false,"dname":"07d3189e-0023-465b-b542-9fbe1d0401e0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"  ARGUMENT_NAMES = /([^\\s,]+)/g;","pinCode":false,"dname":"4388a56e-bb8b-4148-a1b1-0498dbf23d65","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":" function getParamNames(func) {\n  let fnStr = func.toString().replace(STRIP_COMMENTS, '');\n  let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n  if (result === null)\n    result = [];\n  return result;\n}","pinCode":false,"dname":"6464da1e-f547-4457-b9c2-bbd944173c7a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"function Completion(cm, getHints, options) {\n    this.cm = cm;\n    this.getHints = getHints;\n    this.options = options;\n    this.widget = this.onClose = null;\n}","pinCode":false,"dname":"fc3b48d3-fcab-4e8a-942c-be26634c656f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Completion.prototype = {\n    close: function () {\n        if (!this.active()) return;\n\n        if (this.widget) this.widget.close();\n        if (this.onClose) this.onClose();\n        this.cm.state.completionActive = null;\n        CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function () {\n        return this.cm.state.completionActive == this;\n    },\n\n    pick: function (data, i) {\n        let completion = data.list[i];\n        if (completion.hint) completion.hint(this.cm, data, completion);\n        else this.cm.replaceRange(getText(completion), data.from, data.to);\n        this.close();\n    },\n    /**\n     * \n     * @param {Array} data \n     */\n    showHints: function (data) {\n        if (!data || !data.list.length || !this.active()) return this.close();\n        // if (data.list.length > MAX_LENGTH) data.list.splice(MAX_LENGTH);\n        this.showWidget(data);\n    },\n\n    showWidget: function (data) {\n        this.widget = new Widget(this, data);\n        CodeMirror.signal(data, \"shown\");\n\n        let debounce = null, completion = this, finished;\n        let closeOn = this.options.closeCharacters || /[\\s()\\[\\]{};:>,]/;\n        let startPos = this.cm.getCursor(), startLen = this.cm.getLine(startPos.line).length;\n\n        function done() {\n            if (finished) return;\n            finished = true;\n            completion.close();\n            completion.cm.off(\"cursorActivity\", activity);\n            CodeMirror.signal(data, \"close\");\n        }\n        function isDone() {\n            if (finished) return true;\n            if (!completion.widget) { done(); return true; }\n        }\n\n        function update() {\n            if (isDone()) return;\n            if (completion.options.async)\n                completion.getHints(completion.cm, finishUpdate, completion.options);\n            else\n                finishUpdate(completion.getHints(completion.cm, completion.options));\n        }\n        function finishUpdate(data) {\n            if (isDone()) return;\n            if (!data || !data.list.length) return done();\n            completion.widget.close();\n            completion.widget = new Widget(completion, data);\n        }\n\n        function activity() {\n            clearTimeout(debounce);\n            let pos = completion.cm.getCursor(), line = completion.cm.getLine(pos.line);\n            if (pos.line != startPos.line || line.length - pos.ch != startLen - startPos.ch ||\n                pos.ch < startPos.ch || completion.cm.somethingSelected() ||\n                (pos.ch && closeOn.test(line.charAt(pos.ch - 1))))\n                completion.close();\n            else\n                debounce = setTimeout(update, 170);\n        }\n        this.cm.on(\"cursorActivity\", activity);\n        this.onClose = done;\n    }\n};","pinCode":false,"dname":"fd7143b4-9d5f-41ce-b43a-637604309f93","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"function getText(completion) {\n    if ((typeof completion === \"string\") && editor.containsKey(completion)) {\n        return `\"${completion}\"`\n    } else if (typeof completion === \"string\") {\n        return completion;\n    } else {\n        return completion.text;\n    }\n}","pinCode":false,"dname":"bb2a89a2-2c09-4afc-9997-2b1277a09bbd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"function getType(completion) {\n    if ((typeof completion === \"string\") && editor.containsKey(completion)) {\n        return `string`\n    } else if (typeof completion === \"string\") {\n        return \"any\";\n    } else {\n        return completion.type;\n    }\n}","pinCode":false,"dname":"67cf6285-863d-423e-8d19-e6a84447f262","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"\nfunction buildKeyMap(options, handle) {\n    let baseMap = {\n        Up: function () { handle.moveFocus(-1); },\n        Down: function () { handle.moveFocus(1); },\n        PageUp: function () { handle.moveFocus(-handle.menuSize()); },\n        PageDown: function () { handle.moveFocus(handle.menuSize()); },\n        Home: function () { handle.setFocus(0); },\n        End: function () { handle.setFocus(handle.length); },\n        Enter: handle.pick,\n        Tab: handle.pick,\n        Esc: handle.close\n    };\n    let ourMap = options.customKeys ? {} : baseMap;\n    function addBinding(key, val) {\n        let bound;\n        if (typeof val != \"string\")\n            bound = function (cm) { return val(cm, handle); };\n        // This mechanism is deprecated\n        else if (baseMap.hasOwnProperty(val))\n            bound = baseMap[val];\n        else\n            bound = val;\n        ourMap[key] = bound;\n    }\n    if (options.customKeys)\n        for (let key in options.customKeys) if (options.customKeys.hasOwnProperty(key))\n            addBinding(key, options.customKeys[key]);\n    if (options.extraKeys)\n        for (let key in options.extraKeys) if (options.extraKeys.hasOwnProperty(key))\n            addBinding(key, options.extraKeys[key]);\n    return ourMap;\n}","pinCode":false,"dname":"02fb5192-d602-4768-af22-7ce7d4e80a08","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    let widget = this, cm = completion.cm, options = completion.options;\n\n    let hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = 0;\n\n    let completions = data.list;\n    for (let i = 0; i < completions.length; ++i) {\n        let elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n        let className = \"CodeMirror-hint d-flex justify-content-between\" + (i ? \"\" : \" CodeMirror-hint-active\");\n        if (cur.className != null) className = cur.className + \" \" + className;\n        elt.className = className;\n        if (cur.render) cur.render(elt, data, cur);\n        else if (data.cur) {\n            if (cur.target && cur.target instanceof Function) {\n                elt.innerHTML =\n                    `<span>${cur.displayText || getText(cur)}(${getParamNames(cur.target).join(\", \")})</span>${cur.link ? `<span>&nbsp;&nbsp;<a href='${cur.link}'>mdn</a></span>` : \"\"}`\n            } else {\n                elt.innerHTML =\n                    `<span>${cur.displayText || getText(cur)}</span><span>&nbsp;&nbsp;${cur.displayType || getType(cur)}</span>`\n            }\n        } else {\n            elt.innerHTML =\n                `<span>${cur.displayText || getText(cur)}</span><span>&nbsp;&nbsp;${cur.displayType || getType(cur)}</span>`\n        }\n        elt.hintId = i;\n    }\n\n    let pos = cm.cursorCoords(options.alignWithWord !== false ? data.from : null);\n    let left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    let winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    let winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    let box = hints.getBoundingClientRect();\n    let overlapX = box.right - winW, overlapY = box.bottom - winH;\n    if (overlapX > 0) {\n        if (box.right - box.left > winW) {\n            hints.style.width = (winW - 5) + \"px\";\n            overlapX -= (box.right - box.left) - winW;\n        }\n        hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (overlapY > 0) {\n        let height = box.bottom - box.top;\n        if (box.top - (pos.bottom - pos.top) - height > 0) {\n            overlapY = height + (pos.bottom - pos.top);\n            below = false;\n        } else if (height > winH) {\n            hints.style.height = (winH - 5) + \"px\";\n            overlapY -= height - winH;\n        }\n        hints.style.top = (top = pos.bottom - overlapY) + \"px\";\n    }\n    (options.container || document.body).appendChild(hints);\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(options, {\n        moveFocus: function (n) { widget.changeActive(widget.selectedHint + n); },\n        setFocus: function (n) { widget.changeActive(n); },\n        menuSize: function () { return widget.screenAmount(); },\n        length: completions.length,\n        close: function () { completion.close(); },\n        pick: function () { widget.pick(); }\n    }));\n\n    if (options.closeOnUnfocus !== false) {\n        let closingOnBlur;\n        cm.on(\"blur\", this.onBlur = function () { closingOnBlur = setTimeout(function () { completion.close(); }, 100); });\n        cm.on(\"focus\", this.onFocus = function () { clearTimeout(closingOnBlur); });\n    }\n\n    let startScroll = cm.getScrollInfo();\n    cm.on(\"scroll\", this.onScroll = function () {\n        let curScroll = cm.getScrollInfo(), edt = cm.getWrapperElement().getBoundingClientRect();\n        let newTop = top + startScroll.top - curScroll.top;\n        let point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n        if (!below) point += hints.offsetHeight;\n        if (point <= edt.top || point >= edt.bottom) return completion.close();\n        hints.style.top = newTop + \"px\";\n        hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function (e) {\n        let t = e.target || e.srcElement;\n        if (t.hintId != null) { widget.changeActive(t.hintId); widget.pick(); }\n    });\n    CodeMirror.on(hints, \"click\", function (e) {\n        let t = e.target || e.srcElement;\n        if (t.hintId != null) { widget.changeActive(t.hintId); widget.pick(); }\n    });\n    CodeMirror.on(hints, \"mousedown\", function () {\n        setTimeout(function () { cm.focus(); }, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n}","pinCode":false,"dname":"112d6edf-5b15-461e-8b3a-fafe89d20055","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"\nWidget.prototype = {\n    close: function () {\n        if (this.completion.widget != this) return;\n        this.completion.widget = null;\n        this.hints.parentNode.removeChild(this.hints);\n        this.completion.cm.removeKeyMap(this.keyMap);\n\n        let cm = this.completion.cm;\n        if (this.completion.options.closeOnUnfocus !== false) {\n            cm.off(\"blur\", this.onBlur);\n            cm.off(\"focus\", this.onFocus);\n        }\n        cm.off(\"scroll\", this.onScroll);\n    },\n\n    pick: function () {\n        this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function (i) {\n        i = Math.max(0, Math.min(i, this.data.list.length - 1));\n        if (this.selectedHint == i) return;\n        let node = this.hints.childNodes[this.selectedHint];\n        node.className = node.className.replace(\" CodeMirror-hint-active\", \"\");\n        node = this.hints.childNodes[this.selectedHint = i];\n        node.className += \" CodeMirror-hint-active\";\n        if (node.offsetTop < this.hints.scrollTop)\n            this.hints.scrollTop = node.offsetTop - 3;\n        else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n            this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n        CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function () {\n        return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n};","pinCode":false,"dname":"85410424-4d4c-436f-871a-4f32293ecc17","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Controlled2 = (await import('https://cdn.skypack.dev/react-codemirror2@8.0.0?min')).default.Controlled","pinCode":false,"dname":"362e6c93-9f81-4f37-a5ed-1fa4d5f538bf","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => { \n    const { Space } = Antd; \n  const [value,setValue] = useState('<h1>I ♥ react-codemirror2</h1>')\n    return jsx`<${Controlled2}\n  value=${value}\n  options=${{\n    mode: 'xml',\n    theme: 'material',\n    lineNumbers: true\n  }}\n  onBeforeChange=${(editor, data, value) => {\n   setValue(value);\n  }}\n  onChange=${(editor, data, value) => {\n  }}\n/>`;\n})","pinCode":true,"dname":"b827722a-9ad2-4fa5-9fd5-8781c02aa433","codeMode":"javascript2"}}}],"version":"2.19.1"}
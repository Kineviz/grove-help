{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Baby Names ${search !== example ? `â€“ ` + search : ''}\n\nNumber of babies with a given name born in the United States over time. Charts are [horizon][3]-like and adapted from [Cubism.js][4] to faciliate comparing across many names at the same time.\n\nDeclared genders are at birth:\n<span style=\"width: 10px; height: 10px; display: inline-block; background-color: ${d3.schemeAccent[0]}\"></span> female <span style=\"width: 10px; height: 10px; display: inline-block; background-color: ${d3.schemeAccent[1]}\"></span> male.\n\nData from the [Social Security Administration][1] hosted on [Google BigQuery][2].\n\n[1]: https://www.ssa.gov/oact/babynames/limits.html\n[2]: https://console.cloud.google.com/marketplace/details/social-security-administration/us-names?filter=solution-type:dataset&q=public%20data%20names&id=7a385178-115c-44b0-8ec2-4da800e47888\n[3]: https://github.com/d3/d3-plugins/tree/master/horizon\n[4]: https://square.github.io/cubism/`","pinCode":false,"dname":"14b22e5c-9367-4745-8d67-741160cf2485","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Search\n\nGot a specific name on your mind? Search for whatever names you're interested in.  \n[Link to your results](?names=${search})`","pinCode":false,"dname":"a331b1eb-fc1a-4932-9ead-7fe36cd0c7b6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof search = {\n  const match = decodeURIComponent(html`<a href>`.search).match(/names=([^&]+)/)\n  return text({\n    title: \"Names\",\n    value: match ? match[1] : example,\n    submit: \"Search\"\n  })\n}","pinCode":true,"dname":"b948aa81-ec81-4fbd-b446-1de305eb72cd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const names = search\n    .replace(/\\s+/g, '')\n    .split(',')\n    .map(n => n.charAt(0).toUpperCase() + n.slice(1).toLowerCase())\n  return chart(await query(`\n    SELECT name, gender, CAST(year AS STRING) as year, SUM(number) AS number\n    FROM \\`bigquery-public-data.usa_names.usa_1910_current\\`\n    WHERE name IN UNNEST(@names)\n    GROUP BY 1, 2, 3\n    ORDER BY name, gender, year DESC\n  `, { names }))\n}","pinCode":false,"dname":"f6a98ac5-5f6e-4f78-865b-ae04608787f3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof popularityRange = {\n  const year = new Date().getFullYear()\n\n  const from = html`<input class=\"inline\" type=\"number\" min=1910 max=${year} step=1 />`\n  const to = html`<input class=\"inline\" type=\"number\" min=1910 max=${year} step=1 />`\n  \n  const past5Years = html`<a href>the past 5 years</a>`\n  const since1910 = html`<a href>since 1910</a>`\n  const duringThe80s = html`<a href>during the '80s</a>`\n  \n  const form = md`## Popularity\nMost popular names from ${from} to ${to}.  \nTry ${past5Years}, ${since1910}, or ${duringThe80s}.`\n\n  function updateValue(f, t) {\n    if (f && t) { from.value = f; to.value = t; }\n    form.value = [ +from.value, +to.value ]\n    form.dispatchEvent(new CustomEvent('input'))\n  }\n  from.oninput = to.oninput = updateValue\n  past5Years.onclick = e => { e.preventDefault(); updateValue(year - 5, year) }\n  since1910.onclick = e => { e.preventDefault(); updateValue(1910, year) }\n  duringThe80s.onclick = e => { e.preventDefault(); updateValue(1980, 1990) }\n  updateValue(1980, 1990)\n  \n  return form\n}","pinCode":false,"dname":"13044f89-6633-4e2f-9c5d-0bd0cc43b343","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"chart(await query(`\n  WITH popular AS (\n    SELECT name, SUM(number)\n    FROM \\`bigquery-public-data.usa_names.usa_1910_current\\`\n    WHERE year BETWEEN ? AND ?\n    GROUP BY 1\n    ORDER BY 2 DESC\n  )\n  SELECT name, gender, CAST(year AS STRING) as year, SUM(number) AS number\n  FROM \\`bigquery-public-data.usa_names.usa_1910_current\\`\n  WHERE name IN (\n    SELECT name FROM popular LIMIT 8\n  )\n  GROUP BY 1, 2, 3\n  ORDER BY name, gender, year DESC\n`, popularityRange))","pinCode":false,"dname":"d04dc71c-1bc9-455d-9a84-610e80e28711","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof movementYear = {\n  const year = html`<input class=\"inline\" type=\"number\" value=1940 min=1910 max=${new Date().getFullYear()} step=1 />`\n  \n  const form = md`## Movers\nInstead of popularity, what about quick rises in popularity? These names were really gaining traction in ${year}.`\n\n  year.oninput = () => {\n    form.value = +year.value\n    form.dispatchEvent(new CustomEvent('input'))\n  }\n  year.oninput()\n  \n  return form\n}","pinCode":false,"dname":"33435632-ac9d-4345-9114-eb558693627c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"chart(await query(`\n  WITH current_year AS (\n    SELECT name, SUM(number) AS number\n    FROM \\`bigquery-public-data.usa_names.usa_1910_current\\`\n    WHERE year = @movementYear\n    GROUP BY 1\n  ),\n  last_year AS (\n    SELECT name, SUM(number) AS number\n    FROM \\`bigquery-public-data.usa_names.usa_1910_current\\`\n    WHERE year = @movementYear - 1\n    GROUP BY 1\n  ),\n  changers AS (\n    SELECT c.name, (c.number - l.number)\n    FROM current_year c\n    JOIN last_year l on l.name = c.name\n    GROUP BY 1, 2\n    ORDER BY 2 DESC\n  )\n  SELECT name, gender, CAST(year AS STRING) as year, SUM(number) AS number\n  FROM \\`bigquery-public-data.usa_names.usa_1910_current\\`\n  WHERE name IN (\n    SELECT name FROM changers LIMIT 8\n  )\n  GROUP BY 1, 2, 3\n  ORDER BY name, gender, year DESC\n`, { movementYear }))","pinCode":false,"dname":"9be4dcde-210c-453d-a44a-c1e4149bed12","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Unisex\nNames popular with all genders. \"Unknown\" is likely a standard Social Security Administration practice when a child went unnamed at birth.`","pinCode":false,"dname":"aa74edcd-4828-417b-a654-a0ea00ac5d81","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"chart(await query(`\n  WITH male AS (\n    SELECT name, SUM(number) AS number\n    FROM \\`bigquery-public-data.usa_names.usa_1910_current\\`\n    WHERE gender = 'M'\n    GROUP BY 1\n  ),\n  female AS (\n    SELECT name, SUM(number) AS number\n    FROM \\`bigquery-public-data.usa_names.usa_1910_current\\`\n    WHERE gender = 'F'\n    GROUP BY 1\n  ),\n  unisex AS (\n    SELECT m.name, ABS(m.number - f.number), m.number + f.number AS t\n    FROM male m\n    JOIN female f on f.name = m.name\n    WHERE m.number + f.number > 10000\n    ORDER BY 2 ASC, 3 DESC\n  )\n  SELECT name, gender, CAST(year AS STRING) as year, SUM(number) AS number\n  FROM \\`bigquery-public-data.usa_names.usa_1910_current\\`\n  WHERE name IN (\n    SELECT name FROM unisex LIMIT 8\n  )\n  GROUP BY 1, 2, 3\n  ORDER BY name, gender, year DESC\n`))","pinCode":false,"dname":"95ecbbcd-94a8-4c50-bc60-b413d0f26c57","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`# TODO\n\n- Normalize to yearly cohort (numbers as % of births that year)\n- Regional trends\n- Making a comeback (bimodal shape)\n- Draw an arbitrary shape`","pinCode":false,"dname":"16c14dd3-c962-48f2-a8fb-008b6da51a27","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---`","pinCode":false,"dname":"d2f59d08-fae6-4c38-a264-545004f07e8d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"example = (\"Amanda, Ashley, Ava, Jane, Keith, Noah, Oliver, Thomas, Morgan, Emerson, Jessie\")","pinCode":false,"dname":"3675454f-20ac-4a26-912b-04445fb5d8c2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"chart = (function chart(data) {\n  const rowHeight = 45\n  const bands = 4\n  const padding = { top: 20, right: 10, bottom: 20, left: 10 }\n  \n  const grouped = d3.group(data, d => d.name, d => d.gender)\n  const height = grouped.size * rowHeight\n  \n  const x = d3.scaleTime()\n      .domain(yearExtent.map(y => new Date(y, 0, 1)))\n      .range([0, width - padding.left - padding.right])\n  const y = d3.scaleSqrt()\n      .domain([0, d3.max(data, d => d.number) / bands])\n      .range([rowHeight, 0])\n  const color = d3.scaleOrdinal(d3.schemeAccent)\n      \n  const area = d3.area()\n      .x(d => x(new Date(d.year, 0, 1)))\n      .y0(y(0))\n      .y1(d => y(d.number))\n\n  const svg = DOM.svg(width + padding.left + padding.right,\n                      height + padding.top + padding.bottom)\n  \n  // clip path\n  const clip = DOM.uid('clip')\n  d3.select(svg).append('clipPath')\n      .attr('id', clip.id)\n    .append('rect')\n      .attr('width', width)\n      .attr('height', rowHeight)\n\n  const chart = d3.select(svg).append('g')\n      .attr('transform', `translate(${padding.left}, ${padding.top})`)\n      .style('user-select', 'none')\n      .style('-moz-user-select', 'none')\n      .style('-webkit-user-select', 'none')\n  \n  // axes\n  const axes = chart.selectAll('g.axis').data([0, height])\n    .enter().append('g')\n      .attr('transform', d => `translate(0, ${d})`)\n      .each(function (d) {\n        d3.select(this).call(d === 0 ? d3.axisTop(x) : d3.axisBottom(x))\n      })\n  \n  // names\n  const names = chart.selectAll('g.name').data(Array.from(grouped))\n    .enter().append('g')\n      .attr('transform', (d, i) => `translate(0, ${i * rowHeight})`)\n      .attr('clip-path', clip)\n\n  // genders\n  const genders = names.selectAll('g.gender').data(d => Array.from(d[1]))\n    .enter().append('g')\n  for (let i = 0; i < bands; i++)\n    genders.append('path')\n        .attr('fill', d => color(d[0]))\n        .attr('opacity', 1/bands)\n        .attr('transform', `translate(0, ${i * rowHeight})`)\n        .attr('d', d => area(d[1]))\n  \n  // name\n  names.append('text')\n      .attr('y', rowHeight - 5)\n      .text(d => d[0])\n  \n  // values, brush\n  const rule = chart.append('g')\n  rule.append('rect')\n      .attr('width', 1)\n      .attr('height', height)\n  const brushTicks = rule.selectAll('text').data([-8.5, height + 17])\n    .enter().append('text')\n      .attr('y', d => d)\n      .attr('text-anchor', 'middle')\n      .attr('font-size', 12)\n  const opacity = d3.scalePow([0, 10], [0, 1]).exponent(2).clamp(true)\n  const values = genders.append('text')\n      .attr('text-anchor', 'end')\n      .attr('fill', d => color(d[0]))\n      .attr('y', d => d[0] === 'F' ? rowHeight - 5 : rowHeight - 25)\n  brush(x(x.domain()[1]))\n  \n  d3.select(svg)\n      .on('mousemove', () => brush(d3.mouse&&d3.mouse(chart.node())[0]))\n      .on('touchmove', () => brush(d3.touches&&d3.touches(chart.node())[0][0]))\n  function brush(px) {\n    const year = x.invert(px).getFullYear()\n    \n    rule\n      .attr('transform', `translate(${px}, 0)`)\n    \n    brushTicks\n      .text(year)\n    axes.selectAll('text')\n      .attr('opacity', d => opacity(Math.abs(d.getFullYear() - year)))\n    \n    values\n      .attr('x', px - 5)\n      .text(d => {\n        const found = d[1].find(v => v.year == year) // TODO: bisect\n        return found ? format(found.number) : ''\n      })\n  }\n\n  return svg\n})","pinCode":false,"dname":"3489e080-d5c2-46ba-8070-5d5e203e6213","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"format = (d3.format(','))","pinCode":false,"dname":"b3e42c1f-5ea6-49b0-a76c-7be22ebf64f6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"yearExtent = {\n  const result = await query('SELECT MIN(year) AS min, MAX(year) AS max FROM \\`bigquery-public-data.usa_names.usa_1910_current\\`')\n  return [result[0].min, result[0].max]\n}","pinCode":false,"dname":"97a87d59-8767-4597-ae1f-f46b01d47273","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"query = (async function query(sql, params) {\n  const res = await fetch('https://names.visnup.now.sh', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ query: sql, params })\n  })\n\n  if (res.ok) {\n    return await res.json()\n  } else {\n    const contentType = res.headers.get('content-type')\n    if (contentType && contentType.indexOf('application/json') !== -1) {\n      const error = await res.json()\n      throw Error(error.message)\n    } else {\n      throw Error(await res.text())\n    }\n  }\n})","pinCode":false,"dname":"9947ade3-9e59-49be-a721-386967986167","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<style>\n  input.inline { width: 4em }\n</style`","pinCode":false,"dname":"462e7b02-0536-42e3-a7e7-f5b42819c224","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---`","pinCode":false,"dname":"305a98dc-523c-4d21-a055-065cd514faac","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { table }  from 'databases/tables'","pinCode":false,"dname":"a955ac8a-6f5b-41af-a1ca-9345b595223a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { text }  from 'databases/inputs'","pinCode":false,"dname":"1762bf5d-fe2a-4ca3-8e03-a27249a8f61c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"d3 = (require('d3-array', 'd3-axis', 'd3-format', 'd3-scale', 'd3-scale-chromatic', 'd3-selection', 'd3-shape'))","pinCode":false,"dname":"f7bddb11-04ed-4cbe-95e2-5f8538adc999","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Connecting to databases\n\nGrove database clients allow secure and convenient querying of SQL databases from private notebooks. You can feed query results directly into visualizations, and you can use reactive values as parameters in dynamic queries!\n\n<video src='${await FileAttachment(\"stocks.mp4\").url()}' poster='${await FileAttachment(\"stocks-poster.png\").url()}' style='max-width:640px;width:100%;border-radius:2px' controls></video>\n\nThis walkthrough discusses connecting notebooks to databases that are reachable from the public internet, with the connection hosted by Observable. If you wish to use your notebooks to query a database on your local computer, or on a private network, we also provide a [self-hosted database proxy](https://observablehq.com/@observablehq/self-hosted-database-proxies) that you may prefer to use.`","pinCode":false,"dname":"fa360f79-c016-4c9f-b25d-5a6dd4bb5195","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Setting up a database client\n\nWe currently support PostgreSQL 8+, MySQL 5, Google BigQuery, and Snowflake. We highly recommend that you use an SSL-encrypted connection and set up a read-only database user — perhaps also restricted via SQL \\`GRANT\\` permissions to only be able to read the relevant tables and columns — specifically for connecting to Observable.\n\nWe regularly update our hosted database connectors and the current versions are:\n\n| Connector | Driver Version | \n| --- | --- |\n| PostgreSQL | 8.7.1 ([details](https://node-postgres.com/announcements)) |\n| MySQL | 2.18.1 ([details](https://github.com/mysqljs/mysql))|\n| BigQuery | 4.7.0 ([details](https://www.npmjs.com/package/@google-cloud/bigquery)) |\n| Snowflake | 1.5.2 ([details](https://github.com/snowflakedb/snowflake-connector-nodejs/releases)) |\n\nTo get started, navigate to the [Databases tab](/settings/databases) in Settings. A database client can be created for personal use or shared by a [team](/teams), and is only accessible from that user or team’s private notebooks. Sharing or publishing a notebook that uses a database connector will immediately revoke that notebook’s access to the database.\n\n<figure style=\"max-width: 470px; text-align: center;\">\n<img src=\"${await FileAttachment(\"db-setup.png\").url()}\"/>\n<figcaption>Setting up a new PostgreSQL or MySQL database client</figcaption></figure>\n\nDatabase connections are tested when they’re saved, and show a warning if the client has write permissions or if the connection has problems. Connections over SSL are encrypted, but not (yet) verified, as most cloud database hosts either provide their own certification authority, or issue unverifiable certificates.`","pinCode":false,"dname":"a2315667-40f8-4bd7-a2d2-78f241ef47bb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Using a database client\n\nCreate a DatabaseClient for a configured database, then use <span style=\"white-space: nowrap;\">\\`client.query(sql, [parameters])\\`</span> to issue a query, or \\`client.describe(table)\\` to inspect the schema.`","pinCode":false,"dname":"9034fb23-df48-4cd9-b9cd-1380d4557b3b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"dc = (md`### DatabaseClient(*name*)\n\nReturns a promise to the client for the database with the specified *name*. The first time you call this method from a private notebook, you’ll be prompted to allow the notebook access to this database.`)","pinCode":false,"dname":"c8ff3d15-ddea-4fd4-8615-f3e938ed65ea","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"client = (DatabaseClient(\"Baby Names\"))","pinCode":false,"dname":"f5340940-420a-460b-93e1-d76f0f94241f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"query = (md`### *client*.query(*query*[, *parameters*])\nRun the specified SQL *query*, returning a promise to the array of results. (You can either explicitly await the promise as part of a larger expression, or rely on Observable’s [implicit cell-level await](/@observablehq/introduction-to-promises).)\n\nIf *parameters* is specified, it is an array of values to bind to query parameters. The parameter syntax depends on the database type: PostgreSQL uses numbered parameters (\\`$1\\`, \\`$2\\`, …), while MySQL uses ordered parameters (repeating \\`?\\`). BigQuery can use named (\\`@age\\`, \\`@name\\`, …) or ordered (repeating \\`?\\`) parameters. Please refer to the respective documentation for [PostgreSQL](https://node-postgres.com/features/queries#parameterized-query), [MySQL](https://github.com/mysqljs/mysql/blob/master/Readme.md#escaping-query-values), [BigQuery](https://cloud.google.com/bigquery/docs/parameterized-queries), and [Snowflake](https://docs.snowflake.com/en/user-guide/nodejs-driver-use.html#binding-statement-parameters).`)","pinCode":false,"dname":"8e41a7da-78d7-4586-9084-a041588433ee","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"names = (client.query(\n  `SELECT name, gender, year, SUM(number) AS number\n  FROM names\n  WHERE year > ?\n  GROUP BY name, gender, year`,\n  [1920]\n))","pinCode":false,"dname":"f60e95ff-c5ce-4b53-a564-ef9eb82e3f22","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"horizon(names)","pinCode":false,"dname":"d2372246-b372-484f-a49d-a3040c7b4d5e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"queryRow = (md`### *client*.queryRow(*query*[, *parameters*])\n\nAn alternative to [*client*.query](#query) that returns a single row instead of an array of results.`)","pinCode":false,"dname":"8fe20cce-da72-45cd-96fc-bd950ab55eca","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"client.queryRow(\n  `SELECT MIN(year) AS year\n  FROM names\n  WHERE name = ?`,\n  [\"Loki\"]\n)","pinCode":false,"dname":"e74f2229-5f2f-4b86-964e-fa8d1b98eb3b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"explain = (md`### *client*.explain(*query*[, *parameters*])\n\nExplains the query plan for the specified *query*, returning a promise to an HTML element. Currently this is only supported for PostgreSQL databases.`) ","pinCode":false,"dname":"9af7466e-832a-4df7-8020-f714046689ad","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"client.explain(\n  `SELECT MIN(year) AS year\n  FROM names\n  WHERE name = ?`,\n  [\"Loki\"]\n)","pinCode":false,"dname":"e560ba85-af14-44eb-a249-56aecdc20a72","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"describe = (md`### *client*.describe([*name*])\n\nDescribes the schema for the table with the specified *name*, returning a promise to an HTML table. The exact output depends on the database type.`)","pinCode":false,"dname":"ab88d3e4-bdfb-4c42-b15f-8344b50174e9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"table = (client.describe(\"names\"))","pinCode":false,"dname":"73d9a88a-2320-464f-b858-c24d6f71f6a7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`In addition to the returned HTML table, you can access the table schema programmatically as *table*.value. The returned array contains an object for each of the table’s columns.`","pinCode":false,"dname":"e68e7594-a6f4-4935-b02b-53e576f1b8a6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"table.value","pinCode":false,"dname":"c80b9135-90ac-4c5c-8f0f-a3f9f319f2c5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you don’t specify a table *name*, *client*.describe instead describes the available tables in the database.`","pinCode":false,"dname":"5713c2fa-f54a-478e-a7dc-d97c0c760cf3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"client.describe()","pinCode":false,"dname":"3fb13d6e-480d-4d1a-9c72-6cca57987a1c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Got a different setup?\n\nNeed to access a different type of database? Or a connection option aside from the [self-hosted database proxies](https://observablehq.com/@observablehq/self-hosted-database-proxies)? Let us know at ${support(\n  { subject: \"Custom data connectors\" }\n)}.`","pinCode":false,"dname":"bcecc30b-b7c8-4a1e-b9e9-555164efcc5c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Appendix`","pinCode":false,"dname":"054900df-f151-45f2-9805-63bec922f913","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { MockDatabaseClient as DatabaseClient }  from 'databases/cc1c4f2583af6f34'","pinCode":false,"dname":"0d481547-d647-4ba8-a733-07419cab3ec6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"yearExtent = ([1920, 2018])","pinCode":false,"dname":"48266039-f25c-4d35-8002-4805042c4f8e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { chart as horizon } with { yearExtent } from 'databases/ce835e3ba8d70b3f'","pinCode":false,"dname":"5ed2690e-d1bd-4216-a54c-9cf6a30097de","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { support }  from 'databases/4188fd23699b2b3d'","pinCode":false,"dname":"a7836759-1645-4d5f-b3b7-9b76b8dd693c","codeMode":"javascript2"}}}],"version":"2.19.1"}
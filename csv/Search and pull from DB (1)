{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md `#### Lables`","pinCode":false,"dname":"779fd089-599b-42df-a863-122566af5481","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof labels=Inputs.table(Labels, {required:false})","pinCode":false,"dname":"bbcb3d06-3134-4bfe-949c-3968ecca2112","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${labels.map(l=>l.label)}`,{\n  reduce: async ()=>{\n    const whereClause = labels\n      .map(l=>l.label)\n      .map(label => `n:${label}`).join(' OR ');\n    const query =`match (n) WHERE ${whereClause} RETURN n`\n    console.log(query)\n    await gxr.neo4j(query)\n  }, \n  disabled:labels.length==0\n})","pinCode":false,"dname":"882ccd5e-fca3-4324-a11a-5024cd2cbea2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Labels = {\n  let res = await gxr.neo4j(`MATCH (n)\nRETURN labels(n) AS label, count(n) as cnt`, {saveToGraph:false})\n  let arr= res._content.data\n  arr.shift()\n  return arr.map(\n    elem=>({\n      label: elem[0][0],\n      count: elem[1].low\n  }))\n}","pinCode":false,"dname":"7ee28ad4-1775-4c39-b24e-78b9acdc2c31","codeMode":"javascript2","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof condition = render(({ useSetter }) => {\n  const [selectedLabel, setSelectedLabel] = useState(Labels[0].label);\n  const [properties, setProperties] = useState(propertiesMap[selectedLabel]);\n  if (!selectedLabel) {\n    return jsx`<div>loading...</div>`;\n  }\n  const [selectedProp, setSelectedProp] = useState(properties[0]);\n  const [searchText, setSearchText] = useState(\"\");\n  useSetter({ selectedLabel, properties, selectedProp, searchText });\n  return jsx`<div className=\"d-flex flex-wrap align-items-center flex-gap\">\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>Category:</label>\n      <select className=\"oi-3a86ea-input\" value='${selectedLabel}' \n      onChange=${(e) => {\n        let selectedLabelTmp = e.target.value;\n        setSelectedLabel(selectedLabelTmp);\n        setProperties(propertiesMap[selectedLabelTmp]);\n      }}>\n      ${_.map(Labels, ({ label }) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>Property:</label>\n      <select className=\"oi-3a86ea-input\" value='${selectedProp}' \n      onChange=${(e) => setSelectedProp(e.target.value)}>\n      ${_.map(properties, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n    \t<label >Search:</label>\n    \t<div className=\"oi-3a86ea-input\">\n      \t<input type=\"text\" value='${searchText}'  onChange=${(e) =>\n    setSearchText(e.target.value)} />\n    \t</div>\n \t </div>\n  </div>`;\n})","pinCode":false,"dname":"214fef28-c2a5-4cb4-8338-f80f522a68f9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof selectedSearchEntries={\n  if(condition.searchText.trim()==\"\"){\n    return Inputs.table([])\n  }\n  let query = `MATCH (n:${condition.selectedLabel}) \n  \twhere tolower(n.${condition.selectedProp} ) CONTAINS tolower('${condition.searchText}')\n    return n limit 10`\n   let nodes=await gxr.neo4j(query, {saveToGraph: false})\n  let rawdata = nodes?._content?.data?.nodes\n  if(!rawdata){\n    return Inputs.table([])\n  }\n  let propList = rawdata.map(d=>_.merge({}, {_id: d.id},d.properties))\n  return Inputs.table(propList)\n}","pinCode":false,"dname":"5bcb6168-adcc-4329-aae7-5ee47fa693ee","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button('Add to Graph', {reduce:()=>{\n  let ids=selectedSearchEntries.map(d=>d._id).join(\", \")\n  let query = `MATCH (n) \n    where ID(n) in [${ids}]\n    return n`\n  gxr.neo4j(query)\n}})\n","pinCode":false,"dname":"19ee4482-c3d6-4d5d-96cf-558766731886","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md `#### Relationships`","pinCode":false,"dname":"95facc67-fc6c-47c3-8b64-1718cbc708b8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof relationships=Inputs.table(Relationships, {required:false})","pinCode":false,"dname":"ff73ab5e-5d0d-4a72-86a5-f987722504f4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${relationships.map(r=>r.relationship)}`, {\n  reduce: async ()=>{\n    const whereClause = relationships\n      .map(l=>l.relationship)\n      .map(rel => `r:${rel}`).join(' OR ');\n    const query =`match (n)-[r]->(m) WHERE ${whereClause} RETURN *`\n    console.log(query)\n    await gxr.neo4j(query)\n  },\n  disabled: relationships.length==0\n})","pinCode":false,"dname":"5b764c9e-8b88-4cfa-b2e7-6b92806460d1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Relationships = {\n  let res = await gxr.neo4j(`MATCH ()-[r]->()\nRETURN type(r) AS relationshipType, count(r) as cnt\n`, {saveToGraph:false})\n  let arr= res._content.data\n  arr.shift()\n  return arr.map(elem=>({relationship:elem[0], count:elem[1].low}))\n}","pinCode":false,"dname":"07345ff1-7df4-4390-8deb-0a5c5008bd8f","codeMode":"javascript2","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"Button('Expand', async ()=>{\n  const selected = gxr.nodes(\":selected\")\n  if(selected.length==0){\n    alert('Please select at least one nodes')\n    return\n  }\n  let ids = gxr.nodes(\":selected\").map(n=>parseInt(n.id))\n  let expand_on = relationships.map(l=>l.relationship)\n  let relStr = expand_on.length>0 ?\n      ':'+expand_on.join('|') : ''\n  let query = `MATCH (n)-[r${relStr}]-(m) \n  where id(n) in [${ids}]\n  return *`\n  console.log(query)\n  await gxr.neo4j(query)\n})","pinCode":false,"dname":"1407d692-3e5c-4659-aa8c-a21e177887dd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"propertiesMap= {\n  let promiseMap= {};\n  for(let i =0;i<Labels.length;i++){\n     let res = await gxr.neo4j(`MATCH (p:${Labels[i].label})  RETURN keys(p);`, {\n      saveToGraph: false,\n    });\n    let arr = res._content.data;\n    promiseMap[Labels[i].label]= Array.from(\n      _.reduce(\n        arr.slice(1),\n        (p, o) => {\n          _.each(o[0], (v) => {\n            p.add(v);\n          });\n          return p;\n        },\n        new Set()\n      )\n    );\n  }\n  return promiseMap;\n}","pinCode":false,"dname":"7dce94f4-962d-4d5c-b330-2248da4651c7","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect } from '%projects/userGuideProjectId/https://grove-help.graphxr.com/react/react'","pinCode":false,"dname":"f97d0bc6-d690-48ba-96df-59ad4f455dfb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<style>\n  .codex-editor{\n   font-size:1.2em\n  }\n   label{\n   white-space: pre!important;\n  }\n  label {\n    margin-bottom: unset;\n}\n</style>`","pinCode":false,"dname":"9f52b288-526b-41b9-8091-f2833d80cdfe","codeMode":"javascript2"}}}],"version":"2.19.1"}
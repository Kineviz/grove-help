{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md `#### Lables`","pinCode":false,"dname":"779fd089-599b-42df-a863-122566af5481","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof labels=Inputs.table(Labels, {required:false})","pinCode":false,"dname":"bbcb3d06-3134-4bfe-949c-3968ecca2112","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${labels.map(l=>l.label)}`,{\n  reduce: async ()=>{\n    const whereClause = labels\n      .map(l=>l.label)\n      .map(label => `n:${label}`).join(' OR ');\n    const query =`match (n) WHERE ${whereClause} RETURN n`\n    console.log(query)\n    await gxr.neo4j(query)\n  }, \n  disabled:labels.length==0\n})","pinCode":false,"dname":"882ccd5e-fca3-4324-a11a-5024cd2cbea2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Labels = {\n  let res = await gxr.neo4j(`MATCH (n)\nRETURN labels(n) AS label, count(n) as cnt`, {saveToGraph:false})\n  let arr= res._content.data\n  arr.shift()\n  return arr.map(\n    elem=>({\n      label: elem[0][0],\n      count: elem[1].low\n  }))\n}","pinCode":false,"dname":"7ee28ad4-1775-4c39-b24e-78b9acdc2c31","codeMode":"javascript2","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof selectedLabel=Inputs.select(Labels.map(d=>d.label), {label: 'Category:', width:120})","pinCode":false,"dname":"6bfc63bb-8f17-4074-9018-66eec528d087","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof selectedProp= {\n\tlet query = `MATCH (n:${selectedLabel}) \n    RETURN keys(n) as keys limit 1`\n \tlet res= await gxr.neo4j(query, {saveToGraph:false})   \n    let keys = res._content.data[1][0]\n    return Inputs.select(keys, {label: \"Property:\", width: 120})\n}","pinCode":false,"dname":"2a52d244-27b3-4f10-a3da-fad90b63f688","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof searchText=Inputs.text({label:\"Search:\", width: 120})","pinCode":false,"dname":"f1bb9b9e-be50-45ac-8ed0-bedb61b33d02","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof selectedSearchEntries={\n  if(searchText.trim()==\"\"){\n    return null\n  }\n  let query = `MATCH (n:${selectedLabel}) \n  \twhere tolower(n.${selectedProp} ) CONTAINS tolower('${searchText}')\n    return n limit 10`\n   let nodes=await gxr.neo4j(query, {saveToGraph: false})\n  let rawdata = nodes._content.data.nodes\n  let propList = rawdata.map(d=>_.merge({}, {_id: d.id},d.properties))\n  return Inputs.table(propList)\n}","pinCode":false,"dname":"5bcb6168-adcc-4329-aae7-5ee47fa693ee","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button('Add to Graph', {reduce:()=>{\n  let ids=selectedSearchEntries.map(d=>d._id).join(\", \")\n  let query = `MATCH (n) \n    where ID(n) in [${ids}]\n    return n`\n  gxr.neo4j(query)\n}})\n","pinCode":false,"dname":"19ee4482-c3d6-4d5d-96cf-558766731886","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md `#### Relationships`","pinCode":false,"dname":"95facc67-fc6c-47c3-8b64-1718cbc708b8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof relationships=Inputs.table(Relationships, {required:false})","pinCode":false,"dname":"ff73ab5e-5d0d-4a72-86a5-f987722504f4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${relationships.map(r=>r.relationship)}`, {\n  reduce: async ()=>{\n    const whereClause = relationships\n      .map(l=>l.relationship)\n      .map(rel => `r:${rel}`).join(' OR ');\n    const query =`match (n)-[r]->(m) WHERE ${whereClause} RETURN *`\n    console.log(query)\n    await gxr.neo4j(query)\n  },\n  disabled: relationships.length==0\n})","pinCode":false,"dname":"5b764c9e-8b88-4cfa-b2e7-6b92806460d1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Relationships = {\n  let res = await gxr.neo4j(`MATCH ()-[r]->()\nRETURN type(r) AS relationshipType, count(r) as cnt\n`, {saveToGraph:false})\n  let arr= res._content.data\n  arr.shift()\n  return arr.map(elem=>({relationship:elem[0], count:elem[1].low}))\n}","pinCode":false,"dname":"07345ff1-7df4-4390-8deb-0a5c5008bd8f","codeMode":"javascript2","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"Button('Expand', async ()=>{\n  const selected = gxr.nodes(\":selected\")\n  if(selected.length==0){\n    alert('Please select at least one nodes')\n    return\n  }\n  let ids = gxr.nodes(\":selected\").map(n=>parseInt(n.id))\n  let expand_on = relationships.map(l=>l.relationship)\n  let relStr = expand_on.length>0 ?\n      ':'+expand_on.join('|') : ''\n  let query = `MATCH (n)-[r${relStr}]-(m) \n  where id(n) in [${ids}]\n  return *`\n  console.log(query)\n  await gxr.neo4j(query)\n})","pinCode":false,"dname":"1407d692-3e5c-4659-aa8c-a21e177887dd","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Grove: The User Manual\n\n<figure>${Object.assign(await FileAttachment(\"girl-reading.png\").image(), { alt: 'Girl reading', style: 'width: 100%; max-width: 440px;' })}</figure>\n\n👋 Welcome to Grove — the home of magic notebooks for the web! There’s a lot to learn, and a lot to explore. This notebook organizes our reference material into a table of contents, to serve as a jumping-off point for learning whatever you need to know next.\n\n<small>*If you notice a useful resource that’s missing from this page, please [send it as a suggestion](https://beta.grove.com/@grove/suggestions-and-comments)!*</small>`","pinCode":true,"dname":"_1643188303582","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Link(\"%projects/5f3ca1a2bd9c1d2c88696fe9/test\",\"test\")","pinCode":true,"dname":"_1643248409184","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"vimEnabled":false,"insertMode":false,"value":"md`## Start Here\n\n* #### ${Link(\"five-minute-introduction/five-minute-introduction\")}<br>\nAn introduction that demonstrates what makes Observable a unique environment for creative code.\n\n* #### ${Link(\"tutorial/tutorial\")}<br>\nA hands-on introduction to the Observable user interface and the basics of editing code.\n\n* #### [Observable’s not JavaScript](/@observablehq/observables-not-javascript)<br>\nExplains the differences between the regular JavaScript you may already be accustomed to, and reactive JavaScript in Observable.\n\n* #### [Introduction to HTML](https://observablehq.com/@observablehq/introduction-to-html)<br>\nShows how to render HTML — and Markdown, and SVG, and Canvas — and how to combine them.\n\n* #### [Introduction to Imports](https://observablehq.com/@observablehq/introduction-to-imports)<br>\nHow to reuse any part of any notebook in any other notebook.\n\n* #### [The Standard Library](https://observablehq.com/@observablehq/stdlib)<br>\nFiles, Generators, Promises, require, DOM, and more! Observable comes with a small, but well considered, standard library.\n\n* #### [How Observable Runs](https://observablehq.com/@mbostock/how-observable-runs)<br>\nUses flow diagrams to explain Observable’s dataflow runtime and programming model.`","pinCode":true,"dname":"_1643188303583"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Notebook Concepts\n\n* #### [Introduction to Data](https://observablehq.com/@observablehq/introduction-to-data)<br>\nAn overview of various methods for getting your data into Observable in the first place.\n\n* #### [File Attachments](https://observablehq.com/@observablehq/file-attachments)<br>\nPainlessly upload and use files directly in Observable notebooks. Versioned, streamable, suggest-able, replace-able, they’re pretty convenient.\n\n* #### [Introduction to require](https://observablehq.com/@tmcw/introduction-to-require)<br>\nHow to require JavaScript libraries from [npm](https://www.npmjs.com/), or anywhere on the web.\n\n* #### [Introduction to Views](https://observablehq.com/@observablehq/introduction-to-views)<br>\nViews allow you to directly control values in your notebook with interactive UI widgets (or interactive charts, or visualizations, or any interface you can imagine).\n\n* #### [Introduction to Promises](https://observablehq.com/@observablehq/introduction-to-promises)<br>\nObservable notebooks wait for promises by default. This notebook explains what they are, and how to use them to manage asynchrony.\n\n* #### [Introduction to Generators](https://observablehq.com/@observablehq/introduction-to-generators)<br>\nAnimations, simulations, transformations — generators represent values that change over time.\n\n* #### [Introduction to Asynchronous Iteration](https://observablehq.com/@observablehq/introduction-to-asynchronous-iteration)<br>\nAsynchronous iterators are a new JavaScript feature that are very useful in Observable notebooks, allowing you to easily create cells that produce new values when their data is ready.\n\n* #### [Introduction to Mutable State](https://observablehq.com/@observablehq/introduction-to-mutable-state)<br>\nNormally, your notebooks evaluate cleanly, in their logical dataflow order, from input to output. But some complex notebooks require more complicated tangles of effects. Observable supports mutable state, which gives you fine-grained control over the order of evaluation of your program.\n\n* #### [Introduction to Visual Dataflow](https://observablehq.com/@observablehq/introducing-visual-dataflow)<br>\nThere’s an ambient mini map that floats in the top-right corner of your notebooks, highlighting which cells depend on which other cells. Learn how to use it to debug the reactive connections within notebooks.\n\n* #### [Introduction to Secrets](https://observablehq.com/@observablehq/secrets)<br>\nSometimes your private notebooks need secret keys to connect to private data sources and APIs. Here’s a good place to keep them.\n\n* #### [API Keys](https://observablehq.com/@observablehq/api-keys)<br>\nUse Observable’s API keys to embed your private notebooks on internal intranets and private dashboards.\n\n* #### [The Notebook Visualizer](https://observablehq.com/@observablehq/notebook-visualizer)<br>\n(Which also comes in an [Elk Edition](https://observablehq.com/@tmcw/notebook-visualizer-elk-edition) flavor, for more orthogonal layouts...) can take any Observable notebook and draw a wiring schematic of how the cells depend on and react to one another.\n\n* #### [Keyboard Shortcuts](https://observablehq.com/@observablehq/keyboard-shortcuts)<br>\nThe big list of keyboard shortcuts that work in Observable, both at the notebook level and within the text editor.`","pinCode":true,"dname":"_1643188303583","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Workflow\n\n* #### [Fork, Share, Merge](https://observablehq.com/@observablehq/fork-share-merge)<br>\nExplains forking (making a copy of a notebook), and merging (combining two notebooks into one).\n\n* #### [Comments](https://observablehq.com/@observablehq/comments)<br>\nIntroduces Observable’s commenting feature, where you can leave friendly tips and ideas on other peoples’ notebooks.\n\n* #### [Suggestions](https://observablehq.com/@observablehq/suggestions-and-comments)<br>\nA convenient workflow for collaborating with other authors on Observable, and sending and receiving patches, advice and encouragement.\n\n* #### [Licenses](https://observablehq.com/@observablehq/licenses)<br>\nHow to add software licenses to your notebooks if you want to let everyone know that they’re free to reuse and remix your published work.\n\n* #### [History](https://observablehq.com/@observablehq/history)<br>\nTalks about how you can view your notebooks’ history by browsing old versions reactively, and can choose to revert to an earlier version (or fork from one in order to explore an alternative path).\n\n* #### [Connecting to Databases](https://observablehq.com/@observablehq/connecting-to-databases)<br>\nYou can connect private Observable notebooks directly to PostgreSQL, MySQL and BigQuery databases. Use the \\`DatabaseClient()\\` to plug live data into reactive visualizations.\n\n* #### [Self-hosted Database Proxies](https://observablehq.com/@observablehq/self-hosted-database-proxies)<br>\nIf you wish to connect a private notebook to a database on your local computer or on a private network, you can install and run a local database proxy. Your data and database credentials stay entirely on your system.\n\n* #### [How Saving Works](https://observablehq.com/@mbostock/how-saving-works)<br>\nExplains how your work is automatically saved — when editing your own notebooks, or trying out changes to someone else’s.\n\n* #### [Introduction to Embedding](https://observablehq.com/@observablehq/introduction-to-embedding?collection=@observablehq/embedding-notebooks)<br>\nHow to embed cells from your notebooks in other web pages by various methods.\n\n* #### [Advanced Embedding and Downloading](https://observablehq.com/@jashkenas/downloading-and-embedding-notebooks)<br>\nHow to download a standalone copy of your notebook or integrate with it using our open-source runtime.\n`","pinCode":true,"dname":"_1643188303584","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Libraries\n\n* #### [Inputs](https://observablehq.com/@jashkenas/inputs)<br>\nA simplified, standardized API for a bunch of reactive native input elements (sliders, buttons, menus, color pickers, text inputs, file inputs, radio buttons, checkboxes...) including labels and descriptions.\n\n* #### [Form Input](https://observablehq.com/@mbostock/form-input)<br>\nProvides a \\`form()\\` function that makes it easy to use a basic HTML \\`<form>\\` as a reactive value.\n\n* #### [File Input](https://observablehq.com/@mbostock/file-input)<br>\nAn input widget that allows files to be loaded either from disk or from a URL. Supports images, JSON, or just raw files.\n\n* #### [Tables](https://observablehq.com/@tmcw/tables)<br>\nConvenient data-driven HTML tables with good defaults: the headers are sortable, the numbers align, and you can paginate large datasets.\n\n* #### [Saving SVG](https://observablehq.com/@mbostock/saving-svg)<br>\nIf your notebook renders an SVG, this library can help you download it, or rasterize it to a PNG.\n\n* #### [Comma-Separated Tree](https://observablehq.com/@mbostock/comma-separated-tree)<br>\nAn importable, interactive textarea that lets you reactively edit a hierarchical data structure. Great for reactively sketching tree visualizations.\n\n* #### [Embedding Tweets](https://observablehq.com/@mbostock/tweet)<br>\nProvides a \\`tweet(id)\\` function to quickly embed tweets using the Twitter API.\n\n* #### [Color Picker (with alpha)](https://observablehq.com/@shaunlebron/color-picker)<br>\nNative color pickers got you down? Implements [Pickr](https://github.com/Simonwep/pickr), so that you can pick the very finest in semitransparent colors.\n\n* #### [Slide](https://observablehq.com/@mbostock/slide)<br>\nAn expressive library for creating fullscreen presentations in an Observable notebook. Handles reactive Markdown, JavaScript, code, and image slides.\n\n* #### [Synchronized Views](https://observablehq.com/@mbostock/synchronized-views)<br>\nDiscusses and defines a \\`View\\` class for implementing multiple views that all render and control the same shared value.\n\n* #### [Lorem Ipsum](https://observablehq.com/@jashkenas/lorem-ipsum)<br>\nIf your notebook needs a little more ipsum, this library provides a lorem (or hipster, bro, vegan, elvish, crypto or gagnam) ipsum generator.`","pinCode":true,"dname":"_1643188303585","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## How To & Techniques\n\n* #### [Visualization](https://observablehq.com/collection/@observablehq/visualization)<br>\nMany examples of specific visualization techniques (many of them built with D3) can be found in the Visualization collection.\n\n* #### [Maps](https://observablehq.com/collection/@observablehq/maps)<br>\nAlong similar lines, a whole trove of map projections and visualizations can be found in the Maps collection.\n\n* #### [The D3 Gallery](https://observablehq.com/@d3/gallery)<br>\nA convenient listing of hundreds of standard chart types, implemented in D3. Thumbnails galore.\n\n* #### [Animation Loops](https://observablehq.com/@mbostock/animation-loops)<br>\nA philosophical discussion of some of the pros and cons of the different ways to define animation loops in Observable.\n\n* #### [Parameterized Notebooks](https://observablehq.com/@mbostock/parameterized-notebooks)<br>\nYour notebooks can parse URL parameters, in order to render and provide personalized notebooks — with specific inputs pre-filled, or saved for later. For example, here’s [a link to the Package Dependencies notebook with the Observable runtime prefilled as a URL parameter](https://beta.observablehq.com/@mbostock/package-dependencies?name=@observablehq/notebook-runtime).\n\n* #### [URL querystrings and hash parameters](https://observablehq.com/@jashkenas/url-querystrings-and-hash-parameters)<br>\nNotebooks can read and react to \\`location.search\\` and \\`location.hash\\` directly, in order to link to particular configurations of a notebook, or allow readers to share URLs with small amounts of associated data.\n\n* #### [Responsive Notebook Design](https://observablehq.com/@tmcw/responsive-notebook-design-protips)<br>\nA set of tips to help create notebooks that re-render responsively (and reactively!) to the width of the page. This is one of those things that may very well be easier in Observable than anywhere else, as you can just use the reactive \\`width\\` variable.\n\n* #### [Module Require Debugger](https://observablehq.com/@tmcw/module-require-debugger)<br>\nA helpful tool that, given the name of an npm module, will attempt to deduce how to require it correctly in Observable.\n\n* #### [How To: Require Stubborn Modules](https://observablehq.com/@tmcw/requiring-modules-troubleshooting)\nA more in-depth discussion of requiring JavaScript modules in Observable, and how to successfully load modules that may appear hopeless at first attempt.\n\n* #### [Reading Local Files](https://observablehq.com/@mbostock/reading-local-files)<br>\nDemonstrates a few techniques and helper functions from the standard library for reading local files into a notebook.\n\n* #### [Fullscreen Canvas](https://observablehq.com/@mbostock/fullscreen-canvas)<br>\nHow to add a button to your notebook that causes a \\`<canvas>\\` element to go fullscreen.\n\n* #### [Disposing Resources](https://observablehq.com/@mbostock/disposing-content)<br>\nAn exploration of the \\`invalidation\\` promise, which conveniently allows you to clean up allocated resources right before a cell is re-evaluated.\n\n* #### [Awaiting Visibility](https://observablehq.com/@mbostock/intersection-observer)<br>\nHow to tell a cell to wait until it becomes visible on the page before executing.\n\n* #### [Cross-Origin Images](https://observablehq.com/@mbostock/cross-origin-images)<br>\nHow to load and render images from outside of Observable into a notebook, while respecting the rules of the sandbox.\n\n* #### [How to: Embed a Notebook in a React App](https://observablehq.com/@jashkenas/how-to-embed-a-notebook-in-a-react-app)<br>\nObservable and React are both reactive systems. They can be made to play nicely together, allowing you to embed and control cells from an Observable notebook within a React application.\n\n* #### [How To: Use Libraries That Need CSS](https://observablehq.com/@tmcw/how-to-use-libraries-that-need-css)<br>\nHow to load external CSS stylesheets into your notebook.\n\n* #### [Multi-Value Inputs](https://observablehq.com/@mbostock/multi-value-inputs)<br>\nA discussion of a few of the different ways you can combine multiple inputs into a single reactive value.\n\n* #### [Debouncing Input](https://observablehq.com/@mbostock/debouncing-input)<br>\n“Debouncing” is a fancy word for waiting for a signal to stop changing before capturing its value. This notebook demonstrates a debounced input.\n\n* #### [Inline Inputs](https://observablehq.com/@mbostock/inline-inputs)<br>\nHow to put reactive inputs inline, inside your Markdown or HTML cells.\n\n* #### [Nonlinear Slider](https://observablehq.com/@mbostock/nonlinear-slider)<br>\nHow to create native input sliders that provide nonlinear values (think root, exponential, logarithmic). \n\n* #### [Linked Inputs](https://observablehq.com/@mbostock/linked-inputs)<br>\nShows a hybrid range/number input, that you can drag or type into to change the value.\n\n* #### [Variable Speed Generator](https://observablehq.com/@mbostock/variable-speed-generator-test)<br>\nDemonstrates how to create a dynamic variable whose value is only *indirectly* determined by the user interface.\n\n* #### [Pause a Generator](https://observablehq.com/@mbostock/pause-a-generator)<br>\nA nifty trick to implement pausable generators, resuming where they left off.\n\n* #### [Generator Cells, Functions and Objects](https://observablehq.com/@mbostock/generator-cells-functions-and-objects)<br>\nIn short: a *generator* defines a sequence of values, a *generator function* returns a new generator, and a *generator cell* defines a value that changes over time.\n\n* #### [Custom Generators](https://observablehq.com/@mbostock/custom-generators)<br>\nHow to impelement your own Generator-ish objects, which Observable will treat as generators by default, and call at 60 frames per second.\n\n* #### [Showing Progress](https://observablehq.com/@mbostock/showing-progress)<br>\nUsing generators to yield intermediate values (or another indication of progress made) while waiting for an expensive computation to complete.\n\n* #### [Mutating Views](https://observablehq.com/@mbostock/mutating-views)<br>\nHow to control one view from another (and avoid circularity while doing so).\n\n* #### [Sticky Views](https://observablehq.com/@mbostock/sticky-views)<br>\nA practical example of how to use \\`this\\` to preserve the previous value of a cell across re-evaluations.\n\n* #### [Broadcast Channel](https://observablehq.com/@mbostock/broadcast-channel)<br>\nDemonstrates a nifty browser feature that allows you to synchronize state across the same notebook open in multiple tabs or windows. Useful for editing/tweaking complex notebooks with inputs while keeping an eye on changes to the output.\n\n* #### [D3 Without Joins](https://observablehq.com/@mbostock/d3-without-joins)<br>\nThe holy grail! This example uses SVG literals and Observable’s reactivity to render a basic D3 bar chart without any data joins.\n\n* #### [Hello, HTM](https://observablehq.com/@mbostock/hello-htm)<br>\nDemonstrates [HTM](https://github.com/developit/htm) (Hyperscript Tagged Markup, a JSX alternative) in Observable notebooks.\n\n* #### [Canvas to GIF](https://observablehq.com/@mbostock/canvas-to-gif)<br>\nShows how you can use [gif.js](https://jnordberg.github.io/gif.js/) to render an animated \\`<canvas>\\` element into a downloadable GIF file.`","pinCode":true,"dname":"_1643188303587","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Grab Bag (Tips, Tricks and Philosophical Musings)\n\n* #### [Why Observable?](https://observablehq.com/@mbostock/why-observable)<br>\nA micro manifesto.\n\n* #### [Observable Anti-Patterns and Code Smells](https://observablehq.com/@tmcw/observable-anti-patterns-and-code-smells)<br>\nIn Observable, it’s prudent to take extra care with timers, mutation across cells, and selecting elements from the DOM.\n\n* #### [Cells are Functions](https://observablehq.com/@mbostock/cells-are-functions)<br>\nObservable cells are like JavaScript function bodies, but — critically — the runtime schedules when they’re called and determines how to render their values into the page. Discuss.\n\n* #### [Views are Mutable Values](https://observablehq.com/@mbostock/views-are-mutable-values)<br>\nObservable [views](https://beta.observablehq.com/@mbostock/introduction-to-views) are inherently mutable — you can simulate user input and set their values from other cells.\n\n* #### [Interacting with Promises as Values](https://observablehq.com/@tmcw/interacting-with-promises-as-values)<br>\nHow to smuggle your Promises through the Observable runtime so that it doesn't automatically wait for them for you (in cases where you want to schedule them yourself).`","pinCode":true,"dname":"_1643188303588","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---`","pinCode":true,"dname":"_1643188303589","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`<small>*Thanks for the illustration, [ClipArt ETC](https://etc.usf.edu/clipart/3900/3969/girl-reading_1.htm)!*</small>`","pinCode":true,"dname":"_1643188303590","vimEnabled":false,"insertMode":false}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Grove: The User Manual\n\n👋 Welcome to Grove — the home of magic notebooks for the web! There’s a lot to learn, and a lot to explore. This notebook organizes our reference material into a table of contents, to serve as a jumping-off point for learning whatever you need to know next.\n\n<small>*If you notice a useful resource that’s missing from this page, please send it as a suggestion.*</small>`","pinCode":false,"dname":"dd3f799b-962a-420d-8217-77989b45da88","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Start Here\n* #### ${Link(\"five-minute-introduction/five-minute-introduction\",\"Five Minute Introduction\")}<br>\nAn introduction that demonstrates what makes Grove a unique environment for creative code.\n\n* #### ${Link(\"tutorial/tutorial\",\"Tutorial\")}<br>\nA hands-on introduction to the Grove user interface and the basics of editing code.\n\n* #### ${Link(\"groves-not-javascript/groves-not-javascript\",\"Grove’s not JavaScript\")}<br>\nExplains the differences between the regular JavaScript you may already be accustomed to, and reactive JavaScript in Grove.\n\n* #### ${Link(\"introduction-to-html/introduction-to-html\",\"Introduction to HTML\")}<br>\nShows how to render HTML — and Markdown, and SVG, and Canvas — and how to combine them.\n\n* #### ${Link(\"introduction-to-imports/introduction-to-imports\",\"Introduction to Imports\")}<br>\nHow to reuse any part of any notebook in any other notebook.\n\n* #### ${Link(\"stdlib/stdlib\",\"The Standard Library\")}<br>\nFiles, Generators, Promises, require, DOM, and more! Grove comes with a small, but well considered, standard library.\n\n* #### ${Link(\"how-grove-runs/how-grove-runs\",\"How Grove Runs\")}<br>\nUses flow diagrams to explain Grove’s dataflow runtime and programming model.\n\n* #### ${Link(\"manual/user-manual\",\"Chinese User Manual\")}<br>\nChinese User Manual.\n\n`","pinCode":false,"dname":"16c25ef2-42d2-46d6-9438-bbb2b0517623","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## React App\n* #### ${Link(\"react/react\",\"Create React App in Grove\")}<br>\nCreate React App in Grove.\n* #### ${Link(\"1_react/components\",\"Ant Design Components\")}<br>\nComponents in ant design, which we can using it in grove page design.\n* #### ${Link(\"keyboard-shortcuts/shortcutKey\",\"Shortcut Key for Grove\")}<br>\nShow grove shortcut in grov\n* #### ${Link(\"1_react/office/office\", \"Office Testing App\")}<br>\nA Testing App for Office. A good try to use react in grove.\n* #### ${Link(\"1_react/learn\", \"Edit Graphxr Node's Properties\")}<br>\nEdit graphxr node.\n* #### ${Link(\"1_react/learn2\", \"Graphxr API Testing\")}<br>\nTest graphxr api app.\n* #### ${Link(\"1_react/learn3\", \"Graphxr Transform\")}<br>\nGraphxr tranform app.\n* #### ${Link(\"1_react/mainChart\", \"Main Chart\")}<br>\nMain Chart app.\n`","pinCode":false,"dname":"7f4add84-9d3a-471f-b7fb-ecca5d089f81","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Notebook Concepts\n\n* #### ${Link(\"introduction-to-data/introduction-to-data\",\"Introduction to Data\")}<br>\nAn overview of various methods for getting your data into Grove in the first place.\n\n* #### ${Link(\"file-attachments/file-attachments\",\"File Attachments\")}<br>\nPainlessly upload and use files directly in Grove notebooks. Versioned, streamable, suggest-able, replace-able, they’re pretty convenient.\n\n* #### ${Link(\"require/require\",\"Introduction to require\")}<br>\nHow to require JavaScript libraries from [npm](https://www.npmjs.com/), or anywhere on the web.\n\n* #### ${Link(\"introduction-to-views/introduction-to-views\",\"Introduction to Views\")}<br>\nViews allow you to directly control values in your notebook with interactive UI widgets (or interactive charts, or visualizations, or any interface you can imagine).\n\n* #### ${Link(\"introduction-to-promises/introduction-to-promises\",\"Introduction to Promises\")}<br>\nGrove notebooks wait for promises by default. This notebook explains what they are, and how to use them to manage asynchrony.\n\n* #### ${Link(\"introduction-to-generators/introduction-to-generators\",\"Introduction to Generators\")}<br>\nAnimations, simulations, transformations — generators represent values that change over time.\n\n* #### ${Link(\"introduction-to-asynchronous-iteration/introduction-to-asynchronous-iterations\",\"Introduction to Asynchronous Iteration\")}<br>\nAsynchronous iterators are a new JavaScript feature that are very useful in Grove notebooks, allowing you to easily create cells that produce new values when their data is ready.\n\n* #### ${Link(\"introduction-to-mutable-state/introduction-to-mutable-state\",\"Introduction to Mutable State\")}<br>\nNormally, your notebooks evaluate cleanly, in their logical dataflow order, from input to output. But some complex notebooks require more complicated tangles of effects. Grove supports mutable state, which gives you fine-grained control over the order of evaluation of your program.\n\n* #### ${Link(\"introducing-visual-dataflow/introducing-visual-dataflow\",\"Introduction to Visual Dataflow\")}<br>\nThere’s an ambient mini map that floats in the top-right corner of your notebooks, highlighting which cells depend on which other cells. Learn how to use it to debug the reactive connections within notebooks.\n\n* #### ${Link(\"secrets/secrets\",\"Introduction to Secrets\")}<br>\nSometimes your private notebooks need secret keys to connect to private data sources and APIs. Here’s a good place to keep them.\n\n* #### ${Link(\"keyboard-shortcuts/shortcutKey\",\"Keyboard Shortcuts\")}<br>\nThe big list of keyboard shortcuts that work in Grove, both at the notebook level and within the text editor.`","pinCode":false,"dname":"f4ae2011-7d78-4f5c-baf1-238ae489ba7c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Workflow\n\n* #### ${Link(\"fork-duplicate/fork-duplicate\",\"Fork, Duplicate\")}<br>\nExplains forking (making a copy of a notebook), and merging (combining two notebooks into one).\n\n* #### ${Link(\"databases/databases\",\"Connecting to Databases\")}<br>\nYou can connect private Grove notebooks directly to PostgreSQL, MySQL and BigQuery databases. Use the \\`DatabaseClient()\\` to plug live data into reactive visualizations.\n\n* #### ${Link(\"self-hosted-database-proxies/self-hosted-database-proxies\",\"Self-hosted Database Proxies\")}<br>\nIf you wish to connect a private notebook to a database on your local computer or on a private network, you can install and run a local database proxy. Your data and database credentials stay entirely on your system.\n\n* #### ${Link(\"how-saving-works/how-saving-works\",\"How Saving Works\")}<br>\nExplains how your work is automatically saved — when editing your own notebooks, or trying out changes to someone else’s.\n`","pinCode":false,"dname":"b63cfa1d-dfe0-4c5c-86d6-98b3b3e76dc9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Libraries\n\n* #### ${Link(\"inputs/inputs\",\"Inputs\")}<br>\nA simplified, standardized API for a bunch of reactive native input elements (sliders, buttons, menus, color pickers, text inputs, file inputs, radio buttons, checkboxes...) including labels and descriptions.\n\n* #### ${Link(\"form-input/form-input\",\"Form Input\")}<br>\nProvides a \\`form()\\` function that makes it easy to use a basic HTML \\`<form>\\` as a reactive value.\n\n* #### ${Link(\"file-input/file-input\",\"File Input\")}<br>\nAn input widget that allows files to be loaded either from disk or from a URL. Supports images, JSON, or just raw files.\n\n* #### ${Link(\"tables/tables\",\"Tables\")}<br>\nConvenient data-driven HTML tables with good defaults: the headers are sortable, the numbers align, and you can paginate large datasets.\n\n* #### ${Link(\"saving-svg/saving-svg\",\"Saving SVG\")}<br>\nIf your notebook renders an SVG, this library can help you download it, or rasterize it to a PNG.\n\n* #### ${Link(\"comma-separated-tree/comma-separated-tree\",\"Comma-Separated Tree\")}<br>\nAn importable, interactive textarea that lets you reactively edit a hierarchical data structure. Great for reactively sketching tree visualizations.\n\n* #### ${Link(\"tweet/tweet\",\"Embedding Tweets\")}<br>\nProvides a \\`tweet(id)\\` function to quickly embed tweets using the Twitter API.\n\n* #### ${Link(\"color-picker/color-picker\",\"Color Picker (with alpha)\")}<br>\nNative color pickers got you down? Implements [Pickr](https://github.com/Simonwep/pickr), so that you can pick the very finest in semitransparent colors.\n\n* #### ${Link(\"slide/slide\",\"Slide\")}<br>\nAn expressive library for creating fullscreen presentations in an Grove notebook. Handles reactive Markdown, JavaScript, code, and image slides.\n\n* #### ${Link(\"synchronized-views/synchronized-views\",\"Synchronized Views\")}<br>\nDiscusses and defines a \\`View\\` class for implementing multiple views that all render and control the same shared value.\n\n* #### ${Link(\"lorem-ipsum/lorem-ipsum\",\"Lorem Ipsum\")}<br>\nIf your notebook needs a little more ipsum, this library provides a lorem (or hipster, bro, vegan, elvish, crypto or gagnam) ipsum generator.`","pinCode":false,"dname":"cc258603-e052-419c-92cc-8ca8fd565cfd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## How To & Techniques\n\n* #### ${Link(\"gallery/gallery\",\"The D3 Gallery\")}<br>\nA convenient listing of hundreds of standard chart types, implemented in D3. Thumbnails galore.\n\n* #### ${Link(\"animation-loops/animation-loops\",\"Animation Loops\")}<br>\nA philosophical discussion of some of the pros and cons of the different ways to define animation loops in Grove.\n\n* #### ${Link(\"parameterized-notebooks/parameterized-notebooks\",\"Parameterized Notebooks\")}<br>\nYour notebooks can parse URL parameters, in order to render and provide personalized notebooks — with specific inputs pre-filled, or saved for later. For example, here’s [a link to the Package Dependencies notebook with the Grove runtime prefilled as a URL parameter](https://beta.observablehq.com/@mbostock/package-dependencies?name=@observablehq/notebook-runtime).\n\n* #### ${Link(\"url-querystrings-and-hash-parameters/url-querystrings-and-hash-parameters\",\"URL querystrings and hash parameters\")}<br>\nNotebooks can read and react to \\`location.search\\` and \\`location.hash\\` directly, in order to link to particular configurations of a notebook, or allow readers to share URLs with small amounts of associated data.\n\n* #### ${Link(\"responsive-notebook-design-protips/responsive-notebook-design-protips\",\"Responsive Notebook Design\")}<br>\nA set of tips to help create notebooks that re-render responsively (and reactively!) to the width of the page. This is one of those things that may very well be easier in Grove than anywhere else, as you can just use the reactive \\`width\\` variable.\n\n* #### ${Link(\"module-require-debugger/module-require-debugger\",\"Module Require Debugger\")}<br>\nA helpful tool that, given the name of an npm module, will attempt to deduce how to require it correctly in Grove.\n\n* #### ${Link(\"how-to-require-stubborn-modules/how-to-require-stubborn-modules\",\"How To: Require Stubborn Modules\")}<br>\nA more in-depth discussion of requiring JavaScript modules in Grove, and how to successfully load modules that may appear hopeless at first attempt.\n\n* #### ${Link(\"reading-local-files/reading-local-files\",\"Reading Local Files\")}<br>\nDemonstrates a few techniques and helper functions from the standard library for reading local files into a notebook.\n\n* #### ${Link(\"fullscreen-canvas/fullscreen-canvas\",\"Fullscreen Canvas\")}<br>\nHow to add a button to your notebook that causes a \\`<canvas>\\` element to go fullscreen.\n\n* #### ${Link(\"invalidation/invalidation\",\"Disposing Resources\")}<br>\nAn exploration of the \\`invalidation\\` promise, which conveniently allows you to clean up allocated resources right before a cell is re-evaluated.\n\n* #### ${Link(\"visibility/visibility\",\"Awaiting Visibility\")}<br>\nHow to tell a cell to wait until it becomes visible on the page before executing.\n\n* #### ${Link(\"cross-origin-images/cross-origin-images\",\"Cross-Origin Images\")}<br>\nHow to load and render images from outside of Grove into a notebook, while respecting the rules of the sandbox.\n\n* #### ${Link(\"how-to-use-libraries-that-need-css/how-to-use-libraries-that-need-css\",\"How To: Use Libraries That Need CSS\")}<br>\nHow to load external CSS stylesheets into your notebook.\n\n* #### ${Link(\"multi-value-inputs/multi-value-inputs\",\"Multi-Value Inputs\")}<br>\nA discussion of a few of the different ways you can combine multiple inputs into a single reactive value.\n\n* #### ${Link(\"debouncing-input/debouncing-input\",\"Debouncing Input\")}<br>\n“Debouncing” is a fancy word for waiting for a signal to stop changing before capturing its value. This notebook demonstrates a debounced input.\n\n* #### ${Link(\"inline-inputs/inline-inputs\",\"Inline Inputs\")}<br>\nHow to put reactive inputs inline, inside your Markdown or HTML cells.\n\n* #### ${Link(\"nonlinear-slider/nonlinear-slider\",\"Nonlinear Slider\")}<br>\nHow to create native input sliders that provide nonlinear values (think root, exponential, logarithmic). \n\n* #### ${Link(\"linked-inputs/linked-inputs\",\"Linked Inputs\")}<br>\nShows a hybrid range/number input, that you can drag or type into to change the value.\n\n* #### ${Link(\"variable-speed-generator-test/variable-speed-generator-test\",\"Variable Speed Generator\")}<br>\nDemonstrates how to create a dynamic variable whose value is only *indirectly* determined by the user interface.\n\n* #### ${Link(\"pause-a-generator/pause-a-generator\",\"Pause a Generator\")}<br>\nA nifty trick to implement pausable generators, resuming where they left off.\n\n* #### ${Link(\"generator-cells-functions-and-objects/generator-cells-functions-and-objects\",\"Generator Cells, Functions and Objects\")}<br>\nIn short: a *generator* defines a sequence of values, a *generator function* returns a new generator, and a *generator cell* defines a value that changes over time.\n\n* #### ${Link(\"custom-generators/custom-generators\",\"Custom Generators\")}<br>\nHow to impelement your own Generator-ish objects, which Grove will treat as generators by default, and call at 60 frames per second.\n\n* #### ${Link(\"showing-progress/showing-progress\",\"Showing Progress\")}<br>\nUsing generators to yield intermediate values (or another indication of progress made) while waiting for an expensive computation to complete.\n\n* #### ${Link(\"mutating-views/mutating-views\",\"Mutating Views\")}<br>\nHow to control one view from another (and avoid circularity while doing so).\n\n* #### ${Link(\"sticky-views/sticky-views\",\"Sticky Views\")}<br>\nA practical example of how to use \\`this\\` to preserve the previous value of a cell across re-evaluations.\n\n* #### ${Link(\"broadcast-channel/broadcast-channel\",\"Broadcast Channel\")}<br>\nDemonstrates a nifty browser feature that allows you to synchronize state across the same notebook open in multiple tabs or windows. Useful for editing/tweaking complex notebooks with inputs while keeping an eye on changes to the output.\n\n* #### ${Link(\"d3-without-joins/d3-without-joins\",\"D3 Without Joins\")}<br>\nThe holy grail! This example uses SVG literals and Grove’s reactivity to render a basic D3 bar chart without any data joins.\n\n* #### ${Link(\"hello-htm/hello-htm\",\"Hello, HTM\")}<br>\nDemonstrates [HTM](https://github.com/developit/htm) (Hyperscript Tagged Markup, a JSX alternative) in Grove notebooks.\n\n* #### ${Link(\"canvas-to-gif/canvas-to-gif\",\"Canvas to GIF\")}<br>\nShows how you can use [gif.js](https://jnordberg.github.io/gif.js/) to render an animated \\`<canvas>\\` element into a downloadable GIF file.`","pinCode":false,"dname":"42d1e484-2187-47d7-8c6f-d115d7cc2020","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Grab Bag (Tips, Tricks and Philosophical Musings)\n\n* #### ${Link(\"cells-are-functions/cells-are-functions\",\"Cells are Functions\")}<br>\nGrove cells are like JavaScript function bodies, but — critically — the runtime schedules when they’re called and determines how to render their values into the page. Discuss.\n\n* #### ${Link(\"views-are-mutable-values/views-are-mutable-values\",\"Views are Mutable Values\")}<br>\nGrove ${Link(\"introduction-to-views/introduction-to-views\",\"views\")} are inherently mutable — you can simulate user input and set their values from other cells.\n\n* #### ${Link(\"interacting-with-promises-as-values/interacting-with-promises-as-values\",\"Interacting with Promises as Values\")}<br>\nHow to smuggle your Promises through the Grove runtime so that it doesn't automatically wait for them for you (in cases where you want to schedule them yourself).`","pinCode":false,"dname":"319ab565-1681-4f97-b104-5512407dbea8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---`","pinCode":false,"dname":"4cc04466-18bd-4e95-a1e1-a41897b612e1","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`<small>*Thanks for the illustration, [ClipArt ETC](https://etc.usf.edu/clipart/3900/3969/girl-reading_1.htm)!*</small>`","pinCode":false,"dname":"31b0df60-3eb9-4cbc-95f3-61fb316d6b04","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"list","data":{"style":"unordered","items":[{"content":"<i>Observablehq. Marshall (2020, Aug 8). Observable: The User Manual. Observable.&nbsp;https://observablehq.com/</i>","items":[]}]}}],"version":"2.19.1"}
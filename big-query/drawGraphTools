{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Draw Graph`","pinCode":false,"dname":"eaf6483d-b250-4c04-a794-d4ac6b7d05a7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    const { Space, Button, Input } = Antd;\n    const readFile = (event) => {\n      const inputElement = event.target;\n      const file = inputElement.files[0];\n      if(file){\n        setInputFile(file);\n        readInputFile(file);\n      }\n    }\n    return <Space key='c9a7d04a-0e0e-454c-94b6-fa9a0f8d9881'> \n      <label htmlFor=\"myfile\">BigQuery Auth File:</label> <Input type=\"file\" id=\"myfile\" name=\"myfile\" accept=\".json\" onChange={readFile}  /> \n    </Space>;\n})","pinCode":false,"dname":"07787ae1-d5c3-48cc-9ac5-d18ae830bf04","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    const { Space, Button, Input } = Antd;\n    const readFile = (event) => {\n       const inputElement = event.target;\n       const inputFile = inputElement.files[0];\n       const reader = new FileReader();\n       reader.onload =  onLoadMappingFunc\n       reader.readAsText(inputFile);\n    }\n    return <Space key='4488e44f-8bd7-41a4-afa2-5d2f1a4e96cf'> \n      <label htmlFor=\"myfile\">Mapping File:</label> \n      <Input type=\"file\" accept=\".json\" onChange={readFile}  /> \n    </Space>;\n})","pinCode":false,"dname":"235dc5b5-bcc7-4e30-baff-82470e19e760","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  const { Select, Space, Form, Table, Button, Input, message, Affix } = Antd;\n  const [source, setSource] = useState({});\n  const [sourceLinkField, setSourceLinkField ] = useState(\"\");//source link field\n  const [target,setTarget] = useState({});\n  const [targetLinkField, setTargetLinkField ] = useState(\"\");//target link field\n  const [newRelationship, setNewRelationship] = useState(\"new-link-rl\");\n  const [linkKey, setLinkKey] = useState(\"\");\n  const [top, setTop] = useState(80);\n  const [bottom, setBottom] = useState(60);\n  const linkKeyChangeFunc = (linkKeyT) => {\n    if(linkKeyT && mapping.links[linkKeyT]){\n      let link = mapping.links[linkKeyT];\n      let sourceTableMapping = getTableMapping(link.sourceCategory.split(\".\")[0], link.sourceCategory.split(\".\")[1]);\n      setSource(sourceTableMapping||{});\n      setSourceLinkField(link.sourceProperty||\"\")\n      let targetTableMapping = getTableMapping(link.targetCategory.split(\".\")[0], link.targetCategory.split(\".\")[1]);\n      setTarget(targetTableMapping||{});\n      setTargetLinkField(link.targetProperty||\"\")\n      setNewRelationship(link.relationship||\"new-link-rl\");\n    }else{\n      setSource({});\n      setSourceLinkField(\"\");\n      setTarget({});\n      setTargetLinkField(\"\")\n      setNewRelationship(\"new-link-rl\");\n    }\n    setLinkKey(linkKeyT);\n  };\n  useSetter({});\n  return <div key='ec0fddf0-fd4a-4e83-aa2e-fd4819a04eb8' className=\"draw-graph\" >\n    <div>\n      <Form.Item label=\"Select Edit Link\">\n        <Space>\n          <Select \n            value={linkKey}\n            style={selectStyle}\n            onChange={linkKeyChangeFunc}\n            options={[{ value: \"\", label: \"\" }].concat(_.map(mapping.links,(l,k)=>{ return {label: k, value: k }}))}\n            />\n          <Button onClick={()=>{\n              if(linkKey && mapping.links[linkKey]){\n                let link = _.cloneDeep( mapping.links[linkKey]);\n                link.relationship = `${link.relationship}_copy`\n                setMapping({link:link});\n                linkKeyChangeFunc(link.relationship);\n              }\n            }}>Copy</Button>\n          <Button danger onClick={()=>{\n              if(confirm(`Delete Link ${linkKey}?`)){\n                removeLinkMapping(linkKey);\n                linkKeyChangeFunc(\"\");\n              }\n            }}>Delete</Button>\n        </Space>\n      </Form.Item>\n    </div>\n    <Space direction=\"vertical\">\n      <CategoryComp key={`${linkKey}`} tag=\"Source\" source={source} setSource={setSource} linkField={sourceLinkField} setLinkField={setSourceLinkField} />\n      <CategoryComp key={`${linkKey}`} tag=\"Target\" source={target} setSource={setTarget} linkField={targetLinkField} setLinkField={setTargetLinkField}/>\n      <Affix offsetTop={top} offsetBottom={bottom}>\n        <div>\n          <Space direction=\"horizonal\" className=\"d-flex align-items-center\" wrap >\n            <Input style={{ width: 200 }} placeholder=\"Link Name\" value={newRelationship} onChange={(e)=>{\n                setNewRelationship(e.target.value.trim());\n              }} />\n            <Button disabled={!(source.datasetId && source.table && sourceLinkField && target.datasetId && target.table && targetLinkField && newRelationship)} onClick={()=>{\n                api.link({\n                  sourceCategory: `${source.datasetId}.${source.table}`,\n                  sourceProperty: sourceLinkField,\n                  targetCategory: `${target.datasetId}.${target.table}`,\n                  targetProperty: targetLinkField,\n                  relationship: newRelationship,\n                })\n              }}>Link</Button>\n            <Button type=\"primary\" onClick={()=>{\n                let link = source.datasetId && source.table && sourceLinkField && target.datasetId && target.table && targetLinkField && newRelationship ?\n                            {\n                              sourceCategory: `${source.datasetId}.${source.table}`,\n                              sourceProperty: sourceLinkField,\n                              targetCategory: `${target.datasetId}.${target.table}`,\n                              targetProperty: targetLinkField,\n                              relationship: newRelationship,\n                            }: undefined;\n                if(link && mapping.links[link.relationship] && !confirm(`Replace exists link:${link.relationship}`)){\n                    return;\n                }\n                setMapping({ source: source, target: target, link: link, replaceLinkKey: linkKey})\n              }}>Save</Button>\n            <Button onClick={()=>{\n                saveMapping(mapping)\n              }}>Download Mapping</Button>\n            <span title=\"Jump to the cell\" className=\"icon fas fa-crosshairs clicker\" onClick={(e)=>{\n                e.currentTarget.closest(\".code-edit-result\").scrollIntoView({ behavior: \"auto\", block: \"center\", inline: \"nearest\" })\n              }}></span>\n          </Space>\n        </div>\n      </Affix>\n    </Space>\n  </div>;\n})","pinCode":false,"dname":"30401318-1679-435a-9311-d05d79a109df","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof select = render(({ useSetter }) => {\n  const { Select, Form, Space, Button, message } = Antd;\n  const [category, setCategory] = useState(categories[0])\n  const [categoryOfNodes, setCategoryOfNodes] = useState('');\n  const [layout, setLayout] = useState('')\n  const [linksLayout, setLinksLayout] = useState('')\n  const [linkKeys, setLinkKeys] = useState([]);\n  useSetter({category});\n  return <div className=\"draw-graph\">\n    <Space wrap>\n      <Form.Item label=\"Select Category:\">\n        <Select\n          allowClear\n          value={category}\n          style={selectStyle}\n          onChange={(value) => {\n            setCategory(value);\n          }}\n          options={[{ value: \"\", label: \"\" }].concat(_.map(categories,(l)=>{\n            return {label:l,\n                    value:l\n                   }}))} />\n      </Form.Item>\n      <Button disabled={!(category && category.split(\".\").length === 2 && mapping.categories[category.split(\".\")[0]] && mapping.categories[category.split(\".\")[0]][category.split(\".\")[1]]) } onClick={async (d) => {\n          let datasetId = category.split(\".\")[0];\n          let table = category.split(\".\")[1];\n          const { props, targetCategory, relationship } = mapping.categories[datasetId] && mapping.categories[datasetId][table]?.extract||{};\n          if(!_.isEmpty(props) && targetCategory && relationship)  {\n            api.extract({\n              sourceCategory: category,\n              props: props,\n              targetCategory: targetCategory,\n              relationship: relationship,\n              inheritLinks: false,\n              skipEmpty: true,\n            })\n          }\n        }}  >Extract</Button>\n      <Button disabled={!category} onClick={(d) => {\n            category && gxr.nodes({category: category}).select();\n        }}  >{category? `Select All '${category}' Nodes`:\"Not Select Category\"}</Button>\n      <Form.Item label=\"Set Layout:\">\n        <Select\n          allowClear\n          value={layout}\n          style={selectStyle}\n          onChange={(value) => {\n            setLayout(value);\n            value && gxr[value]({ nodes: gxr.nodes(\"[[selected]]\").array });\n          }}\n          options={[{ value: \"\", label: \"\" }].concat(layoutOptions)}\n          />\n      </Form.Item>\n      <Form.Item label=\"Select Nodes:\">\n        <Select\n          allowClear\n          value={categoryOfNodes}\n          style={selectStyle}\n          onChange={(category)=>{\n            setCategoryOfNodes(category);\n            setLinkKeys([]);\n          }}\n          options={[{ value: \"\", label: \"\" }].concat(_.reduce(_.reduce(selectedNodes.array,(p,node,i)=>{\n            p[node.data.detail.type] = undefined === p[node.data.detail.type] ? 1 : 1 + p[node.data.detail.type]\n          \treturn p;\n          },{}),(p,v,k)=>{\n            p.push({value:k, label:`${k}(${v} nodes)`})\n          \treturn p;\n          },[]))}\n          />\n      </Form.Item>\n      <Form.Item label=\"Select Links:\">\n        <Select\n          mode=\"multiple\"\n          allowClear\n          style={selectStyle}\n          placeholder=\"Please select links\"\n          value={linkKeys}\n          onChange={(values)=>{\n\t\t\tsetLinkKeys(values);\n          }}\n          options={_.reduce(mapping.links,(p, link, key)=>{\n            if(link.sourceCategory === categoryOfNodes || link.targetCategory === categoryOfNodes){\n              p.push({label:key,value:key});\n            }\n            return p;\n          },[])}\n          />\n      </Form.Item>\n      <Button onClick={async (d) => {\n          for(let index=0;index<linkKeys.length;index++){\n            let link = mapping.links[linkKeys[index]];\n            if(!link){\n              continue;\n            }\n            const {sourceCategory, sourceProperty, targetCategory, targetProperty, relationship} = link;\n            const func = async (where, nodeId, datasetId, table) => {\n              try{\n                let limitCall = await bqClient.bigquery.jobs.query({\n                  projectId: [projectID],\n                  resource: {\n                    // See https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#QueryRequest\n                    query: `select * from ${projectID}.${datasetId}.${table} ${where?`where ${where}`:\"\"}`,\n                    useLegacySql: false,\n                    maxResults: limit\n                  }\n                })\n                if(!limitCall.result.jobComplete){\n                  message.error(limitCall.result.error || limitCall.result.errors)\n                  return;\n                }\n                let fieldsT = limitCall.result.schema?.fields?.map(d => d.name);\n                let datas = limitCall.result.rows? (await limitCall.result.rows.map(d => d.f.map(d=>d.v)).map(d=>convertArrayToObject(fieldsT, d, 'v'))):[];\n                let columnsData = getFixedColumnsData(datas);\n                drawGraph.importDatas(_.map(columnsData.data, (o)=>{\n                  let d = _.clone(o);\n                  if(nodeId.trim()){\n                    d.nodeId = _.reduce(_.keys(d), (p, FIELD) => {\n                      p = p.replaceAll(`{${FIELD}}`, d[FIELD])\n                      return p\n                    }, nodeId.trim())\n                  }\n                  return d;\n                }), `${datasetId}.${table}`)\n              }catch(e){\n                console.error(e);\n                if(e.status === 401 && e.result?.error?.status === 'UNAUTHENTICATED'){\n                  readInputFile(inputFile);\n                }\n                message.error(e.result?.error?.status||e.error||\"query error, exit loop!\");\n                return;\n              }\n              api.link({\n                sourceCategory: sourceCategory,\n                sourceProperty: sourceProperty,\n                targetCategory: targetCategory,\n                targetProperty: targetProperty,\n                relationship: relationship,\n              })\n            }\n            if(sourceCategory === categoryOfNodes){\n              const datasetId = targetCategory.split(\".\")[0];\n              const table = targetCategory.split(\".\")[1];\n              const tableMapping = getTableMapping(datasetId, table);\n              if(!tableMapping){\n                continue;\n              }\n              const {nodeId, condition} = tableMapping;\n              let sourceValues = _.reduce(selectedNodes.array,(p, n)=>{ if(n.data.detail.type === sourceCategory) {p.push(n.data.detail.data[sourceProperty]); }return p;}, []);\n              if(!sourceValues.length){\n                return;\n              }\n              let where = condition ||\"\";\n              where = `${where==\"\"? \"\": ` (${where}) and `} ${targetProperty} in (${sourceValues})`;\n              await func(where, nodeId, datasetId, table);\n              linksLayout && gxr[linksLayout]({ nodes: gxr.nodes({category: targetCategory}).array });\n            } else if(targetCategory === categoryOfNodes){\n              const datasetId = sourceCategory.split(\".\")[0];\n              const table = sourceCategory.split(\".\")[1];\n              const tableMapping = getTableMapping(datasetId, table);\n              if(!tableMapping){\n                continue;\n              }\n              const {nodeId, condition} = tableMapping;\n              let targetValues = _.reduce(selectedNodes.array,(p, n)=>{ if(n.data.detail.type === targetCategory) {p.push(n.data.detail.data[targetProperty]); }return p;}, []);\n              if(!targetValues.length){\n                return;\n              }\n              let where = condition ||\"\";\n              where = `${where==\"\"? \"\": ` (${where}) and `} ${sourceProperty} in (${targetValues})`;\n              await func(where, nodeId, datasetId, table);\n              linksLayout && gxr[linksLayout]({ nodes: gxr.nodes({category: sourceCategory}).array });\n            }\n          }\n        }}  >Expand Selected Nodes</Button>\n      <Form.Item label=\"Set Link Category Layout:\">\n        <Select\n          allowClear\n          value={linksLayout}\n          style={selectStyle}\n          onChange={(value) => {\n            setLinksLayout(value);\n            if(!value){\n              return;\n            }\n            for(let index=0;index<linkKeys.length;index++){\n              let link = mapping.links[linkKeys[index]];\n              if(!link){\n                continue;\n              }\n              const {sourceCategory, sourceProperty, targetCategory, targetProperty, relationship} = link;\n              if(sourceCategory === categoryOfNodes){\n                gxr[value]({ nodes: gxr.nodes({category: targetCategory}).array });\n              }else if(targetCategory === categoryOfNodes){\n                gxr[value]({ nodes: gxr.nodes({category: sourceCategory}).array });\n              }\n            }\n          }}\n          options={[{ value: \"\", label: \"\" }].concat(layoutOptions)}\n          />\n      </Form.Item>\n    </Space>\n  </div>;\n})","pinCode":false,"dname":"a353d3ac-cba5-4986-9bf6-bdfab6a3fe6a","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable selectedNodesT = {\n\treturn selectedNodes.array\n}","pinCode":false,"dname":"8b2eda78-0bfb-4515-8ed6-3ec2f38a12ab","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"layoutOptions = ([\n  { value: \"circle\", label: \"circle\" },\n  { value: \"cube\", label: \"cube\" },\n  { value: \"ego\", label: \"ego\" },\n  { value: \"grid\", label: \"grid\" },\n  { value: \"line\", label: \"line\" },\n])","pinCode":false,"dname":"663e5dd9-57ba-4239-97cc-c24a513da958","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable inputFile = undefined;","pinCode":false,"dname":"612b755b-2a54-48d2-a6c5-5ddd6eafec9c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"setInputFile = function(file){\n  mutable inputFile = file;\n}","pinCode":false,"dname":"e288dab6-846b-4654-80bf-ecf0e3a3a1cd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"readInputFile = function (file) {\n  const reader = new FileReader();\n  reader.onload = onLoadFunc;\n  reader.readAsText(file);\n}","pinCode":false,"dname":"ef0f169a-3926-469d-a2e7-6c625b53307e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"categories = listMainCategories();","pinCode":false,"dname":"b62ca1cd-0e2d-4d87-bf82-547523945b77","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"## Mapping","pinCode":false,"dname":"1744dcbb-4566-4a01-89c8-2db70d3dfbf8","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"removeLinkMapping = function(linkKey){\n  const mappingT = _.clone(mapping);\n  if(linkKey){\n    delete mappingT.links[linkKey]\n  }\n  mutable mapping = mappingT;\n  return mappingT\n}","pinCode":false,"dname":"9e89827a-874c-4fe5-8aae-87697b2c1e46","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"setMapping = function (props) {\n  const {source, target, link, replaceLinkKey} = props;\n  const mappingT = _.clone(mapping);\n  _.each([source,target],(s,i)=>{\n    if(!s){\n      return;\n    }\n    const { datasetId, table } = s;\n    if(!datasetId || !table){\n      return;\n    }\n    if(!mappingT.categories[datasetId]){\n      mappingT.categories[datasetId] = {};\n    }\n    mappingT.categories[datasetId][table] = s;\n  })\n  if(link && link.relationship){\n    mappingT.links[link.relationship] = link;\n  }\n  debugger\n  if(replaceLinkKey && mappingT.links[replaceLinkKey]){\n    delete mappingT.links[replaceLinkKey]\n  }\n  mutable mapping = mappingT;\n  return mappingT\n}","pinCode":false,"dname":"79ece6de-c117-4669-a99a-fe0f0d28dba7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable mapping = ({categories:{},links:{}})","pinCode":false,"dname":"84bbdce6-488a-44b8-aa20-dec7038ee7b7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"onLoadMappingFunc = (loadedEvent) => {\n  const parsedResult = JSON.parse(loadedEvent.target.result);\n  mutable mapping = parsedResult;\n}","pinCode":false,"dname":"a767932a-0534-48ce-97d3-7633d46d071e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"getTableMapping = function (datasetId, table) {\n  if (!datasetId || !table) {\n    return;\n  }\n  if (!mapping.categories[datasetId] || !mapping.categories[datasetId][table]) {\n    return;\n  }\n  return mapping.categories[datasetId][table];\n}","pinCode":false,"dname":"7728bbd4-7a25-4198-97a6-1b2efaf706d8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"## Style","pinCode":false,"dname":"d6b35853-1f93-4e07-a533-09b7a82afd1a","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"selectStyle = ({ minWidth: 120, width: 'fit-content' })","pinCode":false,"dname":"41a54d9b-48ad-456c-8a67-f3c6a28ab0a2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"spaceStyle = ({  })","pinCode":false,"dname":"f83c7d04-95be-44d1-b907-ad43d7253fc3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"formSpans = ({ labelCol:{ span: 24,sm:24 },wrapperCol:{ span: 24, sm:24 }, layout:\"vertical\" })","pinCode":false,"dname":"fe02e2e9-de41-4e19-8a05-4b26d84be485","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"tableStyle = ({width:\"fit-content\", maxWidth:\"calc(100vw - 42px - 2 * var(--padding))\", overFlowX:\"auto\"})","pinCode":false,"dname":"7f750959-a915-4e55-853e-c33c256f2362","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"<style>\n  .draw-graph .ant-form-item {\n    margin-bottom:0px;\n  }\n</style>","pinCode":false,"dname":"a76f247e-555a-4a1f-89b6-aed6485e2a21","codeMode":"htmlmixed"}}},{"type":"codeTool","data":{"codeData":{"value":"## Components","pinCode":false,"dname":"fa12dbac-b29b-4ae7-a9e2-73cbdb29fa81","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"CategoryComp = component(({ tag, source, setSource, linkField, setLinkField }) => {\n  const { Select, Space, Form, Table, Button, Input, message, InputNumber } = Antd;\n  const [datasetId, setDatasetId] = useState(source.datasetId || '');//datasetId\n  const [table, setTable ] = useState(source.table || \"\");//table\n  const [condition, setCondition] = useState(source.condition || \"\");\n  const [fields, setFields ] = useState(source.fields || []);//all fields of current table\n  const [sfields, setSfields ] = useState(source.sfields || []);//selected fields to generate nodeId\n  const [nodeId, setNodeId ] = useState(source.nodeId || \"\");//nodeId template string\n  const [extract, setExtract] = useState(source.extract || {});\n  const [tables, setTables ] = useState([])\n  const [datas, setDatas ] = useState([]);//extracted table datas\n  const [tableData, setTableData] = useState({});//Query Result\n  const [maxResults,setMaxResults] = useState(1000);\n  const [layout, setLayout] = useState(\"\")\n  const datasetIdOptions = _.map(datasets,(d)=>{ return {label:d.datasetReference.datasetId,value:d.datasetReference.datasetId} })\n  let columnsData = getFixedColumnsData(datas);\n  useEffect(() => {\n    setSource && setSource({datasetId, table, fields, sfields, nodeId, condition, extract})\n  },[datasetId, table, fields, sfields, nodeId, condition, extract])\n  useEffect(async ()=>{\n    try{\n      if(datasetId){\n        let tablesC= tablesMap[datasetId] || JSON.parse((await bqClient.bigquery.tables.list({ projectId: [projectID],datasetId:datasetId,maxResults:limit  })).body).tables;\n        !tablesMap[datasetId] && setTablesMap(datasetId,tablesC)\n        setTables(_.map(tablesC,(t)=>{\n          return {label:t.tableReference.tableId, value:t.tableReference.tableId}\n        }));\n      }\n    }catch(e){\n      console.error(e);\n      if(e.status === 401 && e.result?.error?.status === 'UNAUTHENTICATED'){\n        readInputFile(inputFile);\n      }\n      message.error(e.result?.error?.status||e.error||\"get tables error!\");\n    }\n  }, [datasetId, bqClient])\n  return <Space direction=\"vertical\" key={tag}>\n    <Form.Item label={`${tag} Category Preview:`} {...formSpans}>\n      <Table style={tableStyle} scroll={{\n          y: 300,\n          x: 'max-content',\n        }} dataSource={columnsData.data} columns={columnsData.columns} rowKey={(r)=>{return r.key||columnsData.data.indexOf(r)}}/>\n    </Form.Item>\n    <Space direction=\"horizontal\" className=\"d-flex align-items-center\" style={spaceStyle} wrap>\n      <Form.Item label={`${tag} DatasetId`}>\n        <Select disabled={0==datasetIdOptions.length}\n          value={datasetId}\n          allowClear\n          style={{ width: 200 }}\n          onChange={async (v)=>{\n            setDatasetId(v)\n            setTables([])\n          }}\n          options={[{label:NULL_LABEL,value:\"\"}].concat(datasetIdOptions)} />\n      </Form.Item>\n      <Form.Item label={`${tag} Category`}>\n        <Select disabled={0==tables.length}\n          value={table}\n          allowClear\n          style={{ width: 200 }}\n          onChange={async (value) => {\n            setTable(value);\n            setTableData({});\n            setDatas([]);\n            setLinkField(\"\");\n            if(!value){\n              setFields([]);\n              setSfields([]);\n              setNodeId(\"\");\n            }else{\n              try{\n                let fieldsT = fieldsMap[datasetId] && fieldsMap[datasetId][value] ? fieldsMap[datasetId][value]: \n                setFieldsMap(datasetId, value,(await bqClient.bigquery.tables.get({\n                  projectId: [projectID], datasetId: datasetId, tableId: value,\n                })).result.schema?.fields?.map(d => d.name))[datasetId][value];\n                setFields(_.map(fieldsT,(a)=>{return {label:a,value:a}}));\n                let tableMapping = getTableMapping(datasetId, value);\n                setSfields(tableMapping && tableMapping.sfields || []);\n                setNodeId(tableMapping && tableMapping.nodeId || \"\")\n              }catch(e){\n                console.error(e);\n                if(e.status === 401 && e.result?.error?.status === 'UNAUTHENTICATED'){\n                  readInputFile(inputFile);\n                }\n                message.error(e.result?.error?.status||e.error||\"get fields error!\");\n              }\n            }\n          }}\n          options={[{label:NULL_LABEL,value:\"\"}].concat(tables)}/>\n      </Form.Item>\n    </Space>\n    <Space direction=\"horizontal\" className=\"d-flex align-items-center\" style={spaceStyle} wrap>\n      <Form.Item label=\"Condition\">\n        <Input value={condition} onChange={(e)=>{\n            setCondition(e.target.value);\n            setTableData({});\n            setDatas([]);\n          }} />\n      </Form.Item>\n      <Form.Item label=\"Limit\">\n        <InputNumber\n          min={1}\n          step={1}\n          max={10000}\n          style={{\n            margin: '0 16px',\n          }}\n          value={maxResults}\n          onChange={setMaxResults}\n          />\n      </Form.Item>\n      <Space direction=\"horizontal\" className=\"d-flex align-items-center\">\n        <Button disabled={!datasetId|| !table} onClick={async ()=>{\n            try{\n              let limitCall = await bqClient.bigquery.jobs.query({\n                projectId: [projectID],\n                resource: {\n                  // See https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#QueryRequest\n                  query: `select * from ${projectID}.${datasetId}.${table} ${condition?`where ${condition}`:\"\"}`,\n                  useLegacySql: false,\n                  maxResults: maxResults\n                }\n              })\n              if(!limitCall.result.jobComplete){\n                message.error(limitCall.result.error || limitCall.result.errors)\n                return;\n              }\n              let fieldsT = setFieldsMap(datasetId, table, limitCall.result.schema?.fields?.map(d => d.name))[datasetId][table];\n              let temop = await limitCall.result.rows.map(d => d.f.map(d=>d.v)).map(d=>convertArrayToObject(fieldsT, d, 'v'));\n              setTableData(limitCall.result);\n              setFields(_.map(fieldsT,(a)=>{return {label:a,value:a}}));\n              setDatas(temop);\n            }catch(e){\n              console.error(e);\n              if(e.status === 401 && e.result?.error?.status === 'UNAUTHENTICATED'){\n                readInputFile(inputFile);\n              }\n              message.error(e.result?.error?.status||e.error||\"query error!\");\n            }\n          }}>Query</Button>\n        <Button className={(!tableData.pageToken || !tableData.jobReference?.jobId) ?\"hide\":\"\" } onClick={async ()=>{\n            try{\n              let limitCall = await bqClient.bigquery.jobs.getQueryResults({\n                projectId: [projectID],\n                jobId: tableData.jobReference?.jobId,\n                resource: { // See https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults\n                  startIndex: datas.length,  \n                  pageToken: tableData.pageToken,\n                  maxResults: maxResults\n                }\n              })\n              let temop = limitCall.result.rows ? (await limitCall.result.rows.map(d => d.f.map(d=>d.v)).map(d=>convertArrayToObject(fieldsMap[datasetId][table], d, 'v'))):[];\n              setTableData(limitCall.result);\n              setDatas(datas.concat(temop));\n            }catch(e){\n              console.error(e);\n              if(e.status === 401 && e.result?.error?.status === 'UNAUTHENTICATED'){\n                readInputFile(inputFile);\n              }\n              message.error(e.result?.error?.status||e.error||\"query next page error!\");\n            }\n          }}>Next Page</Button>\n        <span className={tableData.totalRows?\"\":\"hide\"}>Total Rows：{ datas.length } / { tableData.totalRows}</span>\n      </Space>\n    </Space>\n    <Space direction=\"horizontal\" className=\"d-flex align-items-center\" style={spaceStyle} wrap>\n      <Form.Item label=\"NodeId\">\n        <Space direction=\"vertical\">\n          <div>\n            <Select disabled={0==fields.length}\n              mode=\"multiple\"\n              allowClear\n              style={{ width: 200 }}\n              placeholder=\"Please select fields\"\n              value={sfields}\n              onChange={(v)=>{\n                setSfields(v)\n                let nodeIdT = _.map(v,(a)=>`{${a}}`).join(\"_\");\n                setNodeId(nodeIdT)\n              }}\n              options={[{label:NULL_LABEL,value:\"\"}].concat(fields)}\n              />\n            <Input disabled={0==fields.length} style={{ width: 200 }} placeholder=\"Node Id\" value={nodeId} onChange={e=>{\n                let nodeIdT = e.target.value;\n                setNodeId(nodeIdT)\n              }} />\n            <label>eg: {datas[0]&&_.reduce(_.keys(datas[0]), (p, FIELD) => {\n                p = p.replaceAll(`{${FIELD}}`, datas[0][FIELD])\n                return p\n              }, nodeId)}</label> \n          </div>\n            { nodeId && _.uniqBy(datas, (a)=>_.reduce(_.keys(datas[0]), (p, FIELD) => {\n              p = p.replaceAll(`{${FIELD}}`, a[FIELD])\n              return p\n            }, nodeId)).length !== datas.length && <label className=\"text-danger\">Detect nodeId not unique</label>}\n        </Space>\n      </Form.Item>\n      <Button disabled={!columnsData.data.length} onClick={()=>{\n          drawGraph.importDatas(_.map(columnsData.data, (o)=>{\n            let d = _.clone(o);\n            if(nodeId.trim()){\n              d.nodeId = _.reduce(_.keys(d), (p, FIELD) => {\n                p = p.replaceAll(`{${FIELD}}`, d[FIELD])\n                return p\n              }, nodeId.trim())\n            }\n            return d;\n          }), `${datasetId}.${table}`, '', (err,res)=>{\n          \tlayout && gxr[layout]({ nodes: gxr.nodes({category: `${datasetId}.${table}`}).array });\n          })\n        }}>Add to Graph</Button>\n      <Form.Item label=\"Layout:\">\n        <Select\n          allowClear\n          value={layout}\n          style={selectStyle}\n          onChange={(value) => {\n            setLayout(value);\n            value && gxr[value]({ nodes: gxr.nodes({category: `${datasetId}.${table}`}).array });\n          }}\n          options={[{ value: \"\", label: \"\" }].concat(layoutOptions)}\n          />\n      </Form.Item>\n    </Space>\n    <Space direction=\"horizontal\" className=\"d-flex align-items-center\" style={spaceStyle} wrap>\n      <Form.Item label={`${tag} Link Field`}>\n        <Select disabled={0==fields.length}\n          mode=\"single\"\n          allowClear\n          style={{ width: 200 }}\n          placeholder=\"Please select field\"\n          value={linkField}\n          onChange={(v)=>{\n            setLinkField(v)\n          }}\n          options={[{label:NULL_LABEL,value:\"\"}].concat(fields)}\n          />\n      </Form.Item>\n    </Space>\n    {datasetId && table && fields && <ExtractComp extract={extract} setExtract={setExtract} datasetId={datasetId} table={table} order={fields} />}\n  </Space>\n}) \n","pinCode":false,"dname":"5781cff3-b807-4a01-a73f-15585e942487","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"ExtractComp = component(({ datasetId, table, order, extract, setExtract }) => {\n    const { Space, Select, Form, Input, Switch, Table, Button } = Antd;\n  \tconst [properties, setProperties] = useState(_.reduce(extract.props,(p,o,i)=>{ p[o.name] = o; return p;},{}) || {})\n  \tconst [targetCategory, setTargetCategory] = useState(extract.targetCategory || \"ext-cat\")\n    const [relationship, setNewRelationship] = useState(extract.relationship || \"ext-rl\")\n    const [fields, setFields] = useState([]);\n  \tconst save = ()=>{\n    \tif(!_.isEmpty(properties) && targetCategory && relationship)  {\n            setExtract({\n              sourceCategory: `${datasetId}.${table}`,\n              props: _.values(properties),\n              targetCategory: targetCategory,\n              relationship: relationship,\n            });\n        }\n    }\n    const columns = [\n      {\n        title: 'Selected Property',\n        dataIndex: 'name',\n        key: 'name',\n        ellipsis: true,\n      },\n      {\n        title: 'New Property Name',\n        dataIndex: 'newName',\n        key: 'newName',\n        ellipsis: true,\n        render: (text,record) => <Input value={text} style={{width:200}} onChange={(e)=>{\n          \trecord.newName = e.target.value;\n            properties[record.name] = record;\n            setProperties(_.clone(properties));\n            save();\n          }} />,\n      },\n      {\n        title: 'Key',\n        dataIndex: 'isKey',\n        key: 'isKey',\n        ellipsis: true,\n        render: (text,record) => <Switch checked={text} onChange={(checked)=>{\n          \trecord.isKey = checked;\n            properties[record.name] = record;\n            setProperties(_.clone(properties));\n            save();\n          }} />,\n      },\n      {\n        title: 'Split',\n        dataIndex: 'isSplit',\n        key: 'isSplit',\n        ellipsis: true,\n        render: (text,record) => <span className={record.isKey?\"\":\"hide\"}> <Switch checked={text} onChange={(checked)=>{\n              record.isSplit = checked;\n              record.isSplit && (record.splitChar = \",\");\n              properties[record.name] = record;\n              setProperties(_.clone(properties));\n              save();\n            }} /> {text && <Input value={record.splitChar} style={{width:50}} onChange={(e)=>{\n                record.splitChar = e.target.value;\n                properties[record.name] = record;\n                setProperties(_.clone(properties));\n                save();\n              }} />}</span>,\n      },\n    ];\n    return <Space direction=\"vertical\" key='f6b3329f-08c0-4ff2-9417-cdb071f5fcf4'>\n      <Space direction=\"horizontal\"  style={spaceStyle} wrap>\n        <Form.Item label=\"Extract Category\">\n          <Input value={targetCategory} onChange={(e)=>{\n              setTargetCategory(e.target.value.trim());\n              save();\n            }} />\n        </Form.Item>\n        <Form.Item label=\"Extract Relationship\">\n          <Input value={relationship} onChange={(e)=>{\n              setNewRelationship(e.target.value.trim());\n              save();\n            }} />\n        </Form.Item>\n        <Form.Item label=\"Select Properties\"> \n          <Select disabled={0==order.length}\n            mode=\"multiple\"\n            allowClear\n            style={{ width: 200 }}\n            placeholder=\"Please select fields\"\n            value={fields}\n            onChange={(v)=>{\n              let p = _.reduce(v,(p, field)=>{\n                if(!properties[field]){\n                  p[field] = {\n                    name:field,\n                    newName:field,\n                    isKey:false,\n                    isSplit:false,\n                    splitChar:\"\",\n                  }\n                }else{\n                  p[field] = properties[field];\n                }\n                return p;\n              }, {})\n              setProperties(p)\n              setFields(v);\n              save();\n            }}\n            options={order}\n            />\n        </Form.Item>\n      </Space>\n      <Table rowKey={\"name\"} style={tableStyle} scroll={{\n          y: 300,\n            x: 'max-content',\n        }} dataSource={_.values(properties)} columns={columns}  />\n      <Button disabled={!fields.length} onClick={()=>{\n          save();\n          if(!_.isEmpty(properties) && targetCategory && relationship)  {\n            api.extract({\n              sourceCategory: `${datasetId}.${table}`,\n              props: _.values(properties),\n              targetCategory: targetCategory,\n              relationship: relationship,\n              inheritLinks: false,\n              skipEmpty: true,\n            })\n\n          } \n        }}>Extract</Button>\n  </Space>;\n})","pinCode":false,"dname":"d5cd319a-f593-4d49-91b7-15069f9ea22a","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"({\n  categories: { a_Tb: { nodeId: \"xxx\", extract: { name:\"ccc\",  } }, b_Tb: { nodeId: \"yyy\" } },\n  links: { _a_link: { s: \"a_Tb\", t: \"b_Tb\", s_l: \"sw\", t_l: \"tw\" } },\n})","pinCode":false,"dname":"917eadf2-bb53-4a82-bec3-65e15c0c7811","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"//cache tables of dataset\nmutable tablesMap = ({})","pinCode":false,"dname":"b6964d2a-f439-449b-8982-ee5422633e3f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"setTablesMap = function (datasetId, tables) {\n  let tablesMapT = _.clone(tablesMap);\n  tablesMapT[datasetId] = tables;\n  mutable tablesMap = tablesMapT;\n  return tablesMapT;\n}","pinCode":false,"dname":"1c3688e8-7776-4e85-8d7d-2f2655eb0377","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"//datasets\ndatasets =  bqClient?.bigquery && JSON.parse(\n  (await bqClient.bigquery.datasets.list({ projectId: projectID })).body\n).datasets","pinCode":false,"dname":"6b21f728-37f1-4694-a3ff-60ad667deff4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"//cache fields of table\nmutable fieldsMap = ({})","pinCode":false,"dname":"9643964a-9d5b-49d8-ba5c-4ca6102a7f57","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"setFieldsMap = function (datasetId, table, fields) {\n  let fieldsMapT = _.clone(fieldsMap);\n  if (!fieldsMapT[datasetId]) {\n    fieldsMapT[datasetId] = {};\n  }\n  fieldsMapT[datasetId][table] = fields;\n  mutable fieldsMap = fieldsMapT;\n  return fieldsMapT;\n}","pinCode":false,"dname":"8043f523-ff81-4ddf-8b16-3f00a997cf2c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof limit = Inputs.range([1,10000], {label: \"limit\", step: 1, value:1000 })","pinCode":false,"dname":"66902cb1-874d-4f79-85f2-2bcdd5404a5a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"## Functions","pinCode":false,"dname":"d92e9229-7e47-44ee-885d-68366cbfaebe","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"getFixedColumnsData = function (nodes, date = false) {\n    let columnsData = { properties: [], columns: [], data: [] };\n    columnsData.properties = extractAllKeys(nodes);\n    columnsData.columns = _.reduce(columnsData.properties, (prev, property, index, source) => {\n      let obj = {\n        key: property,\n        title: property,\n        dataIndex: property,\n      };\n      if(source.length > 2){\n        if(index === 0){\n          obj.ellipsis = true;\n          obj.fixed = 'left';\n        }\n      }\n      prev.push(obj);\n      return prev;\n    }, []);\n    columnsData.data = nodes;\n    return columnsData;\n}","pinCode":false,"dname":"33383da6-63a1-4383-97aa-b2b5b4904f14","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"saveMapping = function (jsonObj) {\n  let content = JSON.stringify(jsonObj,undefined,1);\n  const file = new File([content], {\n    type: \"text/json\",\n    endings: \"transparent\",\n  });\n  const url = URL.createObjectURL(file);\n  saveLink(url,  `mapping_${moment(new Date()).format(\"YYYY-MM-DD HH-mm-ss\")}.json`);\n}","pinCode":false,"dname":"26b3efdb-eed0-4398-a681-05c4f8f35f8f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"convertArrayToObject = (fields, array, key) =>\n  array.reduce(\n    (obj, item) => ({\n      ...obj,\n      //[item[key]]: item\n      [fields[array.indexOf(item)]]:item\n    }),\n    {}\n  );","pinCode":false,"dname":"974447f4-f3a7-4b3f-996f-931dfd3944dc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"# Utils","pinCode":false,"dname":"2fc12b5b-70bb-42a6-801e-c8159d218a68","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"function saveLink(link, title) {\n  let save_link = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n  document.body.appendChild(save_link);\n  save_link.href = link;\n  if (title) {\n    save_link.download = title;\n  }\n  let event = document.createEvent('MouseEvents');\n  event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n  save_link.dispatchEvent(event);\n  URL.revokeObjectURL(save_link.href);\n  document.body.removeChild(save_link);\n}","pinCode":false,"dname":"1cf631f0-43c9-4994-8352-c02648b0d631","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"## Settings","pinCode":false,"dname":"493f6752-d8ad-434a-8b9a-46d0a073caab","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"NULL_LABEL = \"\"","pinCode":false,"dname":"a78e5275-ef66-4d64-b259-5ebc17d9771e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"## Dependencies","pinCode":false,"dname":"02b72d02-89bc-438c-8161-1055ff9645d1","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"api = window.opener.gxr//(await require(\"@kineviz/graphxr-api\")).getApi()","pinCode":false,"dname":"2c06e460-abf2-4453-a0b5-d6128d182887","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { drawGraph } from \"./ImportDataToGraph\"","pinCode":false,"dname":"37426c6e-fffb-4e66-accd-544ea76cba7e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { runBigQuery, bqClient, projectID, onLoadFunc } from \"./bigquery\";","pinCode":false,"dname":"4d7908bb-f9c8-4a47-90a2-80814e23e611","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"be0dd8b9-70bd-493e-a61e-1eb074df3ff7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { getColumnsData, extractAllKeys } from \"../react-graphxr/util/helper\"","pinCode":false,"dname":"b8b64914-e943-4f85-b06b-f7488b5c26b7","codeMode":"javascript2"}}}],"version":"2.19.1"}
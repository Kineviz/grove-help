{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md `#### Lables`","pinCode":false,"dname":"6636d095-eed6-4a0b-940b-9b959fdb1d69","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof labels=Inputs.table(Labels, {required:false})","pinCode":false,"dname":"2eb40561-e3d2-403a-9ad2-e1943a24650d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${labels.map(l=>l.label)}`,{\n  reduce: async ()=>{\n    const whereClause = labels\n      .map(l=>l.label)\n      .map(label => `n:${label}`).join(' OR ');\n    const query =`match (n) WHERE ${whereClause} RETURN n`\n    console.log(query)\n    await gxr.neo4j(query)\n  }, \n  disabled:labels.length==0\n})","pinCode":false,"dname":"db66a1c6-2f3b-4b7f-9ef5-135fdd2888b0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Labels = {\n  let res = await gxr.neo4j(`MATCH (n)\nRETURN labels(n) AS label, count(n) as cnt`, {saveToGraph:false})\n  let arr= res._content.data\n  arr.shift()\n  return arr.map(\n    elem=>({\n      label: elem[0][0],\n      count: elem[1].low\n  }))\n}","pinCode":false,"dname":"52a9a92f-fda9-4d68-b2d9-05264d599fb9","codeMode":"javascript2","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof condition = render(({ useSetter }) => {\n  const [selectedLabel, setSelectedLabel] = useState(Labels[0].label);\n  const [properties, setProperties] = useState(propertiesMap[selectedLabel]);\n  if (!selectedLabel) {\n    return jsx`<div>loading...</div>`;\n  }\n  const [selectedProp, setSelectedProp] = useState(properties[0]);\n  const [searchText, setSearchText] = useState(\"\");\n  useSetter({ selectedLabel, properties, selectedProp, searchText });\n  return jsx`<div className=\"d-flex flex-wrap align-items-center flex-gap\">\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>Category:</label>\n      <select className=\"oi-3a86ea-input\" value='${selectedLabel}' \n      onChange=${(e) => {\n        let selectedLabelTmp = e.target.value;\n        setSelectedLabel(selectedLabelTmp);\n        setProperties(propertiesMap[selectedLabelTmp]);\n      }}>\n      ${_.map(Labels, ({ label }) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>Property:</label>\n      <select className=\"oi-3a86ea-input\" value='${selectedProp}' \n      onChange=${(e) => setSelectedProp(e.target.value)}>\n      ${_.map(properties, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n    \t<label >Search:</label>\n    \t<div className=\"oi-3a86ea-input\">\n      \t<input type=\"text\" value='${searchText}'  onChange=${(e) =>\n    setSearchText(e.target.value)} />\n    \t</div>\n \t </div>\n  </div>`;\n})","pinCode":false,"dname":"e556e034-2be6-4215-ba19-bf379b2d15c6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof selectedSearchEntries={\n  if(condition.searchText.trim()==\"\"){\n    return Inputs.table([])\n  }\n  let query = `MATCH (n:${condition.selectedLabel}) \n  \twhere tolower(n.${condition.selectedProp} ) CONTAINS tolower('${condition.searchText}')\n    return n limit 10`\n   let nodes=await gxr.neo4j(query, {saveToGraph: false})\n  let rawdata = nodes?._content?.data?.nodes\n  if(!rawdata){\n    return Inputs.table([])\n  }\n  let propList = rawdata.map(d=>_.merge({}, {_id: d.id},d.properties))\n  return Inputs.table(propList)\n}","pinCode":false,"dname":"bb859db5-1af3-46bc-b5b7-a96af2043012","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button('Add to Graph', {reduce:()=>{\n  let ids=selectedSearchEntries.map(d=>d._id).join(\", \")\n  let query = `MATCH (n) \n    where ID(n) in [${ids}]\n    return n`\n  gxr.neo4j(query)\n}})\n","pinCode":false,"dname":"ead676ea-6d6c-4f17-9381-9efa6ebfabee","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md `#### Relationships`","pinCode":false,"dname":"32187faf-4c1b-4037-ba08-b765acebb5a6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof relationships=Inputs.table(Relationships, {required:false})","pinCode":false,"dname":"5b492d9c-b038-4716-ba1a-d6f812ade7ea","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${relationships.map(r=>r.relationship)}`, {\n  reduce: async ()=>{\n    const whereClause = relationships\n      .map(l=>l.relationship)\n      .map(rel => `r:${rel}`).join(' OR ');\n    const query =`match (n)-[r]->(m) WHERE ${whereClause} RETURN *`\n    console.log(query)\n    await gxr.neo4j(query)\n  },\n  disabled: relationships.length==0\n})","pinCode":false,"dname":"7c12dfed-3b70-495c-afd3-396cb6619c86","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Relationships = {\n  let res = await gxr.neo4j(`MATCH ()-[r]->()\nRETURN type(r) AS relationshipType, count(r) as cnt\n`, {saveToGraph:false})\n  let arr= res._content.data\n  arr.shift()\n  return arr.map(elem=>({relationship:elem[0], count:elem[1].low}))\n}","pinCode":false,"dname":"e17e0881-00b9-4f15-94f9-327d64f34f0a","codeMode":"javascript2","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"Button('Expand', async ()=>{\n  const selected = gxr.nodes(\":selected\")\n  if(selected.length==0){\n    alert('Please select at least one nodes')\n    return\n  }\n  let ids = gxr.nodes(\":selected\").map(n=>parseInt(n.id))\n  let expand_on = relationships.map(l=>l.relationship)\n  let relStr = expand_on.length>0 ?\n      ':'+expand_on.join('|') : ''\n  let query = `MATCH (n)-[r${relStr}]-(m) \n  where id(n) in [${ids}]\n  return *`\n  console.log(query)\n  await gxr.neo4j(query)\n})","pinCode":false,"dname":"211c0cd5-35c3-44a8-b8ab-28dcf5cd988a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"propertiesMap= {\n  let promiseMap= {};\n  for(let i =0;i<Labels.length;i++){\n     let res = await gxr.neo4j(`MATCH (p:${Labels[i].label})  RETURN keys(p);`, {\n      saveToGraph: false,\n    });\n    let arr = res._content.data;\n    promiseMap[Labels[i].label]= Array.from(\n      _.reduce(\n        arr.slice(1),\n        (p, o) => {\n          _.each(o[0], (v) => {\n            p.add(v);\n          });\n          return p;\n        },\n        new Set()\n      )\n    );\n  }\n  return promiseMap;\n}","pinCode":false,"dname":"f57fa367-2ba1-4834-afd7-8bf733be299d","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"9a715d0d-e33c-4662-bb8a-626a530ff537","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<style>\n  .codex-editor{\n   font-size:1.2em\n  }\n   label{\n   white-space: pre!important;\n  }\n  label {\n    margin-bottom: unset;\n}\n</style>`","pinCode":false,"dname":"aad14551-2e7a-49b4-9418-e142893f4edb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"react(antd(({Button,Table}) => {\n  let columns=_.map(cars[0],(v,key)=>{return {\n                key: key,\n                title: key,\n                dataIndex: key,\n            }})\n  return <React.Fragment> <Button onClick={()=>{\n             alert(value)\n             }}>{value}</Button>\n  \n  <Table size='small' scroll={{ x: '90%' }} columns={columns} dataSource={cars} sticky />\n  \n  </React.Fragment>}\n          \n          ))","pinCode":true,"dname":"d719b022-6874-4140-9468-00307ef02b6b","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"react(<div>123</div>)","pinCode":true,"dname":"8881d449-704c-4d74-8f99-ae85efd80a7c","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"component(()=>{\n  return jsx`<div>test</div>`\n})","pinCode":true,"dname":"01a13e1d-ebb8-4a3a-9344-8ec95fce3b45","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"value = 12345","pinCode":true,"dname":"98e56a46-8f90-4b7d-ba8d-f243cfdda2f2","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Pie chart component\n\nThis chart shows the estimated population by age in the United States as of 2015. The total estimated population is ${d3.sum(population, d => d.value).toLocaleString(\"en-US\")}. Data: [U.S. Census](https://www.census.gov/data.html).`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"chart = (PieChart(population, {\n  name: d => d.name,\n  value: d => d.value,\n  width,\n  height: 500\n}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"population = (FileAttachment(\"population-by-age.csv\").csv({typed: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"howto(\"PieChart\", {alternatives: `[D3 pie chart example](/@d3/pie-chart/2?intent=fork)`})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"PieChart = (function PieChart(data, {\n  name = ([x]) => x,  // given d in data, returns the (ordinal) label\n  value = ([, y]) => y, // given d in data, returns the (quantitative) value\n  title, // given d in data, returns the title text\n  width = 640, // outer width, in pixels\n  height = 400, // outer height, in pixels\n  innerRadius = 0, // inner radius of pie, in pixels (non-zero for donut)\n  outerRadius = Math.min(width, height) / 2, // outer radius of pie, in pixels\n  labelRadius = (innerRadius * 0.2 + outerRadius * 0.8), // center radius of labels\n  format = \",\", // a format specifier for values (in the label)\n  names, // array of names (the domain of the color scale)\n  colors, // array of colors for names\n  stroke = innerRadius > 0 ? \"none\" : \"white\", // stroke separating widths\n  strokeWidth = 1, // width of stroke separating wedges\n  strokeLinejoin = \"round\", // line join of stroke separating wedges\n  padAngle = stroke === \"none\" ? 1 / outerRadius : 0, // angular separation between wedges, in radians\n} = {}) {\n  // Compute values.\n  const N = d3.map(data, name);\n  const V = d3.map(data, value);\n  const I = d3.range(N.length).filter(i => !isNaN(V[i]));\n\n  // Unique the names.\n  if (names === undefined) names = N;\n  names = new d3.InternSet(names);\n\n  // Chose a default color scheme based on cardinality.\n  if (colors === undefined) colors = d3.schemeSpectral[names.size];\n  if (colors === undefined) colors = d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), names.size);\n\n  // Construct scales.\n  const color = d3.scaleOrdinal(names, colors);\n\n  // Compute titles.\n  if (title === undefined) {\n    const formatValue = d3.format(format);\n    title = i => `${N[i]}\\n${formatValue(V[i])}`;\n  } else {\n    const O = d3.map(data, d => d);\n    const T = title;\n    title = i => T(O[i], i, data);\n  }\n\n  // Construct arcs.\n  const arcs = d3.pie().padAngle(padAngle).sort(null).value(i => V[i])(I);\n  const arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);\n  const arcLabel = d3.arc().innerRadius(labelRadius).outerRadius(labelRadius);\n  \n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  svg.append(\"g\")\n      .attr(\"stroke\", stroke)\n      .attr(\"stroke-width\", strokeWidth)\n      .attr(\"stroke-linejoin\", strokeLinejoin)\n    .selectAll(\"path\")\n    .data(arcs)\n    .join(\"path\")\n      .attr(\"fill\", d => color(N[d.data]))\n      .attr(\"d\", arc)\n    .append(\"title\")\n      .text(d => title(d.data));\n\n  svg.append(\"g\")\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 10)\n      .attr(\"text-anchor\", \"middle\")\n    .selectAll(\"text\")\n    .data(arcs)\n    .join(\"text\")\n      .attr(\"transform\", d => `translate(${arcLabel.centroid(d)})`)\n    .selectAll(\"tspan\")\n    .data(d => {\n      const lines = `${title(d.data)}`.split(/\\n/);\n      return (d.endAngle - d.startAngle) > 0.25 ? lines : lines.slice(0, 1);\n    })\n    .join(\"tspan\")\n      .attr(\"x\", 0)\n      .attr(\"y\", (_, i) => `${i * 1.1}em`)\n      .attr(\"font-weight\", (_, i) => i ? null : \"bold\")\n      .text(d => d);\n\n  return Object.assign(svg.node(), {scales: {color}});\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"import { howto }  from 'd3-charts/pie-chart-component/7a9e12f9fb3d8e06'","pinCode":false}}}],"version":"2.19.1"}
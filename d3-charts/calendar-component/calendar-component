{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Calendar component\n\nBased on [Observable Plot](https://observablehq.com/@observablehq/plot), this function displays a calendar, highlighting some dates passed as data:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Calendar([\n  [\"2022-03-01\", \"My birthday\"],\n  [\"2022-05-02\", \"My unbirthday\"],\n  [\"2022-12-03\", \"Another one of my unbirthdays\"]\n])","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`To use, import the function in a cell:\n~~~js\n    import {Calendar} from \"@observablehq/calendar-component\"\n~~~\n\nthen call it:\n~~~js\n    Calendar(data, options)\n~~~\n\nwhere **data** is an *iterable* of calendar items.\n\nThe **options** are:\n\n* **date** — the date accessor; defaults to the first element of the item. The date is expected to be set in UTC—otherwise a viewer who is not in the same timezone as the author might see 1-day shifts. You can pass the date as an ISO string format (like \"2022-03-01\"), which will be converted via [d3.isoParse](https://github.com/d3/d3-time-format#isoParse)—this is the recommended (risk-free) approach.\n\n* **value** — value accessor; defaults to the second element of the item.\n\n* **reduce** — a function that decides what happens when multiple events happen on the same day. Defaults to “first”.\n\n* **width** — the width of the calendar in pixels; defaults to 726; if smaller than 726, the calendar will be displayed by semester—allowing a responsive layout.\n\n* **gap** — the gap between months, as a percentage of the cell’s width (defaults to 0.15).\n\n* **color** — a color scale options object to pass to Plot.\n\n* **fill** — controls the color of the marked dates; defaults to *value* if a value was specified, steelblue otherwise.\n\n* **textFill** — text color for marked days; defaults to white.\n\n* **title** — a title attribute.\n\n* **colors** — an object with specific color constants: { base: \"#eee\", today: \"red\" }. colors.base will be used to display the background of unmarked days. colors.today is the outline of the current day.\n\n* **weekStart** - 0 for Sunday-based weeks (default); 1 for Monday-based weeks.\n\n* **daysToShow** — which days of the week to show, as an array of weekday numbers (defaults to [0, 1, 2, 3, 4, 5, 6], the whole week—[1, 2, 3, 4, 5, 6, 0] for Monday-based weeks).\n\n* **weekNumber** — should we display the week number? Defaults to false.\n\n* **locale** — the locale for date, days and months formatting; defaults to en-US.\n\n* **dayFormat** - A formatter function for the days; if specified as a string, it is passed to d3.utcFormat (in the default English locale). Defaults to the initial of the day’s name.\n\n* **monthFormat** - A formatter function for the months; if specified as a string, it is passed to d3.utcFormat (in the default English locale). Defaults to the short month name.\n\n* **weekNumberFormat** - A formatter function to receive the date of the last day of the week; if specified as a string, it is passed to d3.utcFormat. %V formats the week as [ISO 8601 week of the year](https://en.wikipedia.org/wiki/ISO_week_date); defaults to [%U for Sunday-based, %W for Monday-based weeks](https://github.com/d3/d3-time-format). Week numbers are expressed as a decimal number [01, 53].\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Here’s the nimblest calendar, with a handful of dates:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Calendar([\"2022-03-01\", \"2022-05-02\", \"2022-12-03\"])","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`And here’s a hero calendar, with a color representing the daily number of views since 2015 on Wikipedia’s “[Pumpkin Spice Latte](https://en.wikipedia.org/wiki/Pumpkin_Spice_Latte)” page (yes, it’s that time of the year again!—thank you [Yuri Vishnevsky](/@yurivish/wikipedia-pageviews-calendar) for the data):`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"data = (fetch(\n  `https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia/all-access/user/Pumpkin_Spice_Latte/daily/20170301/${d3.utcFormat(\"%Y%m%d\")(new Date())}`\n)\n  .then((res) => res.json())\n  .then((d) =>\n    d.items.map(({ views, timestamp: ts }) => ({\n      date: `${ts.slice(0, 4)}-${ts.slice(4, 6)}-${ts.slice(6, 8)}`,\n      views: +views\n    }))\n  ))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Calendar(data, {\n  width,\n  fill: \"views\",\n  title: (d) => `${d.views} views`,\n  color: { scheme: \"RdYlBu\", domain: [0, 1000], type: \"sqrt\", reverse: true }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`To demonstrate the function’s responsiveness to the width, here’s a smaller calendar:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Calendar(\n  [\n    [\"2021-03-01\", 0.4],\n    [\"2021-03-02\", 0.7],\n    [\"2021-04-01\", 0.99],\n    [\"2021-04-02\", 0.1],\n    [\"2021-05-01\", 0.4],\n    [\"2021-05-02\", 0.0],\n    [\"2021-06-01\", 0.5],\n    [\"2021-06-01\", 0.6]\n  ],\n  {\n    fill: d => d3.scaleSequential(d3.interpolateSinebow)(d[1]),\n    color: { type: \"identity\" },\n    colors: { base: \"#eee\" }, // no mark for \"today\"\n    width: 500 // responsive: groups by semester\n  }\n)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`And here’s a Spanish-language calendar of all the week-ends of 2021, with week numbers:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Calendar([\"2021-01-01\", \"2021-12-31\"], {\n  weekStart: 1, // Monday-based (not for Spain, but because we want consecutive Saturdays and Sundays)\n  daysToShow: [6, 0], // Sat, Sun\n  weekNumber: true,\n  locale: \"es\",\n  dayFormat: d => d.toLocaleString(\"es\", { weekday: \"short\", timeZone: \"UTC\" })\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"howto(\"Calendar\", {imports: {d3: \"d3\", Plot: \"@observablehq/plot\"}})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n*the code:*`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Calendar = {\n  // default accessors\n  function valueAccessor(d) {\n    return typeof d === \"object\" && (\"value\" in d ? d.value : d[1]);\n  }\n\n  function dateAccessor(d) {\n    return typeof d === \"object\" && (\"date\" in d ? d.date : d[0]);\n  }\n\n  // https://github.com/d3/d3-time/blob/main/src/utcWeek.js#L4-L13\n  function utcWeekday(i) {\n    return d3.timeInterval(\n      (date) => {\n        date.setUTCDate(date.getUTCDate() - ((date.getUTCDay() + 7 - i) % 7));\n        date.setUTCHours(0, 0, 0, 0);\n      },\n      (date, step) => date.setUTCDate(date.getUTCDate() + step * 7),\n      (start, end) => (end - start) / 604800000 // durationWeek;\n    );\n  }\n\n  return function (\n    data = [],\n    {\n      date = dateAccessor,\n      value = valueAccessor,\n      reduce = (d) => d[0],\n      width = 726,\n      gap = 0.15,\n      color,\n      fill = value || \"steelblue\",\n      textFill = \"white\",\n      title,\n      colors = {\n        base: \"#eee\",\n        today: \"red\"\n      },\n      weekStart = 0, // 1 for Monday-based weeks.\n      daysToShow = d3.range(7).map((d) => (d + +weekStart) % 7),\n      weekNumber,\n      locale = \"en-US\",\n      weekNumberFormat = +weekStart === 0 ? \"%U\" : \"%W\",\n      dayFormat = (d) =>\n        d.toLocaleString(locale, { weekday: \"narrow\", timeZone: \"UTC\" }),\n      monthFormat = (d) =>\n        d.toLocaleString(locale, { month: \"short\", timeZone: \"UTC\" }),\n      fy, // options for fy, e.g. reverse: false\n    } = {}\n  ) {\n    // rollup the data into days\n    data = Array.from(data, (d) => (typeof d === \"string\" ? [d, \"\"] : d));\n    const dates = Plot.valueof(data, date);\n    const marked = d3.rollup(data, reduce, (d, i) =>\n      dates[i] instanceof Date ? dates[i] : d3.isoParse(dates[i])\n    );\n    const days = [...marked.keys()].filter((d) => !isNaN(d.getTime())); // filter out invalid dates\n    if (days.length === 0) days.push(new Date());\n    const e = d3.extent(days);\n\n    // responsive\n    const W = width < 726 ? \"H\" : \"Y\";\n\n    // sort all days, with days containing information put at the beginning of the\n    // array (so we can pass channels as arrays, e.g. fill: [1, 2, 3] for three events)\n    const fullExtent = [\n      d3.utcYear.floor(e[0]),\n      d3.utcYear.offset(d3.utcYear.floor(e[1]))\n    ];\n    // filter out empty semesters\n    if (W === \"H\") {\n      if (e[0].getUTCMonth() >= 6)\n        fullExtent[0] = d3.utcMonth.offset(fullExtent[0], 6);\n      if (e[1].getUTCMonth() < 6)\n        fullExtent[1] = d3.utcMonth.offset(fullExtent[1], -6);\n    }\n    const alldays = new Set([...days, ...d3.utcDays(...fullExtent)]);\n\n    // copy the rolled-up data into the days array\n    data = Array.from(alldays, (date) => ({\n      date,\n      ...(marked.has(date)\n        ? { ...marked.get(date), date, foreground: true }\n        : { background: true })\n    }));\n\n    // weekStart and weekNumber\n    const utcWeek = utcWeekday((weekStart = +weekStart));\n    if (typeof weekNumberFormat === \"string\")\n      weekNumberFormat = d3.utcFormat(weekNumberFormat);\n    if (![0, 1].includes(weekStart))\n      throw new Error(\"unsupported weekStart value\");\n\n    const weekX =\n      W === \"H\"\n        ? (d) =>\n            +utcWeek.count(d3.utcYear(d), d) -\n            26.2 * (d.getUTCMonth() >= 6) +\n            gap * d.getUTCMonth()\n        : (d) => +utcWeek.count(d3.utcYear(d), d) + gap * +d.getUTCMonth();\n    const height =\n      (d3.utcMonths(...d3.extent(alldays)).length / 12) *\n      (daysToShow.length + 2) *\n      17 *\n      (W === \"H\" ? 2 : 1);\n\n    // We want the UTC date that corresponds to our local calendar date\n    const now = new Date();\n    const today = Date.UTC(now.getFullYear(), now.getMonth(), now.getDate());\n\n    // formats\n    if (typeof dayFormat !== \"function\") dayFormat = d3.utcFormat(dayFormat);\n    if (typeof monthFormat !== \"function\")\n      monthFormat = d3.utcFormat(monthFormat);\n\n    // positions\n    const barOptions = {\n      x1: (d) => -0.45 + weekX(d.date),\n      x2: (d) => 0.5 + weekX(d.date),\n      y: (d) => d.date.getUTCDay(),\n      insetBottom: 1\n    };\n    const textOptions = {\n      x: (d) => weekX(d.date),\n      y: (d) => d.date.getUTCDay(),\n      text: (d) => d.date.getUTCDate(),\n      fontSize: 8,\n      pointerEvents: \"none\"\n    };\n\n    // default title\n    if (title === undefined) {\n      const values = Plot.valueof(data, value);\n      const format = d3.format(\"~f\");\n      const formatValue = (d) => (typeof d === \"number\" ? format(d) : d);\n      title = Plot.valueof(data, (d, i) =>\n        d.foreground\n          ? `${new Intl.DateTimeFormat(locale, { timeZone: \"UTC\" }).format(\n              d.date\n            )}: ${formatValue(values[i])}`\n          : undefined\n      );\n    }\n\n    const p = Plot.plot({\n      width,\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: W === \"H\" ? 70 : 40,\n      height,\n      facet: {\n        data,\n        y:\n          W === \"H\"\n            ? (d) =>\n                `${d.date.getUTCFullYear()} H${\n                  d.date.getUTCMonth() < 6 ? \"1\" : \"2\"\n                }`\n            : (d) => `${d.date.getUTCFullYear()}`\n      },\n      y: {\n        // -2/-1 is for the legend/week number, 0=Sun, 1=Mon… 6=Sat\n        domain: weekNumber ? [-2, -1, ...daysToShow] : [-1, ...daysToShow],\n        tickFormat: (day) =>\n          day < 0 ? \"\" : dayFormat(d3.isoParse(`2000-02-2${day}`)),\n        tickSize: 0\n      },\n      x: { axis: null },\n      fy: { reverse: true, axis: null, ...fy },\n      color,\n      marks: [\n        // cells\n        [\n          colors.base &&\n            Plot.barX(data, {\n              filter: \"background\",\n              ...barOptions,\n              fill: colors.base\n            }),\n          Plot.barX(data, {\n            filter: \"foreground\",\n            ...barOptions,\n            fill,\n            title\n          }),\n          colors.today &&\n            Plot.barX(data, {\n              filter: (d) => +d.date === +today,\n              ...barOptions,\n              fill: \"none\",\n              stroke: colors.today\n            })\n        ],\n\n        // labels\n        [\n          Plot.text(data, {\n            filter: \"background\",\n            ...textOptions,\n            fill: \"black\"\n          }),\n          Plot.text(data, {\n            filter: \"foreground\",\n            ...textOptions,\n            fill: textFill\n          })\n        ],\n\n        // years and months\n        [\n          Plot.text(\n            data,\n            Plot.selectMinX({\n              filter: (d) => d.date.getUTCDay() === weekStart,\n              x: (d) => weekX(d.date),\n              y: weekNumber ? -2 : -1,\n              text: (d) => monthFormat(d.date),\n              z: (d) => d.date.getUTCMonth()\n            })\n          ),\n          Plot.text(\n            data,\n            Plot.selectFirst({\n              sort: \"date\",\n              x: 0,\n              y: weekNumber ? -2 : -1,\n              text:\n                W === \"H\"\n                  ? (d) =>\n                      d.date.getUTCFullYear() +\n                      (d.date.getUTCMonth() < 6 ? \" H1\" : \"H2\")\n                  : (d) => `${d.date.getUTCFullYear()}`,\n              textAnchor: \"end\",\n              fontWeight: \"bold\",\n              dx: -14\n            })\n          )\n        ],\n\n        // week numbers\n        weekNumber\n          ? Plot.text(\n              data,\n              Plot.selectFirst({\n                filter: (d) => d.date.getUTCDay() === (weekStart + 6) % 7,\n                x: (d) => weekX(d.date),\n                y: -1,\n                text: (d) => weekNumberFormat(d.date),\n                fontSize: 7,\n                fill: \"grey\",\n                z: (d) => weekNumberFormat(d.date)\n              })\n            )\n          : null\n      ]\n    });\n\n    p.appendChild(html`<style>.plot text { pointer-events: none }`);\n    return p;\n  };\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`*Many thanks to [Martien van Steenbergen](/@martien) and [Fati CHEN](/@stardisblue) for the suggestions on weekStart and weekNumber. This is much harder that it seems!*`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"import { howto }  from 'd3-charts/calendar-component/7a9e12f9fb3d8e06'","pinCode":false}}}],"version":"2.19.1"}
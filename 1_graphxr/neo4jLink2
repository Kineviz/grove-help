{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"_graph.nodes ","pinCode":false,"dname":"adea2f42-db12-4ad8-8f00-9d36981fc84b","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"viewof button = Inputs.button(\"Refresh\", {\n  reduce: () => {\n    actions.variable(actions.types.REFRESH_GRAPH, [], () => {\n      return window.graphxrApi;\n    });\n  },\n})","pinCode":false,"dname":"f09834e9-8330-46bb-955a-0d640a56980b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof neo4jCondition = render(({ useSetter }) => {\n  const [neo4jCategory, setNeo4jCategory] = useState(labels[0]);\n  const [properties, setProperties] = useState(propertiesMap[neo4jCategory]);\n  if (!neo4jCategory) {\n    return jsx`<div>loading...</div>`;\n  }\n  useSetter({ neo4jCategory, properties });\n  return jsx`<div className=\"d-flex flex-wrap align-items-center flex-gap\">\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>Neo4j  Category</label>\n      <select className=\"oi-3a86ea-input\" value='${neo4jCategory}' \n      onChange=${(e) => {\n        let neo4jCategoryTmp = e.target.value;\n        setNeo4jCategory(neo4jCategoryTmp);\n        setProperties(propertiesMap[neo4jCategoryTmp]);\n      }}>\n      ${_.map(labels, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n  </div>`;\n})","pinCode":false,"dname":"bf2f3f0b-1977-4315-a939-8f0b8c9cf41d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"function createObj() {\n  let csvCategory = categoriesExceptLabels[0];\n  if (!csvCategory) {\n    return { id: uuid.v4() };\n  }\n  let csvProperties = csvPropertiesMap[csvCategory];\n  return {\n    id: uuid.v4(),\n    logic: logics[0],\n    neo4jProperty: neo4jCondition.properties[0],\n    csvCategory: csvCategory,\n    csvProperties: csvPropertiesMap[csvCategory],\n    csvProperty: csvProperties[0],\n    ignoreCase: true,\n  };\n}","pinCode":false,"dname":"e791b718-43c7-42a5-97b7-4418e723c74b","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"viewof conditions = render(({ useSetter }) => {\n  const [arr, setArr] = useState(\n    _.map(Array(1), () => {\n      return createObj();\n    })\n  );\n  useSetter({ arr });\n  useEffect(() => {\n    if (!_csv_nodes.length) {\n      setArr(\n        _.map(Array(1), () => {\n          return createObj();\n        })\n      );\n    } else if (arr.length === 1 && _.isEqual(_.keys(arr[0]), [\"id\"])) {\n      setArr(\n        _.map(Array(1), () => {\n          return createObj();\n        })\n      );\n    } else {\n      let arrT = _.reduce(\n        arr,\n        (p, o, i) => {\n          if (\n            !_.isEqual(_.keys(o), [\"id\"]) &&\n            ~categoriesExceptLabels.indexOf(o.csvCategory)\n          ) {\n            p.push(o);\n          }\n          return p;\n        },\n        []\n      );\n      if(!_.isEqual(arrT,arr)){\n        setArr(arr)\n      }\n    }\n  }, [_csv_nodes]);\n  return jsx`<div className=\"d-flex flex-column flex-gap\">\n      ${_.map(arr, (obj, index) => {\n        const {\n          id,\n          logic,\n          neo4jProperty,\n          csvCategory,\n          csvProperty,\n          csvPropertyValue,\n          ignoreCase,\n        } = obj;\n        return jsx`<div className=\"d-flex align-items-center flex-gap  flex-wrap\" key=${\n          obj.id\n        }>\n        <${CsvComponent} csvDatas=${_csv_nodes} index=${index} \n        id=${id} logic=${logic} neo4jProperty=${neo4jProperty} csvCategory=${csvCategory} csvProperty=${csvProperty} csvPropertyValue=${csvPropertyValue} ignoreCase=${ignoreCase} \n        properties=${neo4jCondition.properties} useSetter=${(obj) => {\n          arr[index] = obj;\n          setArr(arr);\n        }} />\n        <button className=\"btn-danger\" onClick=${(e) => {\n          let arrT = _.clone(arr);\n          arrT.splice(index, 1);\n          setArr(arrT);\n        }}>Remove</button>\n        </div>`;\n      })}\n      <div className=\"d-flex flex-row flex-gap\">\n          <button className=\"btn-primary\" onClick=${(e) => {\n            let arrT = _.reduce(\n              arr,\n              (p, o, i) => {\n                if (\n                  !_.isEqual(_.keys(o), [\"id\"]) &&\n                  ~categoriesExceptLabels.indexOf(o.csvCategory)\n                ) {\n                  p.push(o);\n                }\n                return p;\n              },\n              []\n            );\n            let obj = createObj();\n            if (arrT.length > 0) {\n              arrT.splice(arrT.length, 0, obj);\n            } else {\n              arrT.push(obj);\n            }\n            setArr(arrT);\n          }}>Add Condition</button>\n          <!--<button className=\"btn-primary\" onClick={}>Run</button>-->\n      </div>\n    </div>`;\n})","pinCode":false,"dname":"90da1a80-ded0-4adb-8510-b22de2c8298f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"CsvComponent = component(\n  ({ csvDatas, index, id, properties, useSetter, ...propsa }) => {\n    const [logic, setLogic] = useState(propsa.logic);\n    const [neo4jProperty, setNeo4jProperty] = useState(\n      propsa.neo4jProperty\n    );\n    const [csvCategory, setCsvCategory] = useState(\n      propsa.csvCategory\n    );\n    if (!csvCategory) {\n      return jsx`<div>There is no category that's not belong to Neo4j can be selected.</div>`;\n    }\n    const [csvProperties, setCsvProperties] = useState(\n      csvPropertiesMap[csvCategory]\n    );\n    const [csvProperty, setCsvProperty] = useState(\n      propsa.csvProperty\n    );\n    const [ignoreCase, setIgnoreCase] = useState(propsa.ignoreCase);\n    let nodes = _.filter(csvDatas, (n) => n.data.detail.type === csvCategory);\n    let csvPropertyValuesTmp = _.uniq(\n      nodes.map((n) => {\n        return n.data.detail.data[csvProperty];\n      })\n    );\n    const [csvPropertyValues, setCsvPropertyValues] = useState(\n      csvPropertyValuesTmp\n    );\n    const [csvPropertyValue, setCsvPropertyValue] = useState(\n      undefined === propsa.csvPropertyValue ? csvPropertyValues[0] : propsa.csvPropertyValue\n    );\n    const [csvNodes, setCsvNodes] = useState(\n      _.filter(nodes, (n) => {\n        return n.data.detail.data[csvProperty] === csvPropertyValue;\n      })\n    );\n    const [propertyValueType, setPropertyValueType] = useState(\n      getValueType(csvPropertyValues)\n    );\n    const [matching, setMatching] = useState(\n      propsa.matching || _.keys(matchingsMap[propertyValueType])[0]\n    );\n    useSetter({\n      id,\n      logic,\n      neo4jProperty,\n      propertyValueType,\n      matching,\n      csvCategory,\n      csvProperty,\n      csvPropertyValue,\n      csvNodes,\n      ignoreCase,\n    });\n    let radioFunc = (e) => {};\n    return jsx`<div className=\"d-flex flex-wrap align-items-center flex-gap\">\n  ${\n    !!index &&\n    jsx`<div className=\"d-flex align-items-center flex-gap\">\n        ${_.map(logics, (L, I) => {\n          return jsx`<label key=${I}><input type=\"radio\" name=${\n            \"radio_input\" + index\n          } value=\"${L}\" checked=${logic == L}\n         onChange=${(e) => {\n           setLogic(e.target.value);\n         }}/>${L}</label>`;\n        })}\n    </div>`\n  }\n  <div className=\"d-flex align-items-center flex-gap\">\n      <label>Neo4j Property</label>\n      <select className=\"oi-3a86ea-input\" value='${neo4jProperty}' \n      onChange=${(e) => setNeo4jProperty(e.target.value)}>\n      ${_.map(properties, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </d>\n   <div className=\"d-flex align-items-center flex-gap\">\n      <label>Matching</label>\n      <select className=\"oi-3a86ea-input\" value='${matching}' \n      onChange=${(e) => setMatching(e.target.value)}>\n      ${_.map(_.keys(matchingsMap[propertyValueType]), (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>CSV  Category</label>\n      <select className=\"oi-3a86ea-input\" value='${csvCategory}' \n      onChange=${(e) => {\n        let csvCategoryTmp = e.target.value;\n        setCsvCategory(csvCategoryTmp);\n        setCsvProperties(csvPropertiesMap[csvCategoryTmp]);\n        let csvPropertyTmp = csvPropertiesMap[csvCategoryTmp][0];\n        setCsvProperty(csvPropertyTmp);\n        nodes = _.filter(\n          csvDatas,\n          (n) => n.data.detail.type === csvCategoryTmp\n        );\n        let csvPropertyValuesTmp = _.uniq(\n          nodes.map((n) => {\n            return n.data.detail.data[csvPropertyTmp];\n          })\n        );\n        setCsvPropertyValues(csvPropertyValuesTmp);\n        setCsvPropertyValue(csvPropertyValuesTmp[0]);\n        setCsvNodes(\n          _.filter(nodes, (n) => {\n            return (\n              n.data.detail.data[csvPropertyTmp] === csvPropertyValuesTmp[0]\n            );\n          })\n        );\n        let propertyValueTypeTmp = getValueType(csvPropertyValuesTmp);\n        setPropertyValueType(propertyValueTypeTmp);\n        setMatching(_.keys(matchingsMap[propertyValueTypeTmp])[0]);\n      }}>\n      ${_.map(categoriesExceptLabels, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>CSV Property</label>\n      <select className=\"oi-3a86ea-input\" value='${csvProperty}' \n      onChange=${(e) => {\n        let csvPropertyTmp = e.target.value;\n        setCsvProperty(csvPropertyTmp);\n        nodes = _.filter(csvDatas, (n) => n.data.detail.type === csvCategory);\n        let csvPropertyValuesTmp = _.uniq(\n          nodes.map((n) => {\n            return n.data.detail.data[csvPropertyTmp];\n          })\n        );\n        setCsvPropertyValues(csvPropertyValuesTmp);\n        setCsvPropertyValue(csvPropertyValuesTmp[0]);\n        setCsvNodes(\n          _.filter(nodes, (n) => {\n            return (\n              n.data.detail.data[csvPropertyTmp] === csvPropertyValuesTmp[0]\n            );\n          })\n        );\n        let propertyValueTypeTmp = getValueType(csvPropertyValuesTmp);\n        setPropertyValueType(propertyValueTypeTmp);\n        setMatching(_.keys(matchingsMap[propertyValueTypeTmp])[0]);\n      }}>\n      ${_.map(csvProperties, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>CSV Property Value</label>\n      <select  className=\"oi-3a86ea-input ${\n        obo ? \"disabled\" : \"\"\n      }\" value='${csvPropertyValue}' \n      onChange=${(e) => {\n        let csvPropertyValueTmp =\n          propertyValueType === \"string\" ? e.target.value : +e.target.value;\n        setCsvPropertyValue(csvPropertyValueTmp);\n        setCsvNodes(\n          _.filter(nodes, (n) => {\n            return n.data.detail.data[csvProperty] === csvPropertyValueTmp;\n          })\n        );\n      }}>\n      ${_.map(csvPropertyValues, (label) => {\n        return jsx`<option disabled=${obo} key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap ${\n      propertyValueType === \"string\" ? \"\" : \"hide\"\n    }\">\n    \t<label>Ignore Case</label>\n        <input className=\"oi-3a86ea-input\" type=\"checkbox\" checked=${ignoreCase}\n        onChange=${(e) => {\n          setIgnoreCase(e.target.checked);\n        }} />\n    </div>\n  </div>`;\n  }\n)","pinCode":false,"dname":"6dd7495d-a9ea-4eec-8117-68d8e9cbb933","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"render(({}) => {\n  return jsx`<button className=\"btn-primary\" onClick=${async (e) => {\n    if (!obo) {\n      if (!cypher) {\n        return;\n      }\n      let queryResult = await getQueryResult();\n      if (step) {\n        stepRenderFunc(undefined, queryResult);\n      } else {\n        await gxr.neo4j(cypher).then(() => {\n          setTimeout(() => {\n            genRelations(undefined, queryResult);\n          }, 1500);\n        });\n      }\n    } else {\n      let oboQueryResults = await getOboQueryResults();\n      if (!oboQueryResults.length) {\n        return;\n      }\n      if (step) {\n        _.each(oboQueryResults, ({ csvNode, qr }) => {\n          stepRenderFunc(csvNode, qr);\n        });\n      } else {\n        _.each(oboQueryResults, ({ csvNode, cp, qr }) => {\n          renderTask.submitTask((callback) => {\n            gxr.neo4j(cp).then(() => {\n              setTimeout(() => {\n                genRelations(csvNode, qr);\n                callback();\n              }, 1500);\n            });\n          });\n        });\n      }\n    }\n  }}>Run To Render graph</button>`;\n})","pinCode":false,"dname":"58c0a4af-0de7-4619-939b-f48617bc77bc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof obo = Inputs.toggle({label: \"One By One\", value: true})","pinCode":false,"dname":"5959b680-ef94-4057-8cf9-7b37edd0e0b4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof step = Inputs.toggle({label: \"Step\", value: true})","pinCode":false,"dname":"f684fc5c-be37-49a9-a576-5782bdac9f8a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof speed = Inputs.range([50, 5000], {label: \"Speed\", step: 10,value:100})","pinCode":false,"dname":"e7894d60-2ebe-4678-b201-14d8f6daaab2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"getQueryResult = async function() {\n  if (!cypher) {\n    return undefined;\n  }\n  try {\n    let res = await gxr.neo4j(cypher, { saveToGraph: false });\n    let arr = res._content.data;\n    return arr;\n  } catch (e) {\n    throw  new Error(e);\n  }\n}","pinCode":false,"dname":"5a4e637d-7533-4e85-9bce-c7ee1da5c245","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"getOboQueryResults = async function () {\n  let oboRunCyphers = getOboRunCyphers();\n  if (!oboRunCyphers || oboRunCyphers.length === 0) {\n    return [];\n  }\n  let promiseList = _.map(oboRunCyphers, (oboCy) => {\n    return (async () => {\n      try {\n        let res = await gxr.neo4j(oboCy.cp, { saveToGraph: false });\n        let arr = res._content.data;\n        return { csvNode: oboCy.n, qr: arr, cp: oboCy.cp };\n      } catch (e) {\n        throw new Error(e);\n      }\n    })();\n  });\n  return await Promise.all(promiseList);\n}","pinCode":false,"dname":"bd143669-5a80-47b0-b811-d17fe4fd3238","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"getOboRunCyphers = function() {\n  const { neo4jCategory } = neo4jCondition;\n  if (\n    conditions.arr.length === 0 ||\n    _.filter(conditions.arr, (o) => {\n      return _.keys(o).length === 1;\n    }).length > 0\n  ) {\n    return [];\n  }\n  let selectedNodes = getSelectedNodes();\n  let ret = _.map(selectedNodes, (n) => {\n    let cp =\n      _.reduce(\n        conditions.arr,\n        (p, cond, index) => {\n          const {\n            logic,\n            neo4jProperty,\n            propertyValueType,\n            matching,\n            csvCategory,\n            csvProperty,\n            ignoreCase,\n          } = cond;\n          let csvPropertyValue = n.data.detail.data[csvProperty];\n          if (index) {\n            p += logic;\n          }\n          if (\n            propertyValueType === \"string\" ||\n            ~[\"contains\", \"like\"].indexOf(matching)\n          ) {\n            p += ` ${\n              ignoreCase\n                ? `tolower(toString(n.${neo4jProperty}))`\n                : `toString(n.${neo4jProperty})`\n            } ${matchingsMap[propertyValueType][matching]} ${\n              ignoreCase\n                ? `tolower('${csvPropertyValue}')`\n                : `'${csvPropertyValue}'`\n            }\\n`;\n          } else {\n            p += ` ${`n.${neo4jProperty}`} ${\n              matchingsMap[propertyValueType][matching]\n            } ‘${csvPropertyValue}‘\\n`;\n          }\n          return p;\n        },\n        `MATCH (n:${neo4jCategory}) \nWHERE `\n      ) + \" RETURN n\";\n    return { n, cp };\n  });\n  return ret;\n}","pinCode":false,"dname":"9e33793e-1697-4738-ae53-8f817128e0f3","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"cypher = {\n  const { neo4jCategory } = neo4jCondition;\n  if (\n    conditions.arr.length === 0 ||\n    _.filter(conditions.arr, (o) => {\n      return _.keys(o).length === 1;\n    }).length > 0\n  ) {\n    return \"\";\n  }\n  return (\n    _.reduce(\n      conditions.arr,\n      (p, cond, index) => {\n        const {\n          logic,\n          neo4jProperty,\n          propertyValueType,\n          matching,\n          csvCategory,\n          csvProperty,\n          csvPropertyValue,\n          csvPropertyValues,\n          ignoreCase,\n        } = cond;\n        if (index) {\n          p += logic;\n        }\n        if (\n          propertyValueType === \"string\" ||\n          ~[\"contains\", \"like\"].indexOf(matching)\n        ) {\n          p += ` ${\n            ignoreCase\n              ? `tolower(toString(n.${neo4jProperty}))`\n              : `toString(n.${neo4jProperty})`\n          } ${matchingsMap[propertyValueType][matching]} ${\n            ignoreCase\n              ? `tolower('${csvPropertyValue}')`\n              : `'${csvPropertyValue}'`\n          }\\n`;\n        } else {\n          p += ` ${`n.${neo4jProperty}`} ${\n            matchingsMap[propertyValueType][matching]\n          } ${csvPropertyValue}\\n`;\n        }\n        return p;\n      },\n      `MATCH (n:${neo4jCategory}) \nWHERE `\n    ) + \" RETURN n\"\n  );\n}","pinCode":false,"dname":"c685da03-d0fb-48d9-ae83-4d9a6d417932","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"neo4jCondition","pinCode":false,"dname":"78465ab8-5352-4728-b896-77f2d7583b5d","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"conditions.arr","pinCode":false,"dname":"94ad13e6-9e5b-45c8-b787-4f3b2ea003a3","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"graph = window.opener._drawing.graph","pinCode":false,"dname":"bd41d70f-6cdb-473f-93ed-403a6dd425cd","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"getSelectedNodes = function  () {\n  let selectedNodes = _.filter(\n    graph.nodes,\n    (n) => n.selected && !~labels.indexOf(n.data.detail.type)\n  );\n  return selectedNodes.length\n    ? selectedNodes\n    : _.filter(graph.nodes, (n) => !~labels.indexOf(n.data.detail.type));\n}","pinCode":false,"dname":"7f26dd78-30c1-4413-8983-afe855937dd6","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"_csv_nodes = _.filter(_graph.nodes, (n) => !~labels.indexOf(n.data.detail.type))","pinCode":false,"dname":"fe461b6e-d915-4a82-b1f7-2156c2a10036","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Node = window.opener._GXR.Node","pinCode":false,"dname":"d999c2bb-c182-4192-84c5-2ff567a1ba72","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"randomizeNodePosition = function (node) {\n  node.position.x = Math.random() - 0.5;\n  node.position.y = Math.random() - 0.5;\n  node.position.z = Math.random() - 0.5;\n}","pinCode":false,"dname":"06e8ff6a-27d8-4e7b-85b5-e23441873c41","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"stepRenderFunc = function (csvNode, qr) {\n  if (!qr || !qr.nodes || qr.nodes.length == 0) {\n    return;\n  }\n  let sourceNodes = _.map(qr.nodes, (n) => {\n    return graph.getNodeById(n.id);\n  });\n  let conds = conditions.arr;\n  for (let j = 0; j < sourceNodes.length; j++) {\n    let source = sourceNodes[j];\n    if (!source) {\n      let n = qr.nodes[j];\n      let label = n.labels.join(\"_\");\n      let node = graph.getNodeById(n.id);\n      if (!node) {\n        node = new Node(n.id);\n      }\n      node.data.detail = { type: label, data: n.properties };\n      node.color.setStyle(TypeColor.getColorByType(label));\n      randomizeNodePosition(node);\n      renderTask.submitTask((callback) => {\n        graph.addNode(node);\n        setTimeout(callback, speed);\n      });\n      source = node;\n    }\n    for (let i = 0; i < conds.length; i++) {\n      let condition = conds[i];\n      const { logic, propertyValueType, matching, ignoreCase } = condition;\n      let targetNodes = csvNode ? [csvNode] : condition.csvNodes;\n      for (let k = 0; k < targetNodes.length; k++) {\n        let target = targetNodes[k];\n        if (source && target) {\n          renderTask.submitTask((callback) => {\n            graph.addEdge(\n              source,\n              target,\n              _.assign(\n                { name: \"LINK_TO\" },\n                {\n                  properties: {\n                    logic,\n                    propertyValueType,\n                    matching,\n                    ignoreCase,\n                  },\n                }\n              )\n            );\n            setTimeout(callback, speed);\n          });\n        }\n      }\n    }\n  }\n}","pinCode":false,"dname":"4c3a9754-1e5e-43f7-be4b-4989c99892af","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"genRelations = function (csvNode, qr) {\n  if (!qr || !qr.nodes || qr.nodes.length == 0) {\n    return;\n  }\n  let sourceNodes = _.map(qr.nodes, (n) => {\n    return graph.getNodeById(n.id);\n  });\n  let conds = conditions.arr;\n  for (let i = 0; i < conds.length; i++) {\n    let condition = conds[i];\n    const { logic, propertyValueType, matching, ignoreCase } = condition;\n    let targetNodes = csvNode ? [csvNode] : condition.csvNodes;\n    for (let j = 0; j < sourceNodes.length; j++) {\n      let source = sourceNodes[j];\n      if (!source) {\n        continue;\n      }\n      for (let k = 0; k < targetNodes.length; k++) {\n        let target = targetNodes[k];\n        if (source && target) {\n          graph.addEdge(\n            source,\n            target,\n            _.assign(\n              { name: \"LINK_TO\" },\n              { properties: { logic, propertyValueType, matching, ignoreCase } }\n            )\n          );\n        }\n      }\n    }\n  }\n}","pinCode":false,"dname":"f7ca1283-4cb8-4e0e-a6d4-1e5558267446","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"viewof select_labels=Inputs.table(Lables, {required:false})","pinCode":false,"dname":"c9d2398c-601e-4c10-9971-1dcddff57b89","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${select_labels.map(l=>l.label)}`,{\n  reduce: async ()=>{\n    const whereClause = select_labels\n      .map(l=>l.label)\n      .map(label => `n:${label}`).join(' OR ');\n    const query =`match (n) WHERE ${whereClause} RETURN n`\n    console.log(query)\n    await gxr.neo4j(query)\n  }, \n  disabled:select_labels.length==0\n})","pinCode":false,"dname":"d4efe7e9-e71c-4643-9151-b599157e7fd2","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Relationships = {\n  let res = await gxr.neo4j(`MATCH ()-[r]->()\nRETURN type(r) AS relationshipType, count(r) as cnt\n`, {saveToGraph: false})\n  let arr= res.data\n  arr.shift()\n  return arr.map(elem=>({relationship:elem[0], count:elem[1].low}))\n}","pinCode":false,"dname":"91e2d8ee-1096-4ad1-bd30-86bc8408d0d9","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"viewof relationships = Inputs.table(Relationships, { required: false })","pinCode":false,"dname":"d0f47f6d-4ef2-4b82-bbd8-89d023bf6c3c","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${relationships.map(r=>r.relationship)}`, {\n  reduce: async ()=>{\n    const whereClause = relationships\n      .map(l=>l.relationship)\n      .map(rel => `r:${rel}`).join(' OR ');\n    const query =`match (n)-[r]->(m) WHERE ${whereClause} RETURN *`\n    console.log(query)\n    await gxr.neo4j(query)\n  },\n  disabled: relationships.length==0\n})","pinCode":false,"dname":"8588488a-1ff0-44cf-9ac6-64c62ff5bebc","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"matchingsMap = {\n  return {\n    string: { contains: \"CONTAINS\", equal: \"=\", like: \"LIKE\" },\n    number: {\n      contains: \"CONTAINS\",\n      like: \"LIKE\",\n      \"=\": \"=\",\n      \"<>\": \"<>\",\n      \"<\": \"<\",\n      \"<=\": \"<=\",\n    },\n  };\n}","pinCode":false,"dname":"f61ca3bf-b409-4ec0-9737-3ef71d9f7158","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"logics = [\"AND\", \"OR\"]","pinCode":false,"dname":"518c8b59-0d94-4ab3-88bb-2529c81a92a7","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function getValueType(values) {\n  let maxs = { string: 0, number: 0 };\n  _.each(values, (value) => {\n    if (~[\"number\", \"string\"].indexOf(typeof value)) {\n      maxs[typeof value]++;\n    }\n  });\n  return maxs.string > maxs.number ? \"string\" : \"number\";\n}","pinCode":false,"dname":"6c509d2a-73d3-4061-8ff2-0ec1597adf29","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"categoriesExceptLabels = {\n  return _.uniq(_csv_nodes.map((n) => n.data.detail.type));\n}","pinCode":false,"dname":"7ffbaebf-02dc-4495-aa9e-0b6e75dd7af0","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"labels = _.reduce(\n  Lables,\n  (prev, L) => {\n    prev.push(L.label);\n    return prev;\n  },\n  []\n)","pinCode":false,"dname":"d9af906c-6da7-46b3-9992-f06db42c3878","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Lables = {\n  let res = await gxr.neo4j(\n    `MATCH (n)\nRETURN labels(n) AS label, count(n) as cnt`,\n    { saveToGraph: false }\n  );\n  let arr = res._content.data;\n  arr.shift();\n  return arr.map((elem) => ({ label: elem[0][0], count: elem[1].low }));\n}","pinCode":false,"dname":"c23036a7-c3de-47f6-9266-e0c968eaaebc","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"refreshGraphElement = html`<div>refresh</div>`","pinCode":false,"dname":"96eba888-6439-4b26-acfe-5b707f60bf24","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"_graph = Generators.observe((next) => {\n  // Yield the input’s initial value.\n  next( window.opener._drawing.graph);\n  // Define an event listener to yield the input’s next value.\n  const refresh_graph = () => next( window.opener._drawing.graph);\n  actions.inspector(\n    refreshGraphElement,\n    [actions.types.REFRESH_GRAPH],\n    refresh_graph\n  )// When the generator is disposed, detach the event listener.\n  return () => {\n    actions.deleteCache(refreshGraphElement);\n    console.log(\"remove refresh graph listener\");\n    renderTask.clearTasks();\n  };\n})","pinCode":false,"dname":"076a1baa-db0d-40b0-82d6-e70eea74217e","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"---","pinCode":false,"dname":"5b9e9f26-4678-4677-ae35-e2910d5270d7","codeMode":"markdown","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"csvPropertiesMap = {\n  let promiseMap = {};\n  _.map(_csv_nodes, (n) => {\n    let type = n.data.detail.type;\n    if (!~labels.indexOf(type)) {\n      if (!promiseMap[type]) {\n        promiseMap[type] = {};\n      }\n      _.each(n.data.detail.data, (value, key) => {\n        if (undefined === promiseMap[type][key]) {\n          promiseMap[type][key] = value;\n        }\n      });\n    }\n  });\n  return _.reduce(\n    promiseMap,\n    (prev, obj, k) => {\n      prev[k] = _.keys(obj);\n      return prev;\n    },\n    {}\n  );\n}","pinCode":false,"dname":"2e38c38a-aacf-41e7-aea1-fab15bebf5a1","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"propertiesMap= {\n  let promiseMap= {};\n  for(let i =0;i<labels.length;i++){\n     let res = await gxr.neo4j(`MATCH (p:${labels[i]})  RETURN keys(p);`, {\n      saveToGraph: false,\n    });\n    let arr = res._content.data;\n    promiseMap[labels[i]]= Array.from(\n      _.reduce(\n        arr.slice(1),\n        (p, o) => {\n          _.each(o[0], (v) => {\n            p.add(v);\n          });\n          return p;\n        },\n        new Set()\n      )\n    );\n  }\n  return promiseMap;\n}","pinCode":false,"dname":"74dfa25b-afd1-4150-85c6-d400f8b52176","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"import {\n  jsx,\n  render,\n  useState,\n  component,\n  useEffect,\n} from '%projects/userGuideProjectId/1_graphxr/react/react';","pinCode":false,"dname":"c65aacda-3f20-445f-8fb6-54ac465a9288","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"html`<style>\n  .codex-editor{\n   font-size:1.2em\n  }\n   label{\n   white-space: pre!important;\n  }\n  label {\n    margin-bottom: unset;\n}\n</style>`","pinCode":false,"dname":"8613e1a1-2580-4d81-9086-c34ef9c960f6","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"uuid = import('https://cdn.skypack.dev/uuid@8.3.2?min')","pinCode":false,"dname":"09f6d9d4-f22e-4786-a1b8-6c2540027d3e","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"LabelsConfig = {\nlet _share_instance = null\nreturn class {\n\n    static get collectionsPrefix() {\n        return \"Collection \";\n    }\n\n    static instance() {\n        if (_share_instance == null) {\n            _share_instance = new this()\n            return _share_instance\n        }\n\n        return _share_instance\n    }\n\n    static getLabels() {\n        return this.instance().getLabels();\n    }\n\n    static findAutoCaption(nodeData) {\n        for (const cap of ['Caption', 'caption', 'Label', 'label', 'Title', 'title', 'Name', 'name']) {\n            if (nodeData[cap]) {\n                return [cap];\n            }\n        }\n        return [];\n    }\n\n    static lableCaptions(label, nodeData) {\n        return this.instance().lableCaptions(label, nodeData);\n    }\n\n    static addConfig(config){\n        return this.instance().addConfig(config);\n    }\n\n    static getConfig(label) {\n        return this.instance().getConfig(label);\n    }\n\n    static lableCaptionsStr(label, nodeData) {\n        let captionsObj = this.lableCaptions(label, nodeData);\n        if(Object.keys(captionsObj).length === 0){\n            return null;\n        }else{\n            return Object.keys(captionsObj).map(propName => {\n                return captionsObj[propName]\n            }).join(' | ')\n        }\n    }\n\n    static lableCaptionsNodeName(node) {\n        return this.lableCaptionsStr(\n            node.data.detail.type,\n            node.data.detail.data\n            ) || node.id\n    }\n\n    constructor() {\n        this.configs = {}\n    }\n\n    rename(newName, oldName) {\n        if (this.configs[oldName]) {\n            this.configs[newName] = this.configs[oldName];\n            delete this.configs[oldName];\n        }\n    }\n\n    getLabels() {\n        return Object.keys(this.configs).filter(k=>k); // filter out faslsy label names that crept into our metadata\n    }\n\n    getLabelConfig(label) {\n        let labelConfig = this.configs[String(label)] || {label};\n         if(window.atob && labelConfig.template && (/^[0-9a-zA-Z\\=\\/\\+]+$/g).test(labelConfig.template)){\n            try {\n                labelConfig.template = window.atob(labelConfig.template)\n            } catch (error) {\n                console.error(\"template:\",error)\n            }\n         }\n        return labelConfig;\n    }\n\n    lableCaptions(label, nodeData) {\n        let config = this.getLabelConfig(label);\n        let oldCaptions = config.caption_property && config.caption_property !== '' ? [config.caption_property] : [];\n        let captions = config.captions || oldCaptions;\n        return captions.reduce((captionsObj, captionPropName) => {\n            captionsObj[captionPropName] = nodeData[captionPropName];\n            return captionsObj;\n        }, {})\n    }\n\n    init(labelConfigs) {\n        if (labelConfigs && labelConfigs instanceof Array) {\n            labelConfigs.forEach(labelConfig => {\n                if (labelConfig) {\n                    if(Array.isArray(labelConfig.captions)){\n                        labelConfig.captions = [...new Set(labelConfig.captions)];\n                    }\n                    this.addConfig(labelConfig)\n                }\n            })\n        }\n    }\n\n    getInvisibleLabels() {\n        let invisible = []\n        Object.keys(this.configs).forEach(name => {\n            if (this.configs[name].visible == false) {\n                invisible.push(name)\n            }\n        })\n\n        return invisible\n    }\n\n    addConfig(config) {\n        //\"hiddenConfig\" can not allow overwrite, it only from config.js\n        let hiddenConfig = Object.assign(this.configs[config.label]?.hiddenConfig || {}, config.hiddenConfig || {} );\n        config.hiddenConfig = hiddenConfig;\n        this.configs[config.label] = config\n    }\n\n    getConfig(label){\n      return this.configs[label] || {\n        \"captions\" : [],\n        \"avatar_property\" : \"\",\n        \"size_property\" : \"\",\n        \"label\" : label,\n        \"background_color\" : \"\",\n        \"icon\" : \"\",\n        \"caption_color\" : \"\",\n        \"template\" :\"\",\n        \"visible\" : true,\n        \"properties\" : {},\n        \"hidden\": {},\n        \"hiddenConfig\":{},\n        \"order\": []\n      }\n    }\n\n    updateLabel(config) {\n        //\"hiddenConfig\" can not allow overwrite, it only from config.js\n        let hiddenConfig = Object.assign(this.configs[config.label]?.hiddenConfig || {}, config.hiddenConfig || {} );\n        config.hiddenConfig = hiddenConfig;\n        this.configs[config.label] = Object.assign(this.getConfig(config.label), config, { isUserAction: true })\n    }\n\n    deleteLabel(label) {\n        delete this.configs[label];\n    }\n}\n}","pinCode":false,"dname":"2ad3f9af-9244-4f45-b0fc-f494753ee145","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"TypeColor = \nclass  {\n    \n    static get colors(){\n        return colors;\n    }\n\n    static getColorByType(type) {\n        let customConfig = LabelsConfig.instance().getLabelConfig(type);\n        if (customConfig && customConfig.background_color) {\n            return customConfig.background_color\n        } else {\n            const color = this.autoGenerateColor(type);\n            LabelsConfig.instance().updateLabel({ label: type, background_color: color });\n            return color;\n        }\n    }\n\n    static rename(newType, oldType) {\n        \n    }\n    static clear() {\n        \n    }\n\n    static deleteLabel(label) {\n        \n    }\n\n    static updateColor(type, color) {\n        LabelsConfig.instance().updateLabel({ label: type, background_color: color });\n    }\n\n    static get labels() {\n        return LabelsConfig.instance().getLabels().sort((a, b) => a > b ? 1 : -1);\n    }\n\n    static autoGenerateColor(type) {\n\n        // 1. emtpy type use default color\n        if (!type || type == '') {\n            return '#ffffff';\n        }\n\n        // 2. Remark type use special color\n        if (type == 'Remark') {\n            return '#e67e22';\n        }\n\n        /*\n        // 3. Mutipler type,  e.g.  tag1:tag2, use tag1 as color type\n        if ((/\\:/ig).test(type)) {\n\n            let types = type.split(':')\n            if (types.length > 0 && !this.colorMap[type]) {\n                let color = \"#FFFFFF\"\n                types.forEach(subType => {\n                    let subTypeColor = this.colorMap[subType] ? this.colorMap[subType] : \"#ffffff\"\n                    color = this.avgcolor(color, subTypeColor)\n                });\n                // this.colorMap[type] = color\n\n            }\n        } */\n\n        // try to find an unused color\n        const usedcolors = LabelsConfig.instance().getLabels().map(l => LabelsConfig.instance().getLabelConfig(l).background_color);\n        for (const color of colors) {\n            if (!usedcolors.includes(color)) {\n                return color;\n            }\n        }\n\n        // fall back to indexing\n        return colors[LabelsConfig.instance().getLabels().length % colors.length];        \n    }\n\n    static avgcolor(color1, color2) {\n        let avg = (a, b) => {\n            return (a + b) / 2;\n        },\n            t16 = (c) => {\n                return parseInt(('' + c).replace('#', ''), 16)\n            },\n            hex = (c) => {\n                return (c >> 0).toString(16)\n            },\n            hex1 = t16(color1),\n            hex2 = t16(color2),\n            r = (hex) => {\n                return hex >> 16 & 0xFF\n            },\n            g = (hex) => {\n                return hex >> 8 & 0xFF\n            },\n            b = (hex) => {\n                return hex & 0xFF\n            },\n            res = '#' + hex(avg(r(hex1), r(hex2))) +\n                hex(avg(g(hex1), g(hex2))) +\n                hex(avg(b(hex1), b(hex2)));\n        return res;\n    }\n\n    \n}\n","pinCode":false,"dname":"9123722e-c49a-4daf-9790-c2a097e0b6c8","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"colors = [\"#1f77b4\", \"#aec7e8\", \"#ff7f0e\", \"#ffbb78\", \"#2ca02c\", \"#98df8a\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#e377c2\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\",\n'#c51162','#aa00ff','#6200ea','#304ffe','#0d47a1','#00b8d4','#00bfa5','#00c853','#64dd17','#aeea00','#ffd600','#ffab00','#3e2723','#f5f687','#730068'\n]","pinCode":false,"dname":"23414154-667f-4a0b-8200-2389f5dd00f7","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"RenderTask = class {\n  constructor(waitMillis) {\n    this.waitMillis = waitMillis;\n    this.taskList = [];\n    this.runOverTask = undefined;\n    this.taskTimeout = undefined;\n  }\n  clearTasks() {\n    if (this.taskTimeout !== undefined) {\n      clearTimeout(this.taskTimeout);\n    }\n    this.taskList = [];\n    this.runOverTask = undefined;\n    this.taskTimeout = undefined;\n    console.log(\"clear tasks!\");\n  }\n  submitTask(task) {\n    if (!(typeof task === \"function\")) {\n      console.error(\"task error!\");\n      return;\n    }\n    if (this.taskTimeout !== undefined) {\n      this.taskList.push(task);\n    } else {\n      this.taskTimeout = setTimeout(() => {\n        task(this.taskCallback.bind(this));\n      }, this.waitMillis || 0);\n    }\n  }\n  async taskCallback() {\n    this.taskTimeout = undefined;\n    if (this.taskList.length > 0) {\n      let task = this.taskList.splice(0, 1)[0];\n      this.submitTask(task);\n    } else {\n      if (this.runOverTask !== undefined) {\n        setTimeout(() => {\n          this.runOverTask && this.runOverTask();\n          this.runOverTask = undefined;\n        });\n      }\n    }\n  }\n  submitRunOverTask(task) {\n    if (!(typeof task === \"function\")) {\n      console.error(\"task error!\");\n      return;\n    }\n    if (this.taskTimeout == undefined && this.taskList.length === 0) {\n      setTimeout(() => {\n        task();\n      });\n      return;\n    }\n    this.runOverTask = task;\n  }\n}","pinCode":false,"dname":"ed37ec67-e729-456b-bec5-dda035433c98","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"renderTask = {\n  let r = new RenderTask(0);\n  invalidation.then(() => r.clearTasks());\n  return r;\n}","pinCode":false,"dname":"d547e710-518a-4174-92d4-14406bdc2f5d","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"renderTask.taskList\t","pinCode":false,"dname":"9e3cc5df-5ae4-47f6-9367-2c0d2090e676","codeMode":"javascript2","hide":true}}}],"version":"2.19.1"}
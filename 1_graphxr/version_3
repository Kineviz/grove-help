{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"viewof button = Inputs.button(\"Refresh\", {\n  reduce: () => {\n    actions.variable(actions.types.REFRESH_GRAPH, [], () => {\n      return window.graphxrApi;\n    });\n  },\n})","pinCode":false,"dname":"393bf877-1050-466f-8128-250738779345","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof neo4jCondition = render(({ useSetter }) => {\n  const [neo4jCategory, setNeo4jCategory] = useState(labels[0]);\n  const [properties, setProperties] = useState(propertiesMap[neo4jCategory]);\n  const [neo4jProperty, setNeo4jProperty] = useState(properties[0]);\n  if (!neo4jCategory) {\n    return jsx`<div>loading...</div>`;\n  }\n  useSetter({ neo4jCategory, neo4jProperty });\n  return jsx`<div className=\"d-flex flex-wrap align-items-center flex-gap\">\n    <form className=\"oi-3a86ea\">\n      <label>Neo4j  Category</label>\n      <select className=\"oi-3a86ea-input\" value='${neo4jCategory}' \n      onChange=${(e) => {\n        let neo4jCategoryTmp = e.target.value;\n        setNeo4jCategory(neo4jCategoryTmp);\n        setProperties(propertiesMap[neo4jCategoryTmp]);\n        setNeo4jProperty(propertiesMap[neo4jCategoryTmp][0]);\n      }}>\n      ${_.map(labels, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </form>\n    <form className=\"oi-3a86ea\">\n      <label>Neo4j Property</label>\n      <select className=\"oi-3a86ea-input\" value='${neo4jProperty}' \n      onChange=${(e) => setNeo4jProperty(e.target.value)}>\n      ${_.map(properties, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </form>\n    \n  </div>`;\n})","pinCode":false,"dname":"580ca3f5-4121-430e-a9af-a9b8488661bd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof conditions = render(({ useSetter }) => {\n  const [count, setCount] = useState(_graph ? 1 : 1);\n  const [arr, setArr] = useState(\n    _.map(Array(count), () => {\n      return {id:uuid.v4()};\n    })\n  );\n  useSetter({ arr });\n  return jsx`<div className=\"d-flex flex-column flex-gap\">\n      ${_.map(arr, (obj, index) => {\n        return jsx`<div className=\"d-flex  flex-wrap\" key=${obj.id}>\n        <${CsvComponent} index=${index} id=${obj.id} useSetter=${(obj) => {\n          arr[index] = obj;\n          setArr(arr);\n        }} />\n        <button className=\"btn-danger text-danger\" onClick=${(e) => {\n          let arrT = _.clone(arr);\n          arrT.splice(index, 1);\n          setArr(arrT);\n        }}>Remove</button>\n        </div>`;\n      })}\n      <div className=\"d-flex flex-row flex-gap\">\n          <button className=\"btn-default\" onClick=${(e) => {\n            let arrT = _.reduce(\n              arr,\n              (p, o, i) => {\n                if (\n                  _.keys(o).length >1 &&\n                  ~categoriesExceptLabels.indexOf(o.csvCategory)\n                ) {\n                  p.push(o);\n                }\n                return p;\n              },\n              []\n            );\n            if (arrT.length > 0) {\n              arrT.splice(arrT.length - 1, 0, {id:uuid.v4()});\n            } else {\n              arrT.push({id:uuid.v4()});\n            }\n            setArr(arrT);\n          }}>Add Condition</button>\n          <!--<button className=\"btn-primary\" onClick={}>Run</button>-->\n      </div>\n    </div>`;\n})","pinCode":false,"dname":"a4b46a3d-c68f-4d5a-8605-69d2a7c248f2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({}) => {\n  return jsx`<button className=\"btn-primary\" onClick=${(e) => {\n    if (!cypher) {\n      return;\n    }\n    gxr.neo4j(cypher).then(()=>{\n      setTimeout(genRelations, 1500);\n    });\n  }}>Run To Render graph</button>`;\n})","pinCode":false,"dname":"4bb35b34-dac8-4fd8-8589-80aac8434455","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"queryResult = {\n  if (!cypher) {\n    return undefined;\n  }\n  try {\n    let res = await gxr.neo4j(cypher, { saveToGraph: false });\n    let arr = res._content.data;\n    return arr;\n  } catch (e) {\n    throw  new Error(e);\n  }\n}","pinCode":false,"dname":"61544df3-60f5-4520-bfb4-e84fb5d71273","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"cypher = {\n  const { neo4jCategory, neo4jProperty } = neo4jCondition;\n  if (\n    conditions.arr.length === 0 ||\n    _.filter(conditions.arr, (o) => {\n      return _.keys(o).length === 1;\n    }).length > 0\n  ) {\n    return \"\";\n  }\n  return (\n    _.reduce(\n      conditions.arr,\n      (p, cond, index) => {\n        const {\n          logic,\n          propertyValueType,\n          matching,\n          csvCategory,\n          csvProperty,\n          csvPropertyValue,\n          ignoreCase,\n        } = cond;\n        if (index) {\n          p += logic;\n        }\n        if (propertyValueType === \"string\") {\n          p += ` ${\n            ignoreCase ? `tolower(n.${neo4jProperty})` : `n.${neo4jProperty}`\n          } ${matchingsMap[propertyValueType][matching]} ${\n            ignoreCase\n              ? `tolower('${csvPropertyValue}')`\n              : `'${csvPropertyValue}'`\n          }\\n`;\n        } else {\n          p += ` ${`n.${neo4jProperty}`} ${\n            matchingsMap[propertyValueType][matching]\n          } ${csvPropertyValue}\\n`;\n        }\n        return p;\n      },\n      `MATCH (n:${neo4jCategory}) \nWHERE `\n    ) + \" RETURN n\"\n  );\n}","pinCode":false,"dname":"f25fda5c-2ead-44d2-b79c-46c7b53c328a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"neo4jCondition","pinCode":false,"dname":"168d4b12-a32c-43bb-97b7-1c348b38d7f4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"conditions.arr","pinCode":false,"dname":"5096ab41-4107-41b5-9790-c45e5e49d097","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"genRelations = function () {\n  if (!queryResult || !queryResult.nodes || queryResult.nodes.length == 0) {\n    return;\n  }\n  let sourceNodes = _.map(queryResult.nodes, (n) => {\n    let source = _.filter(_graph.nodes, (nn) => {\n      return nn.id === n.id;\n    })[0];\n    return source;\n  });\n  let conds = conditions.arr;\n  for (let i = 0; i < conds.length; i++) {\n    let condition = conds[i];\n    const { logic, csvPropertyType, matching, ignoreCase } = condition;\n    let targetNodes = condition.csvNodes;\n    for (let j = 0; j < sourceNodes.length; j++) {\n      let source = sourceNodes[j];\n      if (!source) {\n        continue;\n      }\n      for (let k = 0; k < targetNodes.length; k++) {\n        let target = targetNodes[k];\n        if (source && target) {\n          _graph.addEdge(\n            source,\n            target,\n            _.assign({ name: \"LINK_TO\" }, { properties:{ logic, csvPropertyType, matching, ignoreCase } })\n          );\n        }\n      }\n    }\n  }\n}","pinCode":false,"dname":"f2ebbec2-263d-4afa-962d-740454d5ca75","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof select_labels=Inputs.table(Lables, {required:false})","pinCode":false,"dname":"d489f6aa-1bf5-4f14-8c1b-f8513fad1bb8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${select_labels.map(l=>l.label)}`,{\n  reduce: async ()=>{\n    const whereClause = select_labels\n      .map(l=>l.label)\n      .map(label => `n:${label}`).join(' OR ');\n    const query =`match (n) WHERE ${whereClause} RETURN n`\n    console.log(query)\n    await gxr.neo4j(query)\n  }, \n  disabled:select_labels.length==0\n})","pinCode":false,"dname":"72eacae9-20c6-4ffd-bf8a-b72e4e7b6691","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Relationships = {\n  let res = await gxr.neo4j(`MATCH ()-[r]->()\nRETURN type(r) AS relationshipType, count(r) as cnt\n`, {saveToGraph: false})\n  let arr= res.data\n  arr.shift()\n  return arr.map(elem=>({relationship:elem[0], count:elem[1].low}))\n}","pinCode":false,"dname":"ea282a5e-1e1e-41cc-aa2d-ea5b4dcd74d2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof relationships = Inputs.table(Relationships, { required: false })","pinCode":false,"dname":"f4cdc6af-61fa-4b04-ab42-e7d8cfe3d652","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${relationships.map(r=>r.relationship)}`, {\n  reduce: async ()=>{\n    const whereClause = relationships\n      .map(l=>l.relationship)\n      .map(rel => `r:${rel}`).join(' OR ');\n    const query =`match (n)-[r]->(m) WHERE ${whereClause} RETURN *`\n    console.log(query)\n    await gxr.neo4j(query)\n  },\n  disabled: relationships.length==0\n})","pinCode":false,"dname":"dc09faf6-83eb-4561-a778-c09305e0dad6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"matchingsMap = {\n  return {\n    string: { equal: \"=\", contains: \"CONTAINS\", in: \"IN\" },\n    number: { \"=\": \"=\",\"<>\": \"<>\", \"<\": \"<\", \"<=\": \"<=\" },\n  };\n}","pinCode":false,"dname":"4e1a599c-8f21-4e91-9620-39a45f670d87","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"logics = [\"AND\", \"OR\"]","pinCode":false,"dname":"e0609bdc-d2b3-4edc-af30-3f4de47c282a","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function getValueType(values) {\n  let maxs = { string: 0, number: 0 };\n  _.each(values, (value) => {\n    if (~[\"number\", \"string\"].indexOf(typeof value)) {\n      maxs[typeof value]++;\n    }\n  });\n  return maxs.string > maxs.number ? \"string\" : \"number\";\n}","pinCode":false,"dname":"4d1e9bf7-37da-4427-b9b3-764d3229b8d3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"CsvComponent = component(({ index, id, useSetter }) => {\n  const [logic, setLogic] = useState(logics[0]);\n  const [csvCategory, setCsvCategory] = useState(categoriesExceptLabels[0]);\n  if (!csvCategory) {\n    return jsx`<div>There is no category that's not belong to Neo4j can be selected.</div>`;\n  }\n  const [csvProperties, setCsvProperties] = useState(\n    csvPropertiesMap[csvCategory]\n  );\n  const [csvProperty, setCsvProperty] = useState(csvProperties[0]);\n  const [ignoreCase, setIgnoreCase] = useState(true);\n  let nodes = _.filter(_graph_nodes, (n) => n.data.detail.type === csvCategory);\n  let csvPropertyValuesTmp = _.uniq(\n    nodes.map((n) => {\n      return n.data.detail.data[csvProperty];\n    })\n  );\n  const [csvPropertyValues, setCsvPropertyValues] = useState(\n    csvPropertyValuesTmp\n  );\n  const [csvPropertyValue, setCsvPropertyValue] = useState(\n    csvPropertyValues[0]\n  );\n  const [csvNodes, setCsvNodes] = useState(\n    _.filter(nodes, (n) => {\n      return n.data.detail.data[csvProperty] === csvPropertyValue;\n    })\n  );\n  const [propertyValueType, setPropertyValueType] = useState(\n    getValueType(csvPropertyValues)\n  );\n  const [matching, setMatching] = useState(\n    _.keys(matchingsMap[propertyValueType])[0]\n  );\n  useSetter({\n    id,\n    logic,\n    propertyValueType,\n    matching,\n    csvCategory,\n    csvProperty,\n    csvPropertyValue,\n    csvNodes,\n    ignoreCase,\n  });\n  let radioFunc = (e) => {};\n  return jsx`<div className=\"d-flex flex-wrap align-items-center flex-gap\">\n  ${\n    !!index &&\n    jsx`<div class=\"d-flex align-items-center flex-gap\">\n        <label>Logic</label>\n        ${_.map(logics, (L, I) => {\n          return jsx`<label key=${I}><input type=\"radio\" name=${\n            \"radio_input\" + index\n          } value=\"${L}\" checked=${logic == L}\n         onChange=${(e) => {\n           setLogic(e.target.value);\n         }}/>${L}</label>`;\n        })}\n    </div>`\n  }\n   <div className=\"d-flex align-items-center flex-gap\">\n      <label>Matching</label>\n      <select className=\"oi-3a86ea-input\" value='${matching}' \n      onChange=${(e) => setMatching(e.target.value)}>\n      ${_.map(_.keys(matchingsMap[propertyValueType]), (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>CSV  Category</label>\n      <select className=\"oi-3a86ea-input\" value='${csvCategory}' \n      onChange=${(e) => {\n        let csvCategoryTmp = e.target.value;\n        setCsvCategory(csvCategoryTmp);\n        setCsvProperties(csvPropertiesMap[csvCategoryTmp]);\n        let csvPropertyTmp = csvPropertiesMap[csvCategoryTmp][0];\n        setCsvProperty(csvPropertyTmp);\n        nodes = _.filter(\n          _graph_nodes,\n          (n) => n.data.detail.type === csvCategoryTmp\n        );\n        let csvPropertyValuesTmp = _.uniq(\n          nodes.map((n) => {\n            return n.data.detail.data[csvPropertyTmp];\n          })\n        );\n        setCsvPropertyValues(csvPropertyValuesTmp);\n        setCsvPropertyValue(csvPropertyValuesTmp[0]);\n        setCsvNodes(\n          _.filter(nodes, (n) => {\n            return (\n              n.data.detail.data[csvPropertyTmp] === csvPropertyValuesTmp[0]\n            );\n          })\n        );\n        let propertyValueTypeTmp = getValueType(csvPropertyValuesTmp);\n        setPropertyValueType(propertyValueTypeTmp);\n        setMatching(_.keys(matchingsMap[propertyValueTypeTmp])[0]);\n      }}>\n      ${_.map(categoriesExceptLabels, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>CSV Property</label>\n      <select className=\"oi-3a86ea-input\" value='${csvProperty}' \n      onChange=${(e) => {\n        let csvPropertyTmp = e.target.value;\n        setCsvProperty(csvPropertyTmp);\n        nodes = _.filter(\n          _graph_nodes,\n          (n) => n.data.detail.type === csvCategory\n        );\n        let csvPropertyValuesTmp = _.uniq(\n          nodes.map((n) => {\n            return n.data.detail.data[csvPropertyTmp];\n          })\n        );\n        setCsvPropertyValues(csvPropertyValuesTmp);\n        setCsvPropertyValue(csvPropertyValuesTmp[0]);\n        setCsvNodes(\n          _.filter(nodes, (n) => {\n            return (\n              n.data.detail.data[csvPropertyTmp] === csvPropertyValuesTmp[0]\n            );\n          })\n        );\n        let propertyValueTypeTmp = getValueType(csvPropertyValuesTmp);\n        setPropertyValueType(propertyValueTypeTmp);\n        setMatching(_.keys(matchingsMap[propertyValueTypeTmp])[0]);\n      }}>\n      ${_.map(csvProperties, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>CSV Property Value</label>\n      <select className=\"oi-3a86ea-input\" value='${csvPropertyValue}' \n      onChange=${(e) => {\n        let csvPropertyValueTmp =\n          propertyValueType === \"string\" ? e.target.value : +e.target.value;\n        setCsvPropertyValue(csvPropertyValueTmp);\n        setCsvNodes(\n          _.filter(nodes, (n) => {\n            return n.data.detail.data[csvProperty] === csvPropertyValueTmp;\n          })\n        );\n      }}>\n      ${_.map(csvPropertyValues, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div>${csvNodes.length} nodes</div>\n    <div className=\"d-flex align-items-center flex-gap ${\n      propertyValueType === \"string\" ? \"\" : \"hide\"\n    }\">\n    \t<label>Ignore Case</label>\n        <input className=\"oi-3a86ea-input\" type=\"checkbox\" checked=${ignoreCase}\n        onChange=${(e) => {\n          setIgnoreCase(e.target.checked);\n        }} />\n    </div>\n  </div>`;\n})","pinCode":false,"dname":"256c9a36-3509-407e-ab78-2df1621b2cf0","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"_graph.nodes","pinCode":true,"dname":"021740b1-5afa-4177-a3dc-55ae71218a74","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"_graph_nodes = {\n  let selectedNodes = _.filter(\n    _graph.nodes,\n    (n) => n.selected && !~labels.indexOf(n.data.detail.type)\n  );\n  return selectedNodes.length\n    ? selectedNodes\n    : _.filter(_graph.nodes, (n) => !~labels.indexOf(n.data.detail.type));\n}","pinCode":false,"dname":"0a099263-97cd-4706-a1dd-c4fbc4a4660f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"categoriesExceptLabels = {\n  return _.uniq(_graph_nodes.map((n) => n.data.detail.type));\n}","pinCode":false,"dname":"cc8824a4-a898-4853-8277-f47e933aebc4","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"labels = _.reduce(\n  Lables,\n  (prev, L) => {\n    prev.push(L.label);\n    return prev;\n  },\n  []\n)","pinCode":false,"dname":"99f2f95d-5f05-407f-b2e7-5b8b79ab8e08","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Lables = {\n  let res = await gxr.neo4j(\n    `MATCH (n)\nRETURN labels(n) AS label, count(n) as cnt`,\n    { saveToGraph: false }\n  );\n  let arr = res._content.data;\n  arr.shift();\n  return arr.map((elem) => ({ label: elem[0][0], count: elem[1].low }));\n}","pinCode":false,"dname":"bbc5420a-c267-4cd1-b5fe-6ed7263fd1ea","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"refreshGraphElement = html`<div>refresh</div>`","pinCode":false,"dname":"56038b13-a47a-4d3c-a708-b259345c70f1","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"_graph = Generators.observe((next) => {\n  // Yield the input’s initial value.\n  next( window.opener._drawing.graph);\n  // Define an event listener to yield the input’s next value.\n  const refresh_graph = () => next( window.opener._drawing.graph);\n  actions.inspector(\n    refreshGraphElement,\n    [actions.types.REFRESH_GRAPH],\n    refresh_graph\n  )// When the generator is disposed, detach the event listener.\n  return () => {\n    actions.deleteCache(refreshGraphElement);\n    console.log(\"remove refresh graph listener\");\n  };\n})","pinCode":false,"dname":"b933e7e0-c1b2-43bc-845b-a69cc5c64ec3","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"---","pinCode":false,"dname":"5802f135-5dd9-4233-b6e1-eeebe0553c79","codeMode":"markdown","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"csvPropertiesMap = {\n  let promiseMap = {};\n  _.map(_graph_nodes, (n) => {\n    let type = n.data.detail.type;\n    if (!~labels.indexOf(type)) {\n      if (!promiseMap[type]) {\n        promiseMap[type] = {};\n      }\n      _.each(n.data.detail.data, (value, key) => {\n        if (undefined === promiseMap[type][key]) {\n          promiseMap[type][key] = value;\n        }\n      });\n    }\n  });\n  return _.reduce(promiseMap,(prev,obj,k)=>{\n    prev[k]=_.keys(obj);\n    return prev;\n  },{});\n}","pinCode":false,"dname":"cfe67f6e-ef1e-4bff-8325-3e062b585f69","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"propertiesMap= {\n  let promiseMap= {};\n  for(let i =0;i<labels.length;i++){\n     let res = await gxr.neo4j(`MATCH (p:${labels[i]})  RETURN keys(p);`, {\n      saveToGraph: false,\n    });\n    let arr = res._content.data;\n    promiseMap[labels[i]]= Array.from(\n      _.reduce(\n        arr.slice(1),\n        (p, o) => {\n          _.each(o[0], (v) => {\n            p.add(v);\n          });\n          return p;\n        },\n        new Set()\n      )\n    );\n  }\n  return promiseMap;\n}","pinCode":false,"dname":"259bd550-c841-4447-bdfc-bfb297b3a647","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"import { jsx, render, useState, component } from '1_graphxr/react/react';","pinCode":false,"dname":"b6523976-1add-4a94-8371-3cb63b870698","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"html`<style>\n  .codex-editor{\n   font-size:1.2em\n  }\n   label{\n   white-space: pre!important;\n  }\n  label {\n    margin-bottom: unset;\n}\n</style>`","pinCode":false,"dname":"74625f1d-588e-4c24-847d-7e105c298490","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"uuid = import('https://cdn.skypack.dev/uuid@8.3.2?min')","pinCode":false,"dname":"c9a5d47b-4796-483a-b6e2-a6c28d7288dd","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"viewof button = Inputs.button(\"Refresh\", {\n  reduce: () => {\n    actions.variable(actions.types.REFRESH_GRAPH, [], () => {\n      return window.graphxrApi;\n    });\n  },\n})","pinCode":false,"dname":"83503d25-6fff-4fe6-8c6c-61962f5ec027","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof neo4jCondition = render(({ useSetter }) => {\n  const [neo4jCategory, setNeo4jCategory] = useState(labels[0]);\n  const [properties, setProperties] = useState(propertiesMap[neo4jCategory]);\n  const [neo4jProperty, setNeo4jProperty] = useState(properties[0]);\n  if (!neo4jCategory) {\n    return jsx`<div>loading...</div>`;\n  }\n  useSetter({ neo4jCategory, neo4jProperty });\n  return jsx`<div className=\"d-flex flex-wrap align-items-center flex-gap\">\n    <form className=\"oi-3a86ea\">\n      <label>Neo4j  Category</label>\n      <select className=\"oi-3a86ea-input\" value='${neo4jCategory}' \n      onChange=${(e) => {\n        let neo4jCategoryTmp = e.target.value;\n        setNeo4jCategory(neo4jCategoryTmp);\n        setProperties(propertiesMap[neo4jCategoryTmp]);\n        setNeo4jProperty(propertiesMap[neo4jCategoryTmp][0]);\n      }}>\n      ${_.map(labels, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </form>\n    <form className=\"oi-3a86ea\">\n      <label>Neo4j Property</label>\n      <select className=\"oi-3a86ea-input\" value='${neo4jProperty}' \n      onChange=${(e) => setNeo4jProperty(e.target.value)}>\n      ${_.map(properties, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </form>\n    \n  </div>`;\n})","pinCode":false,"dname":"34ad62ff-a9a4-47db-86a6-d695ddaa3277","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof conditions = render(({ useSetter }) => {\n  const [count, setCount] = useState(_graph ? 1 : 1);\n  const [arr, setArr] = useState(\n    _.map(Array(count), () => {\n      return {id:uuid.v4()};\n    })\n  );\n  useSetter({ arr });\n  return jsx`<div className=\"d-flex flex-column flex-gap\">\n      ${_.map(arr, (obj, index) => {\n        return jsx`<div className=\"d-flex  flex-wrap\" key=${obj.id}>\n        <${CsvComponent} index=${index} id=${obj.id} useSetter=${(obj) => {\n          arr[index] = obj;\n          setArr(arr);\n        }} />\n        <button className=\"btn-danger text-danger\" onClick=${(e) => {\n          let arrT = _.clone(arr);\n          arrT.splice(index, 1);\n          setArr(arrT);\n        }}>Remove</button>\n        </div>`;\n      })}\n      <div className=\"d-flex flex-row flex-gap\">\n          <button className=\"btn-default\" onClick=${(e) => {\n            let arrT = _.reduce(\n              arr,\n              (p, o, i) => {\n                if (\n                  _.keys(o).length >1 &&\n                  ~categoriesExceptLabels.indexOf(o.csvCategory)\n                ) {\n                  p.push(o);\n                }\n                return p;\n              },\n              []\n            );\n            if (arrT.length > 0) {\n              arrT.splice(arrT.length - 1, 0, {id:uuid.v4()});\n            } else {\n              arrT.push({id:uuid.v4()});\n            }\n            setArr(arrT);\n          }}>Add Condition</button>\n          <!--<button className=\"btn-primary\" onClick={}>Run</button>-->\n      </div>\n    </div>`;\n})","pinCode":false,"dname":"30cd7aad-1e56-4d73-b8a0-67f603664700","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({}) => {\n  return jsx`<button className=\"btn-primary\" onClick=${(e) => {\n    if (!cypher) {\n      return;\n    }\n    gxr.neo4j(cypher).then(()=>{\n      setTimeout(genRelations, 1000);\n    });\n  }}>Run To Render graph</button>`;\n})","pinCode":false,"dname":"74a98b5b-6231-4e94-b256-4f72c92f6b21","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"neo4jCondition","pinCode":false,"dname":"2240beb7-9076-4cb8-b5f7-595c9614ec99","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"conditions.arr","pinCode":false,"dname":"6680f6f8-840a-4f36-b17e-8de24da138c5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"queryResult = {\n  if (!cypher) {\n    return undefined;\n  }\n  try {\n    let res = await gxr.neo4j(cypher, { saveToGraph: false });\n    let arr = res._content.data;\n    return arr;\n  } catch (e) {\n    throw  new Error(e);\n  }\n}","pinCode":false,"dname":"39cff2ac-cf10-49e3-828f-2c11572ae757","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"genRelations = function () {\n  if (!queryResult || !queryResult.nodes || queryResult.nodes.length == 0) {\n    return;\n  }\n  let sourceNodes = _.map(queryResult.nodes, (n) => {\n    let source = _.filter(_graph.nodes, (nn) => {\n      return nn.id === n.id;\n    })[0];\n    return source;\n  });\n  let conds = conditions.arr;\n  for (let i = 0; i < conds.length; i++) {\n    let condition = conds[i];\n    const { logic, matching, ignoreCase } = condition;\n    let targetNodes = condition.csvNodes;\n    for (let j = 0; j < sourceNodes.length; j++) {\n      let source = sourceNodes[j];\n      if (!source) {\n        continue;\n      }\n      for (let k = 0; k < targetNodes.length; k++) {\n        let target = targetNodes[k];\n        if (source && target) {\n          _graph.addEdge(\n            source,\n            target,\n            _.assign({ name: \"LINK_TO\" }, { logic, matching, ignoreCase } )\n          );\n        }\n      }\n    }\n  }\n}","pinCode":false,"dname":"d40a685a-72fa-4aa2-9fa4-0974f59ff75f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"cypher = {\n  const { neo4jCategory, neo4jProperty } = neo4jCondition;\n  if (\n    conditions.arr.length === 0 ||\n    _.filter(conditions.arr, (o) => {\n      return _.keys(o).length===1;\n    }).length > 0\n  ) {\n    return \"\";\n  }\n  return (\n    _.reduce(\n      conditions.arr,\n      (p, cond, index) => {\n        const {\n          logic,\n          matching,\n          csvCategory,\n          csvProperty,\n          csvPropertyValue,\n          ignoreCase,\n        } = cond;\n        if (index) {\n          p += logic;\n        }\n        p += ` ${\n          ignoreCase ? `tolower(n.${neo4jProperty})` : `n.${neo4jProperty}`\n        } ${matchingsMap[matching]} ${\n          ignoreCase\n            ? `tolower('${csvPropertyValue}')`\n            : `'${csvPropertyValue}'`\n        }\\n`;\n        return p;\n      },\n      `MATCH (n:${neo4jCategory}) \nWHERE `\n    ) + \" RETURN n\"\n  );\n}","pinCode":false,"dname":"82673e32-8ee4-4bc6-9c27-48adb4adebc9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof select_labels=Inputs.table(Lables, {required:false})","pinCode":false,"dname":"6200a7cd-3765-4149-8c86-dfa0b5fca7d2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${select_labels.map(l=>l.label)}`,{\n  reduce: async ()=>{\n    const whereClause = select_labels\n      .map(l=>l.label)\n      .map(label => `n:${label}`).join(' OR ');\n    const query =`match (n) WHERE ${whereClause} RETURN n`\n    console.log(query)\n    await gxr.neo4j(query)\n  }, \n  disabled:select_labels.length==0\n})","pinCode":false,"dname":"75074d55-13e4-4a81-bf82-e4702c7301fc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Relationships = {\n  let res = await gxr.neo4j(`MATCH ()-[r]->()\nRETURN type(r) AS relationshipType, count(r) as cnt\n`, {saveToGraph: false})\n  let arr= res.data\n  arr.shift()\n  return arr.map(elem=>({relationship:elem[0], count:elem[1].low}))\n}","pinCode":false,"dname":"a4a351c7-375d-4e81-86d7-3674bd097a26","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof relationships = Inputs.table(Relationships, { required: false })","pinCode":false,"dname":"1cb5ef72-d576-4bd3-afb8-7e62b8157ec8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${relationships.map(r=>r.relationship)}`, {\n  reduce: async ()=>{\n    const whereClause = relationships\n      .map(l=>l.relationship)\n      .map(rel => `r:${rel}`).join(' OR ');\n    const query =`match (n)-[r]->(m) WHERE ${whereClause} RETURN *`\n    console.log(query)\n    await gxr.neo4j(query)\n  },\n  disabled: relationships.length==0\n})","pinCode":false,"dname":"84fddda4-ecea-4b75-88c7-69b8fac78b72","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"matchingsMap = {\n  return { equal: \"=\", contains: \"CONTAINS\", in: \"IN\" };\n}","pinCode":false,"dname":"0de8ecda-4b2a-4bb7-91c1-5ff60b49d759","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"matchings =_.keys(matchingsMap);","pinCode":false,"dname":"f24d135b-c37b-4823-a063-1b5fdf0a3c0f","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"logics = [\"AND\", \"OR\"]","pinCode":false,"dname":"32060075-c36a-4095-b914-acbb9631b67e","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"CsvComponent = component(({ index ,id , useSetter }) => {\n  const [logic, setLogic] = useState(logics[0]);\n  const [matching, setMatching] = useState(matchings[0]);\n  const [csvCategory, setCsvCategory] = useState(categoriesExceptLabels[0]);\n  if (!csvCategory) {\n    return jsx`<div>There is no category that's not belong to Neo4j can be selected.</div>`;\n  }\n  const [csvProperties, setCsvProperties] = useState(\n    csvPropertiesMap[csvCategory]\n  );\n  const [csvProperty, setCsvProperty] = useState(csvProperties[0]);\n  const [ignoreCase, setIgnoreCase] = useState(true);\n  let nodes = _.filter(_graph_nodes, (n) => n.data.detail.type === csvCategory);\n  let csvPropertyValuesTmp = _.uniq(\n    nodes.map((n) => {\n      return n.data.detail.data[csvProperty];\n    })\n  );\n  const [csvPropertyValues, setCsvPropertyValues] = useState(\n    csvPropertyValuesTmp\n  );\n  const [csvPropertyValue, setCsvPropertyValue] = useState(\n    csvPropertyValues[0]\n  );\n  const [csvNodes, setCsvNodes] = useState(\n    _.filter(nodes, (n) => {\n      return n.data.detail.data[csvProperty] === csvPropertyValue;\n    })\n  );\n  useSetter({\n    id,\n    logic,\n    matching,\n    csvCategory,\n    csvProperty,\n    csvPropertyValue,\n    csvNodes,\n    ignoreCase,\n  });\n  let radioFunc = (e) => {};\n  return jsx`<div className=\"d-flex flex-wrap align-items-center flex-gap\">\n  ${\n    !!index &&\n    jsx`<div class=\"d-flex align-items-center flex-gap\">\n        <label>Logic</label>\n        ${_.map(logics, (L, I) => {\n          return jsx`<label key=${I}><input type=\"radio\" name=${\n            \"radio_input\" + index\n          } value=\"${L}\" checked=${logic == L}\n         onChange=${(e) => {\n           setLogic(e.target.value);\n         }}/>${L}</label>`;\n        })}\n    </div>`\n  }\n   <div className=\"d-flex align-items-center flex-gap\">\n      <label>Matching</label>\n      <select className=\"oi-3a86ea-input\" value='${matching}' \n      onChange=${(e) => setMatching(e.target.value)}>\n      ${_.map(matchings, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>CSV  Category</label>\n      <select className=\"oi-3a86ea-input\" value='${csvCategory}' \n      onChange=${(e) => {\n        let csvCategoryTmp = e.target.value;\n        setCsvCategory(csvCategoryTmp);\n        setCsvProperties(csvPropertiesMap[csvCategoryTmp]);\n        let csvPropertyTmp = csvPropertiesMap[csvCategoryTmp][0];\n        setCsvProperty(csvPropertyTmp);\n        nodes = _.filter(\n          _graph_nodes,\n          (n) => n.data.detail.type === csvCategoryTmp\n        );\n        let csvPropertyValuesTmp = _.uniq(\n          nodes.map((n) => {\n            return n.data.detail.data[csvPropertyTmp];\n          })\n        );\n        setCsvPropertyValues(csvPropertyValuesTmp);\n        setCsvPropertyValue(csvPropertyValuesTmp[0]);\n        setCsvNodes(\n          _.filter(nodes, (n) => {\n            return (\n              n.data.detail.data[csvPropertyTmp] === csvPropertyValuesTmp[0]\n            );\n          })\n        );\n      }}>\n      ${_.map(categoriesExceptLabels, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>CSV Property</label>\n      <select className=\"oi-3a86ea-input\" value='${csvProperty}' \n      onChange=${(e) => {\n        let csvPropertyTmp = e.target.value;\n        setCsvProperty(csvPropertyTmp);\n        nodes = _.filter(\n          _graph_nodes,\n          (n) => n.data.detail.type === csvCategory\n        );\n        let csvPropertyValuesTmp = _.uniq(\n          nodes.map((n) => {\n            return n.data.detail.data[csvPropertyTmp];\n          })\n        );\n        setCsvPropertyValues(csvPropertyValuesTmp);\n        setCsvPropertyValue(csvPropertyValuesTmp[0]);\n        setCsvNodes(\n          _.filter(nodes, (n) => {\n            return (\n              n.data.detail.data[csvPropertyTmp] === csvPropertyValuesTmp[0]\n            );\n          })\n        );\n      }}>\n      ${_.map(csvProperties, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div className=\"d-flex align-items-center flex-gap\">\n      <label>CSV Property Value</label>\n      <select className=\"oi-3a86ea-input\" value='${csvPropertyValue}' \n      onChange=${(e) => {\n        let csvPropertyValueTmp = e.target.value;\n        setCsvPropertyValue(csvPropertyValueTmp);\n        setCsvNodes(\n          _.filter(nodes, (n) => {\n            return n.data.detail.data[csvProperty] === csvPropertyValueTmp;\n          })\n        );\n      }}>\n      ${_.map(csvPropertyValues, (label) => {\n        return jsx`<option key='${label}' value='${label}'>${label}</option>`;\n      })}\n    \t</select>\n    </div>\n    <div>${csvNodes.length} nodes</div>\n    <div className=\"d-flex align-items-center flex-gap\">\n    \t<label>Ignore Case</label>\n        <input className=\"oi-3a86ea-input\" type=\"checkbox\" checked=${ignoreCase}\n        onChange=${(e) => {\n          setIgnoreCase(e.target.checked);\n        }} />\n    </div>\n  </div>`;\n})","pinCode":false,"dname":"b7c81fee-d8c4-44b0-87c3-2f9f2a3d9242","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"_graph.nodes","pinCode":true,"dname":"48c279bd-bd1f-41ad-8698-bc0b3bdcaf99","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"_graph_nodes = {\n  let selectedNodes = _.filter(\n    _graph.nodes,\n    (n) => n.selected && !~labels.indexOf(n.data.detail.type)\n  );\n  return selectedNodes.length\n    ? selectedNodes\n    : _.filter(_graph.nodes, (n) => !~labels.indexOf(n.data.detail.type));\n}","pinCode":false,"dname":"2d9c53b1-0e9b-4463-bf1f-c4bb96f1e7cb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"categoriesExceptLabels = {\n  return _.uniq(_graph_nodes.map((n) => n.data.detail.type));\n}","pinCode":false,"dname":"631ece55-b9d0-4208-9cb9-7c874c4c436c","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"labels = _.reduce(\n  Lables,\n  (prev, L) => {\n    prev.push(L.label);\n    return prev;\n  },\n  []\n)","pinCode":false,"dname":"7cae6956-05e6-4767-a00d-cc99278281c9","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Lables = {\n  let res = await gxr.neo4j(\n    `MATCH (n)\nRETURN labels(n) AS label, count(n) as cnt`,\n    { saveToGraph: false }\n  );\n  let arr = res._content.data;\n  arr.shift();\n  return arr.map((elem) => ({ label: elem[0][0], count: elem[1].low }));\n}","pinCode":false,"dname":"27e7d921-068b-4085-9839-c825faaeae7c","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"refreshGraphElement = html`<div>refresh</div>`","pinCode":false,"dname":"26c9e726-166a-47a4-9405-8a01b054cf10","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"_graph = Generators.observe((next) => {\n  // Yield the input’s initial value.\n  next( window.opener._drawing.graph);\n  // Define an event listener to yield the input’s next value.\n  const refresh_graph = () => next( window.opener._drawing.graph);\n  actions.inspector(\n    refreshGraphElement,\n    [actions.types.REFRESH_GRAPH],\n    refresh_graph\n  )// When the generator is disposed, detach the event listener.\n  return () => {\n    actions.deleteCache(refreshGraphElement);\n    console.log(\"remove refresh graph listener\");\n  };\n})","pinCode":false,"dname":"87bbdafc-68b2-44a1-b5e3-8b9967d6002f","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"---","pinCode":false,"dname":"61c0f943-bfaa-471b-93d8-4b74e135cca7","codeMode":"markdown","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"csvPropertiesMap = {\n  let promiseMap = {};\n  _.map(_graph_nodes, (n) => {\n    let type = n.data.detail.type;\n    if (!~labels.indexOf(type)) {\n      if (!promiseMap[type]) {\n        promiseMap[type] = {};\n      }\n      _.each(n.data.detail.data, (value, key) => {\n        if (undefined === promiseMap[type][key]) {\n          promiseMap[type][key] = value;\n        }\n      });\n    }\n  });\n  return _.reduce(promiseMap,(prev,obj,k)=>{\n    prev[k]=_.keys(obj);\n    return prev;\n  },{});\n}","pinCode":false,"dname":"3e6122cd-23a8-4048-bcd3-11e82f9e110a","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"propertiesMap= {\n  let promiseMap= {};\n  for(let i =0;i<labels.length;i++){\n     let res = await gxr.neo4j(`MATCH (p:${labels[i]})  RETURN keys(p);`, {\n      saveToGraph: false,\n    });\n    let arr = res._content.data;\n    promiseMap[labels[i]]= Array.from(\n      _.reduce(\n        arr.slice(1),\n        (p, o) => {\n          _.each(o[0], (v) => {\n            p.add(v);\n          });\n          return p;\n        },\n        new Set()\n      )\n    );\n  }\n  return promiseMap;\n}","pinCode":false,"dname":"0684ebf5-c601-4bb5-a93c-0d3aa56f79bd","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"html`<style>\n  .codex-editor{\n   font-size:1.2em\n  }\n   label{\n   white-space: pre!important;\n  }\n  label {\n    margin-bottom: unset;\n}\n</style>`","pinCode":false,"dname":"698b0852-ff3a-48ec-b41c-b01a6129cb3f","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"uuid = import('https://cdn.skypack.dev/uuid@8.3.2?min')","pinCode":false,"dname":"5b0c6b15-584a-4115-9f5a-1f845c665bc8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":true,"dname":"6c7fe821-f68e-4227-83e0-82fbaf257092","codeMode":"javascript2"}}}],"version":"2.19.1"}
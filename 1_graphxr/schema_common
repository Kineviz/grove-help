{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md `#### Lables`","pinCode":false,"dname":"e49194e4-ce31-42e7-a90c-5f78caa63003","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof labels=Inputs.table(Lables, {required:false})","pinCode":false,"dname":"0689f220-0340-4781-bfe6-31ce16a23432","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${labels.map(l=>l.label)}`,{\n  reduce: async ()=>{\n    const whereClause = labels\n      .map(l=>l.label)\n      .map(label => `n:${label}`).join(' OR ');\n    const query =`match (n) WHERE ${whereClause} RETURN n`\n    console.log(query)\n    await gxr.neo4j(query)\n  }, \n  disabled:labels.length==0\n})","pinCode":false,"dname":"2ccb67a6-b57e-4a00-ad9f-4068864c50a9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Lables = {\n  let res = await gxr.neo4j(`MATCH (n)\nRETURN labels(n) AS label, count(n) as cnt`, {saveToGraph: false})\n\n  let arr= res.data\n  arr.shift()\n  return arr.map(\n    elem=>({\n      label: elem[0][0],\n      count: elem[1].low\n  }))\n}","pinCode":false,"dname":"e8296a28-0781-4b26-b30b-291fa7de9bb2","codeMode":"javascript2","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"md `#### Relationships`","pinCode":false,"dname":"4ad251c0-fdaa-4e5e-8a33-45e90f94df67","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof relationships=Inputs.table(Relationships, {required:false})","pinCode":false,"dname":"5d436e7c-bcd1-48fe-993a-51d3bae58114","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${relationships.map(r=>r.relationship)}`, {\n  reduce: async ()=>{\n    const whereClause = relationships\n      .map(l=>l.relationship)\n      .map(rel => `r:${rel}`).join(' OR ');\n    const query =`match (n)-[r]->(m) WHERE ${whereClause} RETURN *`\n    console.log(query)\n    await gxr.neo4j(query)\n  },\n  disabled: relationships.length==0\n})","pinCode":false,"dname":"f9e2b6d5-0e53-4e9d-ba7d-a6e775d3b872","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Relationships = {\n  let res = await gxr.neo4j(`MATCH ()-[r]->()\nRETURN type(r) AS relationshipType, count(r) as cnt\n`, {saveToGraph: false})\n  let arr= res.data\n  arr.shift()\n  return arr.map(elem=>({relationship:elem[0], count:elem[1].low}))\n}","pinCode":false,"dname":"a248c1ce-0e67-4d25-b7bd-8e516e8feede","codeMode":"javascript2","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"Button('Expand', async ()=>{\n  const selected = gxr.nodes(\":selected\")\n  if(selected.length==0){\n    alert('Please select at least one nodes')\n    return\n  }\n  let ids = gxr.nodes(\":selected\").map(n=>parseInt(n.id))\n  let expand_on = relationships.map(l=>l.relationship)\n  let relStr = expand_on.length>0 ?\n      ':'+expand_on.join('|') : ''\n  let query = `MATCH (n)-[r${relStr}]-(m) \n  where id(n) in [${ids}]\n  return *`\n  console.log(query)\n  await gxr.neo4j(query)\n})","pinCode":false,"dname":"f1f6c625-b548-4808-8794-d274a34c903c","codeMode":"javascript2"}}}],"version":"2.19.1"}
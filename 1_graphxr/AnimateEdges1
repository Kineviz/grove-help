{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md `#### <p align=center>Animate Edges</p>`","pinCode":false,"dname":"abd50fda-43ec-4f96-bf0b-8f8debb79f9f","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof animateRel=Inputs.select(\n  _.uniq(api.getLayoutGraph().getEdges()\n    .map(e=>e.relationship)),\n  {label:'Animate on:'}\n)","pinCode":false,"dname":"2717b654-ec64-4bc9-89a0-6ac6b8e1b21d","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof propUI= {\n  let edges=api.getLayoutGraph().getEdges()\n    .filter(e=>e.relationship== animateRel)\n  let options=['-']\n  if(edges.length>0) \n    options=_.concat(options, Object.keys(edges[0].properties))\n\n  return addClass(Panel({\n    timeDim: Inputs.select(options,{label:'Time Prop:'}),\n    sizeDim: Inputs.select(options,{label:'Size Prop:'}),\n    flightTime: Inputs.range([0, 20], {value: 2, step: 1, label: \"Flight Time (s):\"}),\n    duration: Inputs.range([2, 2000], {value: 10, step: 1, label: \"Duration (s):\"}),    \n  }), \"my-custom-style\")\n}","pinCode":false,"dname":"487a5b55-4b56-49aa-8ab8-1279b083a71d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(timeDim=='-'? 'Animate':'Sequential Animate', {reduce: async ()=>\n{\n  prepareAnimation(animateRel, sizeDim, timeDim) \n  await delay(500)\n  if(timeDim=='-'){\n    await runAnimation(animateRel, flightTime*1000)\n  }else{\n    await runSeqAnimation(animateRel, duration, flightTime)\n  }\n  await delay(200)\n  clearMarker()\n}\n})","pinCode":false,"dname":"a67758ce-4c41-483b-8253-2d5de90fe46e","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"timeDim=propUI.timeDim\n// We need this to overcome a bug","pinCode":false,"dname":"911be417-719c-4745-a8be-ff81faf32abd","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"sizeDim=propUI.sizeDim","pinCode":false,"dname":"1b6ed230-4fb5-409a-8d09-1d206eea6e98","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"flightTime=propUI.flightTime","pinCode":false,"dname":"864594dc-bd0f-471c-802f-8037057b36b3","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"duration=propUI.duration","pinCode":false,"dname":"0b0b5884-13f6-4f4a-ba19-ac3c33e69ece","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"md `---`","pinCode":false,"dname":"04af1786-764f-4bf3-aea2-b5443f94a6ea","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button('Prepare animation', {reduce: async ()=>\n prepareAnimation(animateRel, propUI.sizeDim, propUI.timeDim)                                      \n})","pinCode":false,"dname":"3010aaa6-748e-4e3d-8fd2-7fd71769e2a8","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md `To set icon for the __Marker nodes, \nrun \"Prepare animation\" first, then set icon`","pinCode":false,"dname":"09dc766f-46bd-4cd2-9669-817d67ddd618","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof aa=Inputs.button('Run Animation', {reduce: async ()=>{\n  prepareAnimation(animateRel, sizeDim, timeDim)  \n  await delay(500)\n  await runAnimation(animateRel, 4000)\n  clearMarker()\n}})","pinCode":false,"dname":"a7b2fefe-869c-46fe-8863-85db583a3fab","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"md `##### Appendix`","pinCode":false,"dname":"a14e6e86-dec8-4201-a095-1710bd10feac","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"scope=({\n  marker: '__Marker'\n})","pinCode":false,"dname":"d7cf74ce-401f-48d1-8916-f2ea1f956e2b","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"runSeqAnimation=async (relationship, duration, flightTime)=>{\n//   let duration = 20\n//   let flightTime = 3\n  let view = api.getLayoutGraph()\n  let edges = view.getEdges().filter(e=>e.relationship==relationship)\n  let dots = view.getNodes().filter(n=>n.category==scope.marker)\n// debugger\n  let srcPoses=edges\n    .map(e=>view.getNode(e.sourceId).getStyle('position').clone())\n  let tgtPoses=edges\n    .map(e=>view.getNode(e.targetId).getStyle('position').clone())\n\n  let timeList = dots.map(d=>(new Date(d.properties.time)).getTime())\n  let minTime=_.min(timeList)\n  let maxTime=_.max(timeList)\n  let range = maxTime - minTime\n  // lets scale date of transaction to 0 to 1\n  view.applyTransform(api.map({\n    category: scope.marker,\n    mappedProperties: [{\n      name:'time',\n      newName: 'timeOffset',\n      formula: (date, props)=>\n        ((new Date(date)).getTime() - minTime)/range\n    }]\n  }))\n\n//   let's wrap Tween in Promise so we can use await\n  return new Promise(callback=>{\n//   After applyTransform, we need to get nodes again to get the change\n    dots = view.getNodes().filter(n=>n.category==scope.marker)\n    let x={t:0}\n    new TWEEN.Tween(x)\n      .to({t:1+flightTime/duration}, (duration+flightTime)*1000)\n      .on('update', ()=>{\n        dots.forEach(\n          (node, idx)=>{\n            let timeOffset = node.properties.timeOffset\n            if(x.t > timeOffset && x.t < timeOffset + flightTime/duration ){\n              let delta = (x.t-timeOffset)*duration/flightTime\n              let pos = srcPoses[idx].clone().multiplyScalar(1-delta)\n                .add(tgtPoses[idx].clone().multiplyScalar(delta))\n    //           let pos=new THREE.Vector3(0,0,0);\n              console.log(pos)\n              node.setStyle('position', pos.clone())\n            }else{\n              node.setStyle('position', new THREE.Vector3(0,0, 10000))\n            }\n        })        \n      })\n      .on('complete', ()=>callback())\n      .start()\n  })\n}","pinCode":false,"dname":"22a1487e-0823-47e8-812d-65ba1bd5617c","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"runAnimation= async(relationship, duration)=>{\n  let view=api.getLayoutGraph()\n  let edges = view.getEdges().filter(e=>e.relationship==relationship)\n  let dots = view.getNodes().filter(n=>n.category==scope.marker)\n\n  let srcPoses=edges\n    .map(e=>view.getNode(e.sourceId).getStyle('position').clone())\n  let tgtPoses=edges\n    .map(e=>view.getNode(e.targetId).getStyle('position').clone())\n\n  return new Promise(callback=>{\n    let x={t:0}\n    new TWEEN.Tween(x)\n      .to({t:1}, duration)\n      .on('update', ()=>{\n        dots.forEach(\n          (node, idx)=>{\n            let pos = srcPoses[idx].clone().multiplyScalar(1-x.t)\n              .add(tgtPoses[idx].clone().multiplyScalar(x.t))\n  //           let pos=new THREE.Vector3(0,0,0);\n            console.log(pos)\n            node.setStyle('position', pos.clone())\n        })        \n      })\n      .on('complete', ()=>callback())\n      .start()\n  })\n}","pinCode":false,"dname":"c4d8e871-7d43-4792-b5c3-705b78dc79d5","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"prepareAnimation=async (relationship, sizeProp, timeProp)=>{\n  let view=api.getLayoutGraph()\n\n  clearMarker()\n\n  let edges = api.getLayoutGraph().getEdges()\n  let dots = edges.map(e=>{\n    let properties={}\n    if(sizeProp !== '-') properties.size=e.properties[sizeProp]\n    if(timeProp !== '-') properties.time=e.properties[timeProp]\n    let dot = api.makeNode(\n      {properties, category:scope.marker})\n     return dot\n  })\n\n  api.getLayoutGraph().addNodes(dots)\n//   await delay(200)\n  \n  let nodes = api.getLayoutGraph().getNodes()\n    .filter(n=>n.category==scope.marker)\n  \n  let srcPoses=edges\n    .map(e=>view.getNode(e.sourceId).getStyle('position').clone())\n  let tgtPoses=edges\n    .map(e=>view.getNode(e.sourceId).getStyle('position').clone())\n\n  nodes.forEach(\n    (node, idx)=>{\n//       node.setStyle('position', srcPoses[idx].clone())\n      node.setStyle('position', new THREE.Vector3(0,0,1000))\n    })\n  api.setCategorySizeProperty({category:scope.marker, \n                               property:'size'});\n  api.dispatchGraphDataUpdate();\n  return [srcPoses, tgtPoses]\n}","pinCode":false,"dname":"59e6ba5b-7ecd-455f-9b44-5adee2650e9f","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"clearMarker=()=>{\n  let view=api.getLayoutGraph()\n\n  view.removeNodes(\n    view.getNodes()\n     .filter(n=>n.category==scope.marker)\n      .map(n=>n.id)\n  )\n}","pinCode":false,"dname":"6aa5324e-b8dc-404d-a5e9-25aed5db8cb6","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"api=(await require('@kineviz/graphxr-api@0.0.227')).getApi()","pinCode":false,"dname":"40e54648-e1c0-4ce3-95f8-caaed406fce9","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"delay= (ms)=> new Promise((callback)=>setTimeout(callback, ms))","pinCode":false,"dname":"6d33fd4b-9c98-4fa1-8892-d0905df0b805","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"THREE=_drawing.THREE","pinCode":false,"dname":"da9ef404-c027-4040-a722-2b1518534928","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"TWEEN.autoPlay(true)","pinCode":false,"dname":"70b56092-2cef-4634-a2a0-182e55a7c497","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"TWEEN = require('es6-tween')","pinCode":false,"dname":"c106b317-e698-419d-b26a-aa9e1f10876e","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"md `--------- Panel -----------`","pinCode":false,"dname":"189569cd-c730-4a8a-8fbf-38e8f1cf44b6","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Panel = {\n\n\tfunction init(descriptor) {\n    var id = 'panel'+Math.floor(Math.random()*1000000);\n\t\tvar div = html`<div id=\"${id}\" class=\"panel-div\"></div>`;\n    var factories = {};\n\t\tvar rvalue = {}\n\t\t\n    div.appendChild(html`${PanelCss(id)}`);\n    \n\t\tfunction appendElement(name) {\n      let control = descriptor[name];\n      let el = html`<div class=\"panel-element\"/>`;\n\t\t\tdiv.appendChild(el);\n      if (control.jsliderDesc) {\n        \n  \t\t\tel.appendChild(html`<div>pippo</div>`);\n  \t\t\tel.appendChild(control);\n      }\n      else {\n  \t\t\tel.appendChild(control);\n      }\n\t\t\trvalue[name] = control.value;\n      let iteratorFactory = factories[name] = newIteratorFactory(name);\n\n      iteratorFactory.setValue(control.value);\n      control.addEventListener(\"input\", function(event) {\n        console.log('input '+name);\n        event.preventDefault();\n        event.stopPropagation();\n        iteratorFactory.setValue(control.value);\n        rvalue[name] = control.value;\n      });\n\t\t}\n\n    for (var k in descriptor) \n\t\t\tappendElement(k);\n\t\t\n    function getValue() {\n      console.log('get value');\n      console.log(factories);\n      var ret = {};\n      for(var k in factories) {\n        let fact = factories[k];\n        Object.defineProperty(ret, k, {\n          get: ()=>fact.make(),\n          set: () => { }\n        });\n      }\n      Object.defineProperty(ret, \"group\", {\n        get: ()=>aggregate,\n        set: () => { }\n      });\n      Object.defineProperty(ret, \"asObject\", {\n        get: ()=>aggregate(),\n        set: () => { }\n      });\n      Object.defineProperty(ret, \"read\", {\n        get: ()=>(()=>rvalue),\n        set: () => { }\n      });\n      return ret;\n    }\n    \n\t\tObject.defineProperty(div, \"value\", {\n\t\t\tget: ()=>getValue(),\n\t\t\tset: () => { }\n\t\t});\n\t\tvar t = {};\n\n\n    function aggregate() {\n      if (arguments.length==0 || arguments[0]=='*')\n        return aggregateIterators(factories)\n      \n\t\t\tvar t = {};\n\t\t\tfor (var i = 0; i < arguments.length; i++) \n\t\t\t\tt[arguments[i]] = factories[arguments[i]];\n\n      return aggregateIterators(t);\n\t\t}\n\n\t\treturn div;\n\t}\n\treturn init;\n}","pinCode":false,"dname":"1d6c9e06-46fc-4440-b150-fc939ac72dd7","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"PanelCss = id=>`<style>\n  #${id} { \n    overflow:hidden; \n    position:relative; \n    margin:0;\n    padding: 0 0 8px 0;\n  }\n\n  #${id} .panel-element {\n      overflow: hidden;\n      position: relative;\n      float: left;\n      box-sizing: border-box;\n      width: 50.0%;\n      background: unset;/*linear-gradient(90deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1)  100%);*/\n      padding: 0 3px 0 3px;\n      /*border: 1px solid #c0c0c0;*/\n  }\n\n  #${id} label {\n    text-align: right;\n  }\n\n  #${id} .yellow {\n    background-color:#ffff0080;  \n  }\n\n  #${id} .hide-number input[type=number] {\n    display: none;\n  }\n</style>\n`","pinCode":false,"dname":"f7ec1d40-469a-4a01-b136-7a5cf010192a","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function newIteratorFactory(name) {\n\tvar curValue = null;\n\tvar curPromise = Promise.resolve(curValue);\n\tvar curResolve = () => 0;\n\n\tfunction setValue(val) {\n    console.log('set '+name);\n\t\tif (val != curValue) {\n\t\t\tvar oldResolve = curResolve;\n\t\t\tcurPromise = new Promise(function (resolve) {\n\t\t\t\tcurResolve = resolve;\n\t\t\t});\n\t\t\tcurValue = val;\n\t\t\toldResolve(val);\n\t\t}\n\t}\n\n\tfunction make() {\n\t\tasync function* g() {\n      yield curValue;\n\t\t\twhile (true) {\n\t\t\t\tlet p = curPromise;\n\t\t\t\tvar x = await p;\n        console.log('yield '+name);\n\t\t\t\tyield x;\n\t\t\t}\n\t\t}\n\t\treturn g();\n\t}\n\treturn {make, setValue};\n}","pinCode":false,"dname":"84c926cc-d727-4d4c-9c82-ad917d6391ac","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function aggregateIterators(factories, initialValues) {\n  var curValues = Object.assign({}, initialValues);\n  var curPromise = Promise.resolve(curValues);\n\tvar curResolve = () => 0;\n\n  function nextPromise() {\n    var oldResolve = curResolve;\n    curPromise = new Promise(function(resolve) {\n      curResolve = resolve;\n    });\n    oldResolve(curValues);\n  }\n\n  async function* generator() {\n    yield curValues;\n    while (true) {\n      let p = curPromise;\n      var x = await p;\n      console.log('aggr yield');\n      yield x;\n      nextPromise()\n\t\t}\n  }\n\n  \n  async function startLoop(key) {\n    let iterator = factories[key].make(); \n    async function get() {\n      let tokenPromise = iterator.next(); // is an async iterator\n      let token = await tokenPromise; // token = {done:..., value:...}\n      let valuePromise = token.value; // my value is a Promise\n      let value = await valuePromise;\n      // console.log({iterator, tokenPromise, token, valuePromise, value});\n      return value;\n    }\n    var y = await get();\n    curValues[key] = y;\n    \n    var debugCount = 0;\n    while(true) {\n      let value = await get();\n      if (value!=curValues[key]) {\n        curValues[key] = value;\n        nextPromise();\n        // var oldResolve = curResolve;\n        // curPromise = new Promise(function(resolve) {\n        //   curResolve = resolve;\n        // });\n        // oldResolve(curValues);\n      }\n    }\n  }\n  \n  \n  for(var k in factories) \n    startLoop(k);\n  \n  var mainIterator = generator();\n  return mainIterator;  \n}","pinCode":false,"dname":"953010d9-e261-4bbc-bd00-1427d10368b2","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function addClass(element, cssClasses) {\n  for(var c of cssClasses.split(' '))\n    element.classList.add(c);\n  return element;\n}","pinCode":false,"dname":"1f039dca-e88b-4a23-bab6-e1b3abb34773","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"md`\n* Fix sequential playback overshoot\n* api to set icon?\n* gui to set duration, total duration\n* multi input in one line\n* clean up unused code\n* add to utility\n`","pinCode":false,"dname":"e568b925-3748-49ad-a93a-aea24d7950e2","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}}],"version":"2.19.1"}
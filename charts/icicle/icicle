{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Partition, Icicle\n\nThis space-filling visualization, the Cartesian equivalent to a [sunburst](/@d3/sunburst), shows the cumulative values of subtrees. It is commonly used to visualize software packages (the size of source code within nested packages) and file systems (the size of files within nested folders). See also the [zoomable version](/@d3/zoomable-icicle).`","pinCode":false,"dname":"d421ea17-b02f-43f0-adb7-0e09e358483e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"chart = (Icicle(flare, {\n  value: d => d.size, // size of each node (file); null for internal nodes (folders)\n  label: d => d.name, // display name for each cell\n  title: (d, n) => `${n.ancestors().reverse().map(d => d.data.name).join(\".\")}\\n${n.value.toLocaleString(\"en\")}`, // hover text\n  link: (d, n) => n.children\n    ? `https://github.com/prefuse/Flare/tree/master/flare/src/${n.ancestors().reverse().map(d => d.data.name).join(\"/\")}`\n    : `https://github.com/prefuse/Flare/blob/master/flare/src/${n.ancestors().reverse().map(d => d.data.name).join(\"/\")}.as`,\n  width: 1152,\n  height: 2400\n}))","pinCode":false,"dname":"05fe3873-ef40-43ca-a952-9bb903275308","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"flare = (FileAttachment(\"flare.json\").json())","pinCode":false,"dname":"ea1f10e8-9fab-4628-90c0-ed7e95139ad6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"howto(\"Icicle\")","pinCode":false,"dname":"d8fe07e8-2581-44f9-98a3-0b7039caf24b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Icicle = (function Icicle(data, { // data is either tabular (array of objects) or hierarchy (nested objects)\n  path, // as an alternative to id and parentId, returns an array identifier, imputing internal nodes\n  id = Array.isArray(data) ? d => d.id : null, // if tabular data, given a d in data, returns a unique identifier (string)\n  parentId = Array.isArray(data) ? d => d.parentId : null, // if tabular data, given a node d, returns its parent’s identifier\n  children, // if hierarchical data, given a d in data, returns its children\n  format = \",\", // format specifier string or function for values\n  value, // given a node d, returns a quantitative value (for area encoding; null for count)\n  sort = (a, b) => d3.descending(a.value, b.value), // how to sort nodes prior to layout\n  label, // given a node d, returns the name to display on the rectangle\n  title, // given a node d, returns its hover text\n  link, // given a node d, its link (if any)\n  linkTarget = \"_blank\", // the target attribute for links (if any)\n  width = 640, // outer width, in pixels\n  height = 400, // outer height, in pixels\n  margin = 0, // shorthand for margins\n  marginTop = margin, // top margin, in pixels\n  marginRight = margin, // right margin, in pixels\n  marginBottom = margin, // bottom margin, in pixels\n  marginLeft = margin, // left margin, in pixels\n  padding = 1, // cell padding, in pixels\n  round = false, // whether to round to exact pixels\n  color = d3.interpolateRainbow, // color scheme, if any\n  fill = \"#ccc\", // fill for node rects (if no color encoding)\n  fillOpacity = 0.6, // fill opacity for node rects\n} = {}) {\n\n  // If id and parentId options are specified, or the path option, use d3.stratify\n  // to convert tabular data to a hierarchy; otherwise we assume that the data is\n  // specified as an object {children} with nested objects (a.k.a. the “flare.json”\n  // format), and use d3.hierarchy.\n  const root = path != null ? d3.stratify().path(path)(data)\n      : id != null || parentId != null ? d3.stratify().id(id).parentId(parentId)(data)\n      : d3.hierarchy(data, children);\n\n  // Compute the values of internal nodes by aggregating from the leaves.\n  value == null ? root.count() : root.sum(d => Math.max(0, value(d)));\n\n  // Compute formats.\n  if (typeof format !== \"function\") format = d3.format(format);\n\n  // Sort the leaves (typically by descending value for a pleasing layout).\n  if (sort != null) root.sort(sort);\n\n  // Compute the partition layout. Note that x and y are swapped!\n  d3.partition()\n      .size([height - marginTop - marginBottom, width - marginLeft - marginRight])\n      .padding(padding)\n      .round(round)\n    (root);\n\n  // Construct a color scale.\n  if (color != null) {\n    color = d3.scaleSequential([0, root.children.length - 1], color).unknown(fill);\n    root.children.forEach((child, i) => child.index = i);\n  }\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [-marginLeft, -marginTop, width, height])\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 10);\n\n  const cell = svg\n    .selectAll(\"a\")\n    .data(root.descendants())\n    .join(\"a\")\n      .attr(\"xlink:href\", link == null ? null : d => link(d.data, d))\n      .attr(\"target\", link == null ? null : linkTarget)\n      .attr(\"transform\", d => `translate(${d.y0},${d.x0})`);\n\n  cell.append(\"rect\")\n      .attr(\"width\", d => d.y1 - d.y0)\n      .attr(\"height\", d => d.x1 - d.x0)\n      .attr(\"fill\", color ? d => color(d.ancestors().reverse()[1]?.index) : fill)\n      .attr(\"fill-opacity\", fillOpacity);\n\n  const text = cell.filter(d => d.x1 - d.x0 > 10).append(\"text\")\n      .attr(\"x\", 4)\n      .attr(\"y\", d => Math.min(9, (d.x1 - d.x0) / 2))\n      .attr(\"dy\", \"0.32em\");\n\n  if (label != null) text.append(\"tspan\")\n      .text(d => label(d.data, d));\n\n  text.append(\"tspan\")\n      .attr(\"fill-opacity\", 0.7)\n      .attr(\"dx\", label == null ? null : 3)\n      .text(d => format(d.value));\n\n  if (title != null) cell.append(\"title\")\n      .text(d => title(d.data, d));\n\n  return svg.node();\n})","pinCode":false,"dname":"594b2967-6e22-4468-8414-82e3355b7fc2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { howto }  from './example-components'","pinCode":false,"dname":"71dd7fc3-9e7a-4300-bf8c-591d421e6f8d","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"FileAttachment(\"Laser_Report_2020.xlsx\")","pinCode":true,"dname":"1c8b56a1-577b-49a5-a606-631faaf821e7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`# FileAttachment.xlsx()\n\nObservable supports parsing data from XLSX (.xlsx) ${Link(\"file-attachments/file-attachments\",\"file attachments\")} using [ExcelJS](https://www.npmjs.com/package/exceljs).\n\nOur focus is on the _data_ in XLSX files. In contrast, styling and presentation information (such as widths, fonts, formatting, frozen panes) is not as easily available, but still retrievable using ExcelJS directly.\n`","pinCode":false,"dname":"3336bbf9-666a-4b55-be5f-150141dbbaae","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Usage\nTo use, simply call \\`.xlsx()\\` on a file attachment. Here, we’ll use \\`FileAttachment()\\` to attach data from the Federal Aviation Administration’s [reports of lasers pointed at aircraft](https://www.faa.gov/about/initiatives/lasers/laws/).`","pinCode":false,"dname":"43e4d3a7-b504-4a07-893d-62e5bd03290f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"workbook = (FileAttachment(\"Laser_Report_2020.xlsx\").xlsx())","pinCode":false,"dname":"4ac5a0e1-76de-4460-8c05-430e0b0fed7d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you expand (click the black triangle of) the Workbook in the previous cell, you can see that the workbook includes an array of the sheet names in the original file. Using that array, you can access individual sheets of the XLSX file:`","pinCode":false,"dname":"27d27812-5b72-440d-bb06-571fec8093bc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"sheet1 = (workbook.sheet(\"Laser Report 2020\"))","pinCode":false,"dname":"6f0670ca-3c95-41d5-ac08-87ccead89946","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`From there, \\`Inputs.table()\\` allows us to see the data in table format:`","pinCode":false,"dname":"9c215531-7236-489f-89a7-3f712247b5b9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.table(sheet1)","pinCode":false,"dname":"1de1136e-2c5e-4614-bec5-f30ce397d575","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Here are the methods available for working with XLSX files:`","pinCode":false,"dname":"20896767-2e21-43d2-b40c-b079e24d2bac","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### _workbook_.sheetNames\n\nReturns an array of sheet names from the workbook.`","pinCode":false,"dname":"4838e518-4536-415d-9e02-e049f1608167","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"workbook.sheetNames","pinCode":false,"dname":"a7a1b4a5-06bf-487b-a82c-cfe7701a043c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### _workbook_.sheet(_name_[, {_range_, _headers_}])\n\nReturns an array of objects representing the cells in a specific sheet from the workbook.\n\n- Values are coerced to their corresponding JavaScript types: numbers, strings, Date objects.\n- Dates are interpreted in UTC.\n- Formula results are included, but formula definitions ignored. Formula errors are coerced to \\`NaN\\`.\n- Hyperlinks are returned as strings, with a space between URL and text if they differ.\n- Empty cells are skipped: objects will not include fields or values for them, but empty rows are kept.\n- Row numbers from the source sheet are included as a non-enumerable \\`\"#\"\\` property to assist with recognition and range specification.`","pinCode":false,"dname":"5da11dd7-f5f9-4914-a555-8fb56f184449","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`___name___ is a string or number representing the sheet name from which you plan to extract data. \n- The string form of the argument must match a name in \\`sheetNames\\` (example shown in Usage section).\n- The number form of the argument represents the order in which the sheet names occur in \\`sheetNames\\` (zero-indexed).`","pinCode":false,"dname":"db3a83ab-41a0-48f7-9792-656bfe22bc52","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"workbook.sheet(0)","pinCode":false,"dname":"8f0863f9-90db-4d2c-b089-3426891bcc25","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`___range___ is a string specifying a rectangular range of cells to extract from the sheet. For example, \\`\"B4:K123\"\\` specifies a range from top-left cell B4 to bottom-right cell K123, inclusive. If no range is specified, the entire sheet is extracted by default.\n\nSimilar to spreadsheets, the column or row part of the start or end may be omitted to mean the entire column or row; that is, \\`\"4:123\"\\` are rows 4 through 123 inclusive for all columns. Extending the standard syntax, you may omit a start or end specifier on either side of the colon (\\`:\\`) to leave it unbounded. For example, \\`\"4:\"\\` means row 4 to the end of the sheet.\n\nUnion (\\`\"A1:B3,D1:G3\"\\`) and intersection (\\`\"A1:C3 B2:D4\"\\`) ranges are not supported currently.`","pinCode":false,"dname":"34b74ae2-af1d-4df9-aef3-81da15db31bd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"partial = (workbook.sheet(0, { range: \"C1:J\" }))","pinCode":false,"dname":"954a4b2a-df79-41cc-aefc-681270b96df1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.table(partial, { layout: \"auto\" })","pinCode":false,"dname":"2881ca61-f51e-407b-b9c3-32a1e219b987","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`___headers___ is a Boolean that, if \\`true\\`, will treat the first extracted row as column headers and use its cells as field names in returned objects. The default is \\`false\\`.\n\nIf a header value is empty or zero, ABC-type column names will be substituted. Underscores (\\`_\\`) are appended when avoiding field name conflicts.`","pinCode":false,"dname":"096d3015-4410-4e68-859a-fcf833de1540","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"data = (workbook.sheet(0, { headers: true, range: \":J\" }))","pinCode":false,"dname":"6b077fbb-fcaa-4710-ac02-914a9b0a29c1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.table(data, { layout: \"auto\" })","pinCode":false,"dname":"82f70087-63d6-44f3-9baf-847ee268a0e9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## ZIP archives and .xlsx files\nYou can read \\`.xlsx\\` files that are contained within a ZIP archive. Use [\\`FileAttachment.zip()\\`](zip) to access the ZIP archive, then use \\`.xlsx()\\` to read the contents of the file:`","pinCode":false,"dname":"c7f56598-875f-4132-ba09-710ef88e1f9d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const zip = await FileAttachment(\"reports.zip\").zip();\n  const workbook = await zip.file(\"Laser_Report_2020.xlsx\").xlsx();\n  return workbook.sheet(0, { headers: true, range: \":J\" });\n}","pinCode":false,"dname":"83997e8d-e0ed-480f-9030-64d335b011c5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Note that zipping \\`.xlsx\\` files doesn’t result in much smaller file attachments, since the XLSX format is already compressed; however, the technique might be convenient if you prefer to upload a number of spreadsheets all at once.`","pinCode":false,"dname":"a3c8896e-e336-4ef8-9b7d-ee4589cd41d8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Suggestions?\n\nIf you have suggestions or improvements, please add your feedback as an [issue on GitHub](https://github.com/observablehq/stdlib/issues).`","pinCode":false,"dname":"8ef30e14-8b53-4cc5-bd12-912ba59b44b8","codeMode":"javascript2"}}}],"version":"2.19.1"}
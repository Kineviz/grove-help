{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"viewof dbPath = Inputs.text({\n  label: \"kuzudb path\",\n  value: \"/outputs/2024-12-16T21:34:50.775431Z/kuzu\",\n})","pinCode":false,"dname":"a2ca91c3-a0eb-41d7-92f2-2624f760b196","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof kuzudbSchemaId = Inputs.select(\n  [\"ObservationGraph\", \"RELATED_TO_Graph\"],\n  { value: \"RELATED_TO_Graph\", label: \"kuzudb schema\" }\n)","pinCode":false,"dname":"c4d2cf29-4bdc-48d8-b62d-eb46e79f3ee3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"selectedDb = dbPath","pinCode":false,"dname":"fef3abe1-e11a-4025-8dbd-8bf4131c6ef2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  if (!selectedDb) return `Select a kuzudb 👆🏻`;\n  const {\n    content: [{ nodes }],\n  } = await kuzuQuery(selectedDb, `MATCH (n) RETURN COUNT(n) as nodes;`);\n  const {\n    content: [{ edges }],\n  } = await kuzuQuery(selectedDb, `MATCH ()-[r]->() RETURN COUNT(r) as edges;`);\n  return { nodes, edges };\n}","pinCode":false,"dname":"b0e4696e-bb70-4209-873f-e4a4372be5fc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof selectedTable = Inputs.table(tablesInfo, { multiple: false })","pinCode":false,"dname":"73c165f9-d1c1-495d-9d6f-8bd7ee80f4a7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  if (!selectedTable) return `Select a table 👆🏻`;\n  return html`\n    ${await Button(\"Pull 25\", async () => {\n      if (selectedTable.type == \"NODE\") {\n        pullNodeTable(selectedDb, selectedTable.name, kmSchema, { limit: 25 });\n      } else if (selectedTable.type == \"REL\") {\n        pullRelTable(selectedDb, selectedTable.name, kmSchema, { limit: 25 });\n      }\n    })}\n  `;\n}","pinCode":false,"dname":"394eeb6b-9c8c-4691-b078-6143fad4c3b3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof query = Inputs.textarea({ label: \"Query\" })","pinCode":false,"dname":"8ecd861d-e849-4e7a-88f7-e9b868dde8c4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  return html`\n    ${await Button(\"Run Query (logs to console)\", async () => {\n      const result = await kuzuQuery(selectedDb, query, {});\n      console.log(result);\n    })}\n  `;\n}","pinCode":false,"dname":"268618bb-a77d-455b-ba77-c1e87567188d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable dbNames = []","pinCode":false,"dname":"5b06e17c-90fe-4ed7-aff3-bdffe75ccb7e","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"tablesInfo = {\n  if (!selectedDb) return;\n  const tables = await kuzuQuery(selectedDb, `CALL SHOW_TABLES() RETURN *`);\n  return tables.content;\n}","pinCode":false,"dname":"5681d02e-7dba-4150-9b37-73e86551750b","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  gxr.addContextMenuItem(\n    {\n      name: \"SightXR\",\n      text: \"SightXR\",\n      icon: \"fa fa-rocket\",\n      hide: () => false,\n      enable: () => true,\n      subItems: [\n        rightClickExpand[1],\n        rightClickExpandBetween[1],\n        rightClickExclude[1],\n        rightClickTopic[1],\n        rightClickCollect[1],\n        rightClickUncollect[1],\n        rightClickInspect[1],\n      ],\n    },\n    { after: \"NodeEdgeInformation\" }\n  );\n  return `Custom right click actions for GraphXR`;\n}","pinCode":false,"dname":"a795d883-5055-4788-bdea-746df83365ab","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"rightClickExpand = [\n  \"expand\",\n  {\n    name: \"Expand\",\n    text: \"Expand\",\n    icon: \"fa fa-hand-pointer-o\",\n    hide: () => false,\n    enable: ({ nodeId, edgeId }) => {\n      return gxr.nodes(\"[[selected]]\").length > 0;\n    },\n    action: async (name, nodeId, edgeId, meta) => {\n      console.log({ nodeId, edgeId });\n      const nodes = gxr.nodes(\"[[selected]]\").values();\n      gxr.toast().promise(\n        async () => {\n          for (const node of nodes) {\n            await expandGxrNode(selectedDb, node, kmSchema);\n          }\n        },\n        {\n          pending: `Expanding ${nodes.length} nodes`,\n          success: `Expanded ${nodes.length} nodes`,\n          error: `Failed to expand ${nodes.length} nodes`,\n        }\n      );\n    },\n  },\n]","pinCode":false,"dname":"eec8e92d-5451-47c9-9818-222d3188b13f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"rightClickExpandBetween = [\n  \"expandBetween\",\n  {\n    name: \"Expand Between\",\n    text: \"Expand Between\",\n    icon: \"fa fa-hand-pointer-o\",\n    hide: () => false,\n    enable: () => gxr.nodes(\"[[selected]]\").length > 0,\n    action: async () => {\n      const nodes = gxr.nodes(\"[[selected]]\").values();\n      const pairs = getAllPairs(nodes);\n      console.log(`Expanding between ${nodes.length} nodes`);\n      gxr.toast().promise(\n        async () => {\n          let i = 0;\n          for (const [source, target] of pairs) {\n            console.log(`${i}: Starting expand between`, { source, target });\n            await expandBetweenTwoNodes(selectedDb, source, target, kmSchema, {\n              maxLength: 5,\n            });\n            console.log(`${i}: Ending expand between`, { source, target });\n            i++;\n          }\n        },\n        {\n          pending: `Expanding between ${nodes.length} nodes`,\n          success: `Expanded between ${nodes.length} nodes`,\n          error: `Failed to expand between ${nodes.length} nodes`,\n        }\n      );\n    },\n  },\n]","pinCode":false,"dname":"ede89619-222a-49bc-bd05-2f62c5807260","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"rightClickExclude = [\n  \"exclude\",\n  {\n    name: \"Exclude\",\n    text: \"Exclude\",\n    icon: \"fa fa-hand-pointer-o\",\n    hide: () => false,\n    enable: () => gxr.nodes(\"[[selected]]\").length > 0,\n    action: async () => {\n      const nodes = gxr.nodes(\"[[selected]]\").values();\n      gxr.toast().promise(\n        async () => {\n          for (const node of nodes) {\n            await excludeGxrNode(selectedDb, node, kmSchema);\n          }\n        },\n        {\n          pending: `Excluding ${nodes.length} nodes`,\n          success: `Excluded ${nodes.length} nodes`,\n          error: `Failed to exclude ${nodes.length} nodes`,\n        }\n      );\n    },\n  },\n]","pinCode":false,"dname":"015a8c94-14b4-4681-9bbf-964a68507830","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"rightClickTopic = [\n  \"topic\",\n  {\n    name: \"Topic\",\n    text: \"Topic\",\n    icon: \"fa fa-hand-pointer-o\",\n    hide: () => false,\n    enable: () => gxr.nodes(\"[[selected]]\").length >= 2,\n    action: async () => {\n      const nodes = gxr.nodes(\"[[selected]]\").values();\n      gxr.toast().promise(\n        async () => {\n          await topicGxrNodes(selectedDb, nodes, kmSchema);\n        },\n        {\n          pending: `Creating topic with ${nodes.length} nodes`,\n          success: `Created topic`,\n          error: `Failed to create topic`,\n        }\n      );\n    },\n  },\n]","pinCode":false,"dname":"c97fa4e4-4e52-45be-afa3-f434701362de","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"rightClickCollect = [\n  \"collect\",\n  {\n    name: \"Collect\",\n    text: \"Collect\",\n    icon: \"fa fa-hand-pointer-o\",\n    hide: () => false,\n    enable: () =>\n      gxr.nodes(\"[[selected]]\").filter((n) => n.category == \"Topic\").length > 0,\n    action: async () => {\n      const nodes = gxr\n        .nodes(\"[[selected]]\")\n        .filter((n) => n.category == \"Topic\");\n      gxr.toast().promise(\n        async () => {\n          for (const topic of nodes) {\n            await collectTopic(topic);\n          }\n        },\n        {\n          pending: `Collecting topics`,\n          success: `Collected topics`,\n          error: `Failed to collect topics`,\n        }\n      );\n    },\n  },\n]","pinCode":false,"dname":"c0a832ae-dd53-428b-bad1-5fcae24d1470","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"rightClickUncollect = [\n  \"uncollect\",\n  {\n    name: \"Uncollect\",\n    text: \"Uncollect\",\n    icon: \"fa fa-hand-pointer-o\",\n    hide: () => false,\n    enable: () =>\n      gxr.nodes(\"[[selected]]\").filter((n) => n.category == \"Topic\").length > 0,\n    action: async () => {\n      const nodes = gxr\n        .nodes(\"[[selected]]\")\n        .filter((n) => n.category == \"Topic\");\n      gxr.toast().promise(\n        async () => {\n          for (const topic of nodes) {\n            await uncollectTopic(topic);\n          }\n        },\n        {\n          pending: `Uncollecting topics`,\n          success: `Uncollected topics`,\n          error: `Failed to uncollect topics`,\n        }\n      );\n    },\n  },\n]","pinCode":false,"dname":"8bd557d6-3847-4746-9f0c-eddcd7370fb2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"rightClickInspect = [\n  \"inspect\",\n  {\n    name: \"Inspect\",\n    text: \"Inspect\",\n    icon: \"fa fa-hand-pointer-o\",\n    hide: () => false,\n    enable: () =>\n      gxr.nodes(\"[[selected]]\").filter((n) => n.category == \"Entity\").length >\n        0 ||\n      gxr.edges(\"[[selected]]\").filter((n) => n.relationship == \"RELATED_TO\")\n        .length > 0,\n    action: async () => {\n      gxr.toast().promise(\n        async () => {\n          const entities = gxr\n            .nodes(\"[[selected]]\")\n            .filter((n) => n.category == \"Entity\")\n            .values();\n          const related_to = gxr\n            .edges(\"[[selected]]\")\n            .filter((n) => n.relationship == \"RELATED_TO\")\n            .values();\n          const sourceIds = new Set([\n            ...gxr\n              .edges(\n                entities.flatMap((n) => n.neighbors.map(({ edgeId }) => edgeId))\n              )\n              .filter((e) => e.relationship == \"RELATED_TO\")\n              .property(\"source_id\"),\n            ...related_to.map((e) => e.properties.source_id),\n          ]);\n          const keywords = new Set([\n            ...entities.map((n) => n.properties.label),\n            ...related_to.flatMap((e) => [\n              e.source.properties.label,\n              e.target.properties.label,\n            ]),\n          ]);\n          console.log(sourceIds, keywords);\n          window.opener.pdfViewer.inspectKeywordsInSources(\n            [...sourceIds],\n            [...keywords]\n          );\n        },\n        {\n          pending: `Loading pages...`,\n          success: `Finished loading pages!`,\n          error: `Failed to load pages.`,\n        }\n      );\n    },\n  },\n]","pinCode":false,"dname":"229e7f41-15f1-4e83-96d0-d46015c5faa1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  window.opener.filesExtensionApi.registerAction({\n    id: \"pair-extractor-workflow\",\n    button: {\n      name: \"Apply PairExtractorWorkflow\",\n      toolbar: true,\n      contextMenu: true,\n      group: \"Actions\",\n      icon: \"rocketIcon\",\n    },\n    handler: async (data) => {\n      console.log(\"Custom action triggered\", data);\n      gxr.toast().promise(\n        async () => {\n          const { selectedFiles } = data.state;\n          const projectId = window.localStorage.getItem(\"GRAPHXR_PROJECT_ID\");\n          const payload = {\n            graphxr_base_url: window.localStorage.getItem(\"GRAPHXR_BASE_URL\"),\n            files: selectedFiles,\n          };\n          try {\n            const sightxrBaseUrl = window.localStorage.getItem(\n              \"SIGHTXR_API_BASE_URL\"\n            );\n            const response = await fetch(\n              `${sightxrBaseUrl}/api/projects/${projectId}/sources/from-files`,\n              {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(payload),\n              }\n            );\n            const responseData = await response.json();\n            console.log(\"Files sent successfully\", responseData);\n          } catch (error) {\n            console.error(\"Error sending files:\", error);\n          }\n        },\n        {\n          pending: \"Sending files\",\n          success: \"Successfully sent files\",\n          error: \"Failed to send files\",\n        }\n      );\n    },\n  });\n  return `File Action: PairExtractorWorkflow`;\n}","pinCode":false,"dname":"cc1257ee-b1a2-4ef3-aa78-edcd2e7dd9fc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  window.opener.filesExtensionApi.registerAction({\n    id: \"run-csv-mapping-workflow\",\n    button: {\n      name: \"Apply CSV Mapping\",\n      toolbar: false,\n      contextMenu: true,\n      group: \"Actions\",\n      icon: \"rocketIcon\",\n    },\n    fileFilter: (file) => file && file.name && file.name.endsWith(\".yml\"),\n    requiresSelection: true,\n    handler: async (data) => {\n      const { contextMenuTriggerFile } = data.state;\n      if (!contextMenuTriggerFile.id.endsWith(\".yml\")) {\n        gxr.toast().info(\"This action requires a .yml file to run\");\n        return;\n      }\n      const projectId = window.localStorage.getItem(\"GRAPHXR_PROJECT_ID\");\n      const payload = {\n        graphxr_base_url: window.localStorage.getItem(\"GRAPHXR_BASE_URL\"),\n        file: contextMenuTriggerFile,\n      };\n      const sightxrBaseUrl = window.localStorage.getItem(\n        \"SIGHTXR_API_BASE_URL\"\n      );\n      gxr.toast().promise(\n        async () => {\n          const response = await fetch(\n            `${sightxrBaseUrl}/api/workflows/${projectId}/csv-mapping`,\n            {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify(payload),\n            }\n          );\n          const responseData = await response.json();\n          console.log(\"File sent successfully\", responseData);\n        },\n        {\n          pending: \"Queueing CSV Mapping Workflow\",\n          success: \"Successfully queued CSV Mapping Workflow\",\n          error: \"Failed to queue CSV Mapping Workflow\",\n        }\n      );\n    },\n  });\n  return `File Action: CSV Mapping`;\n}","pinCode":false,"dname":"a66716fd-53d2-4938-9f18-ccfb29280919","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  window.opener.filesExtensionApi.registerAction({\n    id: \"graphxr-to-kuzudb-relatedto\",\n    button: {\n      name: \".graphxr -> kuzudb (RELATED_TO graph)\",\n      toolbar: false,\n      contextMenu: true,\n      group: \"Actions\",\n      icon: \"rocketIcon\",\n    },\n    requiresSelection: true,\n    handler: async (data) => {\n      console.log(\"Custom action triggered\", data);\n      gxr.toast().promise(\n        async () => {\n          const { selectedFiles } = data.state;\n          const projectId = window.localStorage.getItem(\"GRAPHXR_PROJECT_ID\");\n          const payload = {\n            graphxr_base_url: window.localStorage.getItem(\"GRAPHXR_BASE_URL\"),\n            files: selectedFiles,\n            schema: {\n              Entity: {\n                type: \"NODE\",\n                properties: {\n                  id: \"string\",\n                  label: \"string\",\n                  category: \"string\",\n                  excluded: \"boolean\",\n                },\n                primary_key: \"id\",\n              },\n              RELATED_TO: {\n                type: \"REL\",\n                properties: { source_id: \"string\" },\n                from: \"Entity\",\n                to: \"Entity\",\n              },\n              Topic: {\n                type: \"NODE\",\n                properties: { id: \"string\", label: \"string\" },\n                primary_key: \"id\",\n              },\n              ENTITY_TO_TOPIC: {\n                type: \"REL\",\n                properties: {},\n                from: \"Entity\",\n                to: \"Topic\",\n              },\n            },\n          };\n          try {\n            const sightxrBaseUrl = window.localStorage.getItem(\n              \"SIGHTXR_API_BASE_URL\"\n            );\n            const response = await fetch(\n              `${sightxrBaseUrl}/api/workflows/${projectId}/graphxr-to-kuzudb`,\n              {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(payload),\n              }\n            );\n            const responseData = await response.json();\n            console.log(\"Files sent successfully\", responseData);\n          } catch (error) {\n            console.error(\"Error sending files:\", error);\n          }\n        },\n        {\n          pending: \"Sending files\",\n          success: \"Successfully sent files\",\n          error: \"Failed to send files\",\n        }\n      );\n    },\n  });\n  return `File Action: .graphxr -> kuzudb (RELATED_TO graph)`;\n}","pinCode":false,"dname":"abedeb81-aff9-46c5-b619-8a9f8e16e392","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  window.opener.filesExtensionApi.registerAction({\n    id: \"graphxr-to-kuzudb-observationgraph\",\n    button: {\n      name: \".graphxr -> kuzudb (ObservationGraph)\",\n      toolbar: false,\n      contextMenu: true,\n      group: \"Actions\",\n      icon: \"rocketIcon\",\n    },\n    requiresSelection: true,\n    handler: async (data) => {\n      console.log(\"Custom action triggered\", data);\n      gxr.toast().promise(\n        async () => {\n          const { selectedFiles } = data.state;\n          const projectId = window.localStorage.getItem(\"GRAPHXR_PROJECT_ID\");\n          const payload = {\n            graphxr_base_url: window.localStorage.getItem(\"GRAPHXR_BASE_URL\"),\n            files: selectedFiles,\n            schema: {\n              Entity: {\n                type: \"NODE\",\n                properties: {\n                  id: \"string\",\n                  label: \"string\",\n                  category: \"string\",\n                  excluded: \"boolean\",\n                },\n                primary_key: \"id\",\n              },\n              RELATED_TO: {\n                type: \"REL\",\n                properties: { source_id: \"string\" },\n                from: \"Entity\",\n                to: \"Entity\",\n              },\n              Observation: {\n                type: \"NODE\",\n                properties: {\n                  id: \"string\",\n                  source_label: \"string\",\n                  source_category: \"string\",\n                  target_label: \"string\",\n                  target_category: \"string\",\n                  source_id: \"string\",\n                },\n                primary_key: \"id\",\n              },\n              ENTITY_HAS_OBSERVATION: {\n                type: \"REL\",\n                properties: {},\n                from: \"Entity\",\n                to: \"Observation\",\n              },\n              Topic: {\n                type: \"NODE\",\n                properties: { id: \"string\", label: \"string\" },\n                primary_key: \"id\",\n              },\n              ENTITY_TO_TOPIC: {\n                type: \"REL\",\n                properties: {},\n                from: \"Entity\",\n                to: \"Topic\",\n              },\n            },\n          };\n          try {\n            const sightxrBaseUrl = window.localStorage.getItem(\n              \"SIGHTXR_API_BASE_URL\"\n            );\n            const response = await fetch(\n              `${sightxrBaseUrl}/api/workflows/${projectId}/graphxr-to-kuzudb`,\n              {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(payload),\n              }\n            );\n            const responseData = await response.json();\n            console.log(\"Files sent successfully\", responseData);\n          } catch (error) {\n            console.error(\"Error sending files:\", error);\n          }\n        },\n        {\n          pending: \"Sending files\",\n          success: \"Successfully sent files\",\n          error: \"Failed to send files\",\n        }\n      );\n    },\n  });\n  return `File Action: .graphxr -> kuzudb (ObservationGraph)`;\n}","pinCode":false,"dname":"f1787fd2-a353-40f6-a6c3-a80c95011f3f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"kuzudbSchemaById = ({\n  ObservationGraph: {\n    Entity: {\n      primaryKey: \"label\",\n      properties: { label: \"string\", category: \"string\", excluded: \"boolean\" },\n    },\n    Observation: {\n      primaryKey: \"id\",\n      properties: {\n        id: \"serial\",\n        source_label: \"string\",\n        source_category: \"string\",\n        target_label: \"string\",\n        target_category: \"string\",\n      },\n    },\n    ENTITY_HAS_OBSERVATION: {\n      properties: {},\n      from: \"Entity\",\n      to: \"Observation\",\n    },\n    Topic: { primaryKey: \"label\", properties: { label: \"string\" } },\n    RELATED_TO: {\n      properties: { source_id: \"string\" },\n      from: \"Entity\",\n      to: \"Entity\",\n    },\n    ENTITY_TO_TOPIC: { properties: {}, from: \"Entity\", to: \"Topic\" },\n  },\n  RELATED_TO_Graph: {\n    Entity: {\n      primaryKey: \"label\",\n      properties: { label: \"string\", category: \"string\", excluded: \"boolean\" },\n    },\n    Topic: { primaryKey: \"label\", properties: { label: \"string\" } },\n    RELATED_TO: {\n      properties: { source_id: \"string\" },\n      from: \"Entity\",\n      to: \"Entity\",\n    },\n    ENTITY_TO_TOPIC: { properties: {}, from: \"Entity\", to: \"Topic\" },\n  },\n})","pinCode":false,"dname":"6a581965-d832-4b28-b4d0-81715d27f729","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"kmSchema = kuzudbSchemaById[kuzudbSchemaId]","pinCode":false,"dname":"244f5a38-f55c-4f77-bf06-d3aeaaf346db","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"pullNodeTable = async (dbName, tableName, schema, { limit = 25 }) => {\n  const { content } = await kuzuQuery(\n    selectedDb,\n    `MATCH (n:${selectedTable.name}) RETURN n LIMIT 25`\n  );\n  const nodes = content.map(({ n }) => toGxrNode(n, schema));\n  console.log(nodes);\n  gxr.add(nodes);\n  gxr.forceLayout();\n}","pinCode":false,"dname":"aa8651cf-8266-462f-80b5-4325a815e400","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"pullRelTable = async (dbName, tableName, schema, { limit = 25 }) => {\n  console.log(dbName, tableName, schema);\n  const sourceLabel = schema[tableName].from;\n  const targetLabel = schema[tableName].to;\n  const { content } = await kuzuQuery(\n    selectedDb,\n    `MATCH (n:${sourceLabel})-[r:${selectedTable.name}]->(m:${targetLabel}) RETURN n, r, m LIMIT 25`\n  );\n  console.log(content);\n  content.forEach(({ n, r, m }) => {\n    gxr.add(toGxrNode(n, schema));\n    gxr.add(toGxrNode(m, schema));\n    gxr.add(toGxrEdge(n, r, m, schema));\n  });\n  gxr.forceLayout();\n}","pinCode":false,"dname":"293256a9-c3b5-4f61-9883-e532c735e5dd","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Button(\"Add Edges\", async () => {\n  \n  gxr.add({\n    sourceId: \"November 8, 2002\",\n    targetId: \"m4kfnu0vjg96a3c8hn\",\n    relationship: \"OHNO\",\n    properties: {},\n  });\n})","pinCode":false,"dname":"79edda18-3a52-438a-826a-4c93bc75bba0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"collectTopic = async (topicNode) => {\n  console.log(\"Collecting topic node\", topicNode);\n  const neighbors = topicNode.neighbors\n    .map(({ nodeId, edgeId, direction }) => [\n      gxr.edges(edgeId).first(),\n      gxr.nodes(nodeId).first(),\n    ])\n    .filter(\n      ([edge, node]) =>\n        node.category == \"Entity\" && edge.relationship == \"ENTITY_TO_TOPIC\"\n    );\n  for (const [entityEdge, entity] of neighbors) {\n    const edgesToCopy = entity.neighbors.filter(\n      ({ nodeId }) => nodeId != topicNode.id\n    );\n    for (const { nodeId, edgeId, direction } of edgesToCopy) {\n      const edge = gxr.edges(edgeId).first();\n      const oldEdge = {\n        sourceId: direction == \"in\" ? nodeId : entity.id,\n        targetId: direction == \"in\" ? entity.id : nodeId,\n        relationship: edge.relationship,\n        properties: { ...edge.properties },\n      };\n      const newEdge = {\n        sourceId: direction == \"in\" ? nodeId : topicNode.id,\n        targetId: direction == \"in\" ? topicNode.id : nodeId,\n        relationship: edge.relationship,\n        properties: { ...edge.properties, isTopicCollectedEdge: true },\n      };\n      gxr.add(newEdge);\n      entity.topicCollectedEdges = [\n        ...(entity.topicCollectedEdges ?? []),\n        oldEdge,\n      ];\n    }\n    topicNode.topicCollectedEdges = [\n      ...(topicNode.topicCollectedEdges ?? []),\n      {\n        sourceId: entityEdge.sourceId,\n        targetId: entityEdge.targetId,\n        relationship: entityEdge.relationship,\n        properties: { ...entityEdge.properties },\n      },\n    ];\n    topicNode.topicCollectedNodes = [\n      ...(topicNode.topicCollectedNodes ?? []),\n      entity,\n    ];\n    gxr.nodes(entity).remove();\n  }\n}","pinCode":false,"dname":"28e3d192-1305-4987-8510-d7719bdf4dfc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"uncollectTopic = async (topicNode) => {\n  console.log(topicNode);\n  window._app.graph.update_degree();\n  if (topicNode.topicCollectedNodes) {\n    for (const edge of topicNode.connectedEdge) {\n      console.log(\"Looking for\", edge);\n      const first = gxr.edges(edge).first();\n      console.log(first);\n      if (first.properties.isTopicCollectedEdge) {\n        console.log(\"Removing edge\", first);\n        gxr.edges(first).remove();\n      }\n    }\n    for (const node of topicNode.topicCollectedNodes) {\n      gxr.add(node);\n    }\n    for (const edge of topicNode.topicCollectedEdges) {\n      gxr.add(edge);\n    }\n    for (const node of topicNode.topicCollectedNodes) {\n      for (const edge of node.topicCollectedEdges ?? []) {\n        gxr.add(edge);\n      }\n      node.topicCollectedEdges = [];\n    }\n    topicNode.topicCollectedNodes = [];\n    topicNode.topicCollectedEdges = [];\n  }\n}","pinCode":false,"dname":"af018bd6-3b8a-4561-ac6b-7a5d927efecb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"topicGxrNodes = async (dbName, gxrNodes, schema) => {\n  console.log(\"Topic\", { dbName, gxrNodes, schema });\n  if (gxrNodes.length < 2) {\n    return;\n  }\n  const topics = Object.fromEntries(\n    gxrNodes.filter((n) => n.category == \"Topic\").map((n) => [n.id, n])\n  );\n  const entities = Object.fromEntries(\n    gxrNodes.filter((n) => n.category == \"Entity\").map((n) => [n.id, n])\n  );\n  // Augment the topics map (from the canvas) with topics\n  // in the database, connected to any of the entities.\n  for (const entity of Object.values(entities)) {\n    const { content } = await kuzuQuery(\n      selectedDb,\n      `MATCH (entity)-[r]-(topic:Topic)\n       WHERE entity.label = $label\n       RETURN entity, r, topic`,\n      { label: entity.properties.label }\n    );\n    if (content.length > 0) {\n      const [{ topic }] = content;\n      topics[topic.id] = toGxrNode(topic, kmSchema);\n    }\n  }\n  // Make a list of all entities connected to the topics.\n  // We will delete the topics, then create a new one.\n  // We will connect all the entities to the new topic.\n  for (const topic of Object.values(topics)) {\n    const query = `MATCH (entity:Entity)-[r]-(topic:Topic)\n       WHERE topic.label = $label\n       RETURN entity`;\n    const params = { label: topic.properties.label };\n    console.log(\"Finding entities of topic\", topic, query, params);\n    const { content } = await kuzuQuery(selectedDb, query, params);\n    console.log(\"Topic entities\", content);\n    content.forEach(({ entity }) => {\n      entities[entity.label] = toGxrNode(entity, kmSchema);\n    });\n  }\n  for (const topic of Object.values(topics)) {\n    await kuzuQuery(\n      selectedDb,\n      `MATCH (topic:Topic {label: $label})\n      DETACH DELETE topic;`,\n      { label: topic.properties.label }\n    );\n    gxr.nodes([topic.id]).remove();\n  }\n  console.log({ topics, entities });\n  const labels = new Set();\n  for (const entity of Object.values(entities)) {\n    labels.add(entity.properties.label);\n  }\n  const label = [...labels].join(\",\");\n  console.log(\"New label\", label);\n  const { content } = await kuzuQuery(\n    selectedDb,\n    `CREATE (topic:Topic {label: $label})\n     RETURN topic;`,\n    { label }\n  );\n  console.log(content);\n  const topicNode = toGxrNode(content[0].topic, kmSchema);\n  gxr.add(topicNode);\n  for (const existingEntity of Object.values(entities)) {\n    const { content } = await kuzuQuery(\n      selectedDb,\n      `MATCH (topic:Topic {label: $topicLabel}), (dbEntity:Entity {label: $entityLabel})\n       CREATE (dbEntity)-[r:ENTITY_TO_TOPIC]->(topic)\n       RETURN dbEntity, r, topic;`,\n      {\n        topicLabel: topicNode.properties.label,\n        entityLabel: existingEntity.properties.label,\n      }\n    );\n    console.log(content);\n    if (content.length > 0) {\n      const { dbEntity, r, topic } = content[0];\n      console.log({ dbEntity, r, topic });\n      gxr.add(toGxrEdge(dbEntity, r, topic, kmSchema));\n    }\n  }\n  gxr.nodes(gxrNodes.filter((n) => n.category == \"Topic\")).remove();\n}","pinCode":false,"dname":"8fbbddae-5988-4c4b-b684-f7ff9b8df062","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"expandGxrNode = async (dbName, gxrNode, schema) => {\n  console.log(`Expanding`, gxrNode);\n  const { category, properties } = gxrNode;\n  const { primaryKey } = schema[category];\n  const params = { primaryKey: properties[primaryKey] };\n  // out edges\n  const outQuery = `\n    MATCH (source)-[r]->(neighbor)\n    WHERE source.${primaryKey} = \\$primaryKey\n    RETURN source, r, neighbor;\n  `;\n  const { content: outContent } = await kuzuQuery(selectedDb, outQuery, params);\n  outContent.forEach(({ source, r, neighbor }) => {\n    gxr.add(toGxrNode(source, schema));\n    gxr.add(toGxrNode(neighbor, schema));\n    gxr.add(toGxrEdge(source, r, neighbor, schema));\n  });\n  // in edges\n  const inQuery = `\n    MATCH (source)<-[r]-(neighbor)\n    WHERE source.${primaryKey} = \\$primaryKey\n    RETURN source, r, neighbor;\n  `;\n  const { content: inContent } = await kuzuQuery(selectedDb, inQuery, params);\n  inContent.forEach(({ source, r, neighbor }) => {\n    gxr.add(toGxrNode(source, schema));\n    gxr.add(toGxrNode(neighbor, schema));\n    gxr.add(toGxrEdge(neighbor, r, source, schema));\n  });\n  gxr.forceLayout();\n}","pinCode":false,"dname":"823d9f2a-bff4-4e5e-8d89-9945966ae816","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"excludeGxrNode = async (dbName, gxrNode, schema) => {\n  console.log(`Excluding`, gxrNode);\n  const { category, properties } = gxrNode;\n  const tableSchema = schema[category];\n  const { primaryKey } = tableSchema;\n  const query = `\n    MATCH (n)\n    WHERE n.${primaryKey} = \\$primaryKey\n    SET n.excluded = true\n    RETURN n;\n  `;\n  const params = { primaryKey: properties[primaryKey] };\n  const { content } = await kuzuQuery(selectedDb, query, params);\n  const newProperties = _.pick(\n    content[0].n,\n    Object.keys(tableSchema.properties)\n  );\n  gxrNode.properties = { ...gxrNode.properties, ...newProperties };\n}","pinCode":false,"dname":"be8b84bb-05c7-47e0-b9de-d6813664588d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"expandBetweenTwoNodes = async (\n  dbName,\n  sourceNode,\n  targetNode,\n  schema,\n  { maxLength = 3 } = {}\n) => {\n  console.log(`Expanding`, {\n    dbName,\n    sourceNode,\n    targetNode,\n    schema,\n    maxLength,\n  });\n  if (!sourceNode || !targetNode) return;\n  const { primaryKey: sourcePK } = schema[sourceNode.category];\n  const { primaryKey: targetPK } = schema[targetNode.category];\n  const idToString = ({ table, offset }) => `${table}_${offset}`;\n  const run = async (length) => {\n    let matchClause = `MATCH `;\n    let returnClause = `RETURN `;\n    let whereClause = ``;\n    for (let i = 0; i < length; i++) {\n      matchClause += `(n${i}:Entity)-[r${i}]-`;\n      returnClause += `n${i}, r${i}, `;\n      if (i > 0 && i < length) {\n        whereClause += `AND n${i} <> n0 AND n${i} <> n${length} AND n${i}.excluded <> true `;\n      }\n      for (let j = 1; j < length; j++) {\n        if (j != i) {\n          whereClause += `AND n${i} <> n${j} `;\n        }\n      }\n    }\n    matchClause += `(n${length}:Entity)`;\n    returnClause += `n${length}`;\n    const query = `\n        ${matchClause}\n        WHERE n0.\\`${sourcePK}\\` = $sourceValue\n        AND n${length}.\\`${targetPK}\\` = $targetValue\n        ${whereClause}\n        ${returnClause}\n    `;\n    const params = {\n      sourceValue: sourceNode.properties[sourcePK],\n      targetValue: targetNode.properties[targetPK],\n    };\n    try {\n      const { content } = await kuzuQuery(selectedDb, query, params);\n      for (const path of content) {\n        const nodeById = {};\n        for (let i = 0; i <= length; i++) {\n          const node = path[`n${i}`];\n          const id = idToString(node._id);\n          nodeById[id] = node;\n          gxr.add(toGxrNode(node, kmSchema));\n        }\n        for (let i = 0; i < length; i++) {\n          const kuzuEdge = path[`r${i}`];\n          const sourceId = idToString(kuzuEdge._src);\n          const targetId = idToString(kuzuEdge._dst);\n          const sourceNode = nodeById[sourceId];\n          const targetNode = nodeById[targetId];\n          const gxrEdge = {\n            sourceId: sourceNode[schema[sourceNode._label].primaryKey],\n            targetId: targetNode[schema[targetNode._label].primaryKey],\n            relationship: kuzuEdge._label,\n            properties: _.omit(kuzuEdge, [\"_src\", \"_dst\", \"_id\", \"_label\"]),\n          };\n          gxr.add(gxrEdge);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error querying kuzudb\", e);\n    }\n  };\n  for (let i = 1; i <= maxLength; i++) {\n    await run(i);\n  }\n}","pinCode":false,"dname":"9a818783-8bfe-482e-a362-8f89633415d2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"toGxrNode = (n, schema) => ({\n  id: n[schema[n._label].primaryKey],\n  category: n._label,\n  properties: _.omit(n, [\"_id\", \"_label\"]),\n})","pinCode":false,"dname":"0c0a1116-feb3-4fb7-b19e-a72d7b070485","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"toGxrEdge = (n, r, m, schema) => ({\n  sourceId: n[schema[n._label].primaryKey],\n  targetId: m[schema[m._label].primaryKey],\n  relationship: r._label,\n  properties: _.pick(r, Object.keys(schema[r._label].properties)),\n})","pinCode":false,"dname":"1da2d888-b2b9-45d9-98a7-e708da859a62","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"kuzuQuery = async (path, query, params = {}) => {\n  try {\n    const projectId = window.opener.globalVariable.project._id;\n    //     console.log({ path, query, params });\n    const response = await fetch(`/api/kuzudb/${projectId}/query`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n      body: JSON.stringify({ path, query, projectId, params }),\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error:\", error);\n    throw error;\n  }\n}","pinCode":false,"dname":"4c4b299b-2eeb-4677-9905-b4fa540f2985","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function getAllPairs(array) {\n  const result = [];\n  // Loop through each element except the last one\n  for (let i = 0; i < array.length - 1; i++) {\n    // For each element, loop through all following elements\n    for (let j = i + 1; j < array.length; j++) {\n      result.push([array[i], array[j]]);\n    }\n  }\n  return result;\n}","pinCode":false,"dname":"8e78149e-c194-4c49-bf9a-0950fa7afb8a","codeMode":"javascript2"}}}],"version":"2.19.1"}
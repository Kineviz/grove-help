{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Reading Local Files\n\n<p style=\"background: #fffced; box-sizing: border-box; padding: 10px 20px;\">***Update Oct. 2021:*** *Observable now supports [**file inputs**](/@observablehq/input-file)! This notebook will remain for history, but please upgrade to [Observable Inputs](/@observablehq/inputs).*</p>\n\nAs an alternative to [attaching a file](https://observablehq.com/@observablehq/file-attachments) to your notebook, you can read files from your local file system in Observable using a file input:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof file = (html`<input type=file accept=\"image/*\">`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`The initial value of a file input is undefined, so any cell that references this file will wait for the reader to choose a file before running. If you’d an initial value so that referencing cells run on load, wrap the input in a form and assign the form’s value. Or, import my reusable [file input with initial value](/@mbostock/file-input-with-initial-value).`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`A [File](https://developer.mozilla.org/docs/Web/API/File) is a [Blob](https://developer.mozilla.org/docs/Web/API/Blob), so one way to read a file is to use [URL.createObjectURL](https://developer.mozilla.org/docs/Web/API/URL/createObjectURL). This is useful, for example, with images. (Don’t forget to [revoke](https://developer.mozilla.org/docs/Web/API/URL/revokeObjectURL) your URLs, though, say using [Generators.disposable](https://github.com/observablehq/notebook-stdlib/blob/master/README.md#Generators_disposable).)`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"html`<img src=\"${URL.createObjectURL(file)}\">`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`This works with [require](https://github.com/observablehq/stdlib/blob/master/README.md#require), too.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof source = (html`<input type=file accept=\".js\">`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"module = (require(URL.createObjectURL(source)))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can also read a file using a [FileReader](https://developer.mozilla.org/docs/Web/API/FileReader). Observable’s [standard library](https://github.com/observablehq/stdlib/blob/master/README.md) includes several convenience methods for reading files.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Files","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`If the file is text, use Files.text to obtain a promise to a String.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof text = (html`<input type=file accept=\"text/*\">`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Files.text(text)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`For a binary file, use Files.buffer for a promise to an ArrayBuffer.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof binary = (html`<input type=file>`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Files.buffer(binary)","pinCode":false}}}],"version":"2.19.1"}
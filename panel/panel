{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Panel`","pinCode":false,"dname":"83f8e2b5-cc78-4073-9e08-c831ca9009c4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof ui = (Panel({\n  first: Range([0, 1000], {value: 100, label: \"first value\", step:10}),\n  second: addClass(Range([0, 1000], {value: 5, label: \"2nd (custom style)\"}), \"hide-number yellow\"), // custom css\n  myTrigger: Button(\"Click me\", {label:'trigger something'}),\n  myToggle: Toggle({label: \"this is a toggle\"}),\n  fruit: Select(['apple','orange','lemon'], {label: \"fruit\"}),\n  vegetables: Select(['carrot','potato'], {label: \"vegetables\"}),\n  mytext: Text({label: \"my text\", placeholder: \"Enter here\"}),\n  mytext2: Text({placeholder: \"no label here\"}),\n  noLabelRange: Range([0,1], {}),\n}))","pinCode":false,"dname":"e0f94fa7-a1b3-419d-964c-b7b5239a9834","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"ui.second","pinCode":false,"dname":"0d2a14b7-b034-41e6-8601-b75d8ed1c040","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"ui.asObject","pinCode":false,"dname":"65c8c1c5-9081-4b7b-a98a-e53677a5d73e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"ui.group('first', 'myTrigger')","pinCode":false,"dname":"57119a8e-bc56-4d6e-8745-2b14209da84a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof anotherUI = (addClass(Panel({\n  unused: Text({placeholder: \"example with custom css\", disabled:true}),\n  a: Range([0, 100], {value: 5, label: \"param a\", step:1}),\n  b: Range([0, 100], {value: 15, label: \"param b\", step:1}),\n  c: Range([0, 100], {value: 25, label: \"param c\", step:1}),\n  d: Range([0, 100], {value: 85, label: \"param d\", step:1})\n}), \"my-custom-style\"))","pinCode":false,"dname":"b1f7d402-8919-45a7-abf5-4118e8189421","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"anotherUI.asObject","pinCode":false,"dname":"6a8d06ac-f1c1-49ee-8b79-a172c2fcaf7e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Panel = {\n\n\tfunction init(descriptor) {\n    var id = 'panel'+Math.floor(Math.random()*1000000);\n\t\tvar div = html`<div id=\"${id}\" class=\"panel-div\"></div>`;\n    var factories = {};\n\t\tvar rvalue = {}\n\t\t\n    div.appendChild(html`${PanelCss(id)}`);\n    \n\t\tfunction appendElement(name) {\n      \n      let control = descriptor[name], transform=null;\n      let hasValue = typeof(control.value)!='undefined';\n      if (Array.isArray(control)) {\n        transform = control[1];\n        control = control[0];\n      }\n      let el = html`<div class=\"panel-element\"/>`;\n\t\t\tdiv.appendChild(el);\n      if (control.jsliderDesc) {     \n  \t\t\tel.appendChild(html`<div>pippo</div>`);\n  \t\t\tel.appendChild(control);\n      }\n      else {\n  \t\t\tel.appendChild(control);\n      }\n      if (hasValue) {\n  \t\t\trvalue[name] = control.value;\n        let iteratorFactory = factories[name] = newIteratorFactory(name);\n  \n        iteratorFactory.setValue(control.value);\n        control.addEventListener(\"input\", function(event) {\n          console.log('input '+name);\n          event.preventDefault();\n          event.stopPropagation();\n          iteratorFactory.setValue(control.value);\n          rvalue[name] = control.value;\n        });\n      }\n      if (transform)\n        transform(el, control);\n\t\t}\n\n    for (var k in descriptor) \n\t\t\tappendElement(k);\n\t\t\n    function getValue() {\n      // console.log('get value');\n      // console.log(factories);\n      var ret = {};\n      for(var k in factories) {\n        let fact = factories[k];\n        Object.defineProperty(ret, k, {\n          get: ()=>fact.make(),\n          set: () => { }\n        });\n      }\n      Object.defineProperty(ret, \"group\", {\n        get: ()=>aggregate,\n        set: () => { }\n      });\n      Object.defineProperty(ret, \"asObject\", {\n        get: ()=>aggregate(),\n        set: () => { }\n      });\n      Object.defineProperty(ret, \"read\", {\n        get: ()=>(()=>rvalue),\n        set: () => { }\n      });\n      return ret;\n    }\n    \n\t\tObject.defineProperty(div, \"value\", {\n\t\t\tget: ()=>getValue(),\n\t\t\tset: () => { }\n\t\t});\n\t\tvar t = {};\n\n\n    function aggregate() {\n      if (arguments.length==0 || arguments[0]=='*')\n        return aggregateIterators(factories)\n      \n\t\t\tvar t = {};\n\t\t\tfor (var i = 0; i < arguments.length; i++) \n\t\t\t\tt[arguments[i]] = factories[arguments[i]];\n\n      return aggregateIterators(t);\n\t\t}\n\n\t\treturn div;\n\t}\n\treturn init;\n}","pinCode":false,"dname":"d8022774-f24d-4e29-88a2-21b6f2352f63","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"PanelCss = (id=>`<style>\n  #${id} { \n    overflow:hidden; \n    position:relative; \n    margin:0;\n    padding: 0 0 8px 0;\n  }\n\n  #${id} .panel-element {\n      overflow: hidden;\n      position: relative;\n      float: left;\n      box-sizing: border-box;\n      width: 33.33%;\n      background: linear-gradient(90deg, rgba(245,245,245,1) 0%, rgba(255,255,255,1)  100%);\n      padding: 0 3px 0 3px;\n      /*border: 1px solid #c0c0c0;*/\n  }\n\n\n  #${id} .panel-element.whole-line {\n      width:100%;\n  }\n\n\n  #${id} label {\n    text-align: right;\n  }\n\n  #${id} .yellow {\n    background-color:#ffff0080;  \n  }\n\n  #${id} .hide-number input[type=number] {\n    display: none;\n  }\n</style>\n`)","pinCode":false,"dname":"0c422579-d811-4c60-859c-d58f3c746fed","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"customStyle = (html`<style> \n  .my-custom-style input {\n    color: darkred;\n    font-weight: bold;\n  }\n  .my-custom-style .panel-element {\n      /*background: linear-gradient(90deg, rgba(180,255,180,1) 0%, rgba(255,255,255,1)  100%) !important ;*/\n      background:unset!important;\n  }\n  .panel-element {\n      background: unset!important\n  }\n</style>`)","pinCode":false,"dname":"9e04f018-d20b-4adf-ac05-d74e4e6002a5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"newIteratorFactory = (function newIteratorFactory(name) {\n\tvar curValue = null;\n\tvar curPromise = Promise.resolve(curValue);\n\tvar curResolve = () => 0;\n\n\tfunction setValue(val) {\n    console.log('set '+name);\n\t\tif (val != curValue) {\n\t\t\tvar oldResolve = curResolve;\n\t\t\tcurPromise = new Promise(function (resolve) {\n\t\t\t\tcurResolve = resolve;\n\t\t\t});\n\t\t\tcurValue = val;\n\t\t\toldResolve(val);\n\t\t}\n\t}\n\n\tfunction make() {\n\t\tasync function* g() {\n      yield curValue;\n\t\t\twhile (true) {\n\t\t\t\tlet p = curPromise;\n\t\t\t\tvar x = await p;\n        console.log('yield '+name);\n\t\t\t\tyield x;\n\t\t\t}\n\t\t}\n\t\treturn g();\n\t}\n\treturn {make, setValue};\n})","pinCode":false,"dname":"47f57165-903c-41ff-85eb-ae4abffad7a0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"aggregateIterators = (function aggregateIterators(factories, initialValues) {\n  var curValues = Object.assign({}, initialValues);\n  var curPromise = Promise.resolve(curValues);\n\tvar curResolve = () => 0;\n\n  function nextPromise() {\n    var oldResolve = curResolve;\n    curPromise = new Promise(function(resolve) {\n      curResolve = resolve;\n    });\n    oldResolve(curValues);\n  }\n\n  async function* generator() {\n    yield curValues;\n    while (true) {\n      let p = curPromise;\n      var x = await p;\n      console.log('aggr yield');\n      yield x;\n      nextPromise()\n\t\t}\n  }\n\n  \n  async function startLoop(key) {\n    let iterator = factories[key].make(); \n    async function get() {\n      let tokenPromise = iterator.next(); // is an async iterator\n      let token = await tokenPromise; // token = {done:..., value:...}\n      let valuePromise = token.value; // my value is a Promise\n      let value = await valuePromise;\n      // console.log({iterator, tokenPromise, token, valuePromise, value});\n      return value;\n    }\n    var y = await get();\n    curValues[key] = y;\n    \n    var debugCount = 0;\n    while(true) {\n      let value = await get();\n      if (value!=curValues[key]) {\n        curValues[key] = value;\n        nextPromise();\n        // var oldResolve = curResolve;\n        // curPromise = new Promise(function(resolve) {\n        //   curResolve = resolve;\n        // });\n        // oldResolve(curValues);\n      }\n    }\n  }\n  \n  \n  for(var k in factories) \n    startLoop(k);\n  \n  var mainIterator = generator();\n  return mainIterator;  \n})","pinCode":false,"dname":"14cfaa39-de89-4642-81ce-7666bdceb17a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"addClass = (function addClass(element, cssClasses) {\n  for(var c of cssClasses.split(' '))\n    element.classList.add(c);\n  return element;\n})","pinCode":false,"dname":"4aca76f5-f214-456b-9783-01b01bfa460a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { Button,Toggle,Range,Select,Text }  from 'panel/inputs'","pinCode":false,"dname":"a8557b5d-8abf-4c61-921c-5fd2c1b2deac","codeMode":"javascript2"}}}],"version":"2.19.1"}
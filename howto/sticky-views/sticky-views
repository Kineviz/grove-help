{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Sticky Views\n\nLetâ€™s do an experiment. First, pick an even number ${tex`n = ${n1}`} between 0 and 100:`","pinCode":false,"dname":"6b1b7d85-7f55-4703-be61-104d57d45920","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof n1 = (html`<input type=\"range\" min=\"0\" max=\"100\" step=\"2\">`)","pinCode":false,"dname":"bb8d5749-4299-4d8e-b6ba-19b4981aa837","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Now pick a number ${tex`i = ${i1}`} between 0 and ${tex`n_1`}:`","pinCode":false,"dname":"60dbafc7-08ed-4da3-8866-e0f7f46835f2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof i1 = (html`<input type=\"range\" min=\"0\" max=\"${n1}\" step=\"1\">`)","pinCode":false,"dname":"c0683a8e-8d0a-4f30-aa4d-86da627ebcc9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`But what if you change your mind about ${tex`n`}? If you go back and change ${tex`n`}, ${tex`i`} resets to its default value ${tex`n / 2`}. Oops! ðŸ¤” So letâ€™s try again, this time having ${tex`i`} preserve its existing value whenever ${tex`n`} changes.\n\nPick an even number ${tex`n = ${n2}`} between 0 and 100:`","pinCode":false,"dname":"b550afee-802c-4725-8cfa-8678d103a077","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof n2 = (html`<input type=\"range\" min=\"0\" max=\"100\" step=\"2\">`)","pinCode":false,"dname":"434963ea-3462-432b-a22f-f47bdd6134d1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Pick a number ${tex`i = ${i2}`} between 0 and ${tex`n`}:`","pinCode":false,"dname":"902d070e-d19f-44ce-bf3b-43feb6a51de2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof i2 = (html`<input type=\"range\" min=\"0\" max=\"${n2}\" step=\"1\" value=\"${this ? this.value : n2 / 2}\">`)","pinCode":false,"dname":"3e589d81-8a4e-4905-8a2e-35ab6e8272b6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Now try changing ${tex`n`}; as long as ${tex`n \\geq i`}, youâ€™ll retain the existing value of ${tex`i`}. Yay! ðŸŽ‰\n\nIn Observable, \\`this\\` is the *previous* value of the current cell. For \\`viewof i2\\` above, \\`this\\` is the HTMLInputElement created previously (with the old value of \\`n2\\`), and \\`this.value\\` is the old inputâ€™s value. Thus, when \\`n2\\` changes and \\`viewof i2\\` is re-evaluated, we can initialize the new HTMLInputElement with the value of the old HTMLInputElement.\n\nWhat about the first time \\`viewof i2\\` runs, and there is no previous value? Then \\`this\\` is undefined, and we initialize the inputâ€™s value to ${tex`n_2 / 2`}. The previous value is also cleared when you edit the cellâ€™s code or rerun using Shift-Enter.\n\nIf you prefer, an alternative approach is to listen explicitly for *input* events on \\`viewof n2\\` instead of referencing \\`n2\\` reactively:`","pinCode":false,"dname":"49b93d11-9d0a-42ea-baf2-9e9cd5027c50","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof i3 = {\n  const input = html`<input type=\"range\" min=\"0\" step=\"1\">`;\n  function inputted() { input.max = viewof n2.value; }\n  viewof n2.addEventListener(\"input\", inputted);\n  invalidation.then(() => viewof n2.removeEventListener(\"input\", inputted));\n  inputted();\n  return input;\n}","pinCode":false,"dname":"4d022382-28ae-463f-bb10-c882ffc7c1dd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`But event listeners are cumbersome to manage, requiring [invalidation](/@mbostock/disposing-content). And thatâ€™s why Observable exposes a cellâ€™s previous value as \\`this\\`.\n\nFor more on \\`this\\`, see [Tomâ€™s notebook](/@tmcw/untitled/5).`","pinCode":false,"dname":"07c1ab73-23bc-4785-8cec-76461ac9db39","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`### <center>Visualizing Relationships of Molecular Content in a Big Data Environment</center>`","pinCode":false,"dname":"f07460a5-18b7-4cb5-9487-97c3a0a45ae1","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Smiles Viewer Controls"}},{"type":"codeTool","data":{"codeData":{"value":"html \n`<div style=\"margin-bottom:40px\">\n  <div style=\"position:absolute; left:10px\"> Smiles On </div>\n  <div style=\"position:absolute; left:100px\"> ${viewof on} </div>\n  <div style=\"position:absolute; left:240px\"> Sticky </div>\n  <div style=\"position:absolute; left:300px\"> ${viewof sticky} </div> \n</div>`","pinCode":false,"dname":"b20e1954-09ab-4ef8-b95a-5a6e6b93c01a","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof on = Inputs.radio([true,false], {value: true})","pinCode":false,"dname":"2d2d530a-1b9f-49e3-8407-f759a1884dbe","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"viewof sticky = Inputs.radio([true,false], {value: false})","pinCode":false,"dname":"5025de4e-2a39-4818-9fec-e50ae50a5b5b","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"paragraph","data":{"text":"Upload Service Account Key"}},{"type":"codeTool","data":{"codeData":{"value":"viewof inputFile = html`<label for=\"lname\">Service Account File</label> <input type=\"file\" onchange=\"readFile(event)\" name=\"Service Credential JSON\" id=\"lname\">`","pinCode":false,"dname":"44e5d2b5-2860-4dc6-bf64-f44fcd0f40e7","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Upload Mapping definition file"}},{"type":"codeTool","data":{"codeData":{"value":"viewof data_in = html`<input type=file accept=\"*/*\">`","pinCode":false,"dname":"49adee03-96c5-4c8d-be40-1f1a64086f63","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Assay Search"}},{"type":"codeTool","data":{"codeData":{"value":"viewof target = Inputs.select(['SGLT2', 'DPP4', 'KRAS', 'JAK3', 'MDM2', 'IL17'], {value: \"SGLT2\", label: \"Select Target\"})","pinCode":false,"dname":"bb27a48f-694c-4834-806f-9921b908dcc5","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof assayType = Inputs.select(['Any','EC50', 'IC50', 'Ki'], {value: \"Any\", label: \"Select Assay Type\"})","pinCode":false,"dname":"ed777fa6-2ffd-4834-ae76-a85394c7251c","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Search Assays for ${target} with ${assayType}`, {reduce: async ()=>{  \n  let queryStr = `select * from black-dragon-324218.ACS.assay_w_target_limited \n  where target='${target}' `;\n  if(assayType !=='Any')\n   queryStr += `and acname='${assayType}'`\n   \n  mutable targetData = await runBigQuery(queryStr)\n}, label: 'Query Target'})","pinCode":false,"dname":"3d3659ef-26c2-4e2f-864b-7503a26d3c01","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Matching Assays:"}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.table(targetData==0? [] : targetData, {rows: 6})","pinCode":false,"dname":"7994bbba-cf91-4216-8302-335ffbcb2684","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"html`   \n<style> \n  .inputs-cont form{display:inline-block;}\n</style>\n\n<div class=\"inputs-cont\"> \n<div style='width:150px;Text-align:center;float:left;'>\n  ${viewof addToGraph}\n</div>\n<div style='width:170px;Text-align:center;float:left;'>\n  ${viewof extractCidView}\n</div>\n<div style='width:180px;Text-align:center;float:left;'>\n  ${viewof assignURL}\n</div>\n\n</div> `","pinCode":false,"dname":"162437d4-7604-4cfd-b62b-84b3d3effae1","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof addCount=Inputs.button('Add Count To CIDS', {reduce: async ()=>{\n  let nodePool = api.getLayoutGraph().getVisibleNodes() \n  let sourceNodes = nodePool.filter(n=>n.category==\"Cid\")\n  console.table(sourceNodes)\n  sourceNodes.map(n => n.properties.PatentCount = 0)\n  let relDef = relationships.CID_TO_PATENT\n  let query = querySrc2Tgt(sourceNodes,relDef.isKeyInt,relDef,categories[relDef.target].properties)\n  let data = await runBigQuery(query)\n  console.table(data)\n  let i \n  for(i = 0; i < data.length; i++){\n    sourceNodes.filter(n=>n.properties.cid == parseInt([data[i].cid]))[0].properties.PatentCount++\n  }\n  sourceNodes = nodePool.filter(n=>n.category==\"Cid\")\n  console.table(sourceNodes)\n  sourceNodes.map(n => n.properties.PublicationCount = 0)\n  relDef = relationships.CID_TO_PMID\n  query = querySrc2Tgt(sourceNodes,relDef.isKeyInt,relDef,categories[relDef.target].properties)\n  data = await runBigQuery(query)\n  console.table(data)\n  for(i = 0; i < data.length; i++){\n    sourceNodes.filter(n=>n.properties.cid == parseInt([data[i].cid]))[0].properties.PublicationCount++\n  }\n  \n // let data = await runBigQuery(query)\n}})","pinCode":false,"dname":"56a63d44-93c0-4495-a656-5249248cb22d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof addToGraph=Inputs.button('Add Assays to Graph', {reduce: async ()=>{\n  addAssayDataToGraph(targetData)\n}})","pinCode":false,"dname":"c0126630-7ba6-4d36-b413-5c2946f9dc3e","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"addAssayDataToGraph =async (targetData)=>{\n let data = targetData.map(d=>({...d, key: [d.aid, d.cid, d.acname, d.acvalue].join('-')}))\n api.getLayoutGraph().addNodes(genNodesFromJsonArray(data, 'Assay', 'key'));\n  await delay(500)\n  API.layout.start()\n}","pinCode":false,"dname":"c74068d1-73f6-4fe5-88e6-e14d5a52053f","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"viewof extractCidView =Inputs.button('Extract Target/Cid', {reduce: async ()=>{\n  extractCid();\n  \n  await delay(500)\n  \n  extractTarget();\n  \n  await delay(500)\n  api.getLayoutGraph().applyTransform(api.shortcut({\n    incomingRelationship: 'W_CId',\n    centerCategory: 'Assay',\n    outgoingRelationship: 'W_TARGET',\n    shortcutRelationship: \"CID_TARGET\",\n    directional: false,\n    aggregateProperties: [\n  //     {\n  //       sourceProperty: \"age\",\n  //       targetProperty: \"averageAge\",\n  //       formula: \"average\",\n  //     }\n    ],\n    countLinks: false,\n  }))\n     \n  await delay(500)\n  api.getLayoutGraph().removeEdges(\n    api.getLayoutGraph()\n    .getEdges()\n    .filter(e=>e.relationship=='W_TARGET').map(e=>e.id)\n  )  \n  \n  await delay(500)\n  layoutTargetInCenter()\n\n}})","pinCode":false,"dname":"38e3372b-4dd2-480d-8683-55205da76129","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"layoutTargetInCenter=async ()=>{\n  API.selectNodes(\n    api\n    .getLayoutGraph()\n    .getNodes()\n    .filter(n=>n.category == 'Target')\n    .map(n=>n.id)\n  )\n  await delay(500)\n  \n  let view=api.getLayoutGraph()\n  let selectedNodeIds = view.getNodes()\n    .filter(n=>view.getNodeStyles(n.id).selected)\n    .map(n=>n.id) \n// return selectedNodeIds\n  view.applyLayout(api.ego({\n    nodes: selectedNodeIds,\n    mode: 'rings',\n    depth: 2,\n    edgeLength: 1,\n    orientation: 'down',\n    sortByProperty: 'cid',\n    alongRelationships: ['W_CId', 'CID_TARGET']\n  }))\n\n  await delay(500)\n\n  API.selectNodes([])\n}","pinCode":false,"dname":"a4205b8f-9cef-4931-99f3-1843ad543431","codeMode":"javascript2","vimEnabled":false,"insertMode":false,"hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"viewof assignURL = Inputs.button(\"Assign URL to Nodes\", {reduce: ()=>{\n  api.getLayoutGraph().getVisibleNodes()\n    .filter(n=>n.category=='Cid')\n    .forEach(\n      n=>n.properties.url=\n      `https://pubchem.ncbi.nlm.nih.gov/compound/${n.properties.cid}`)\n\n  api.getLayoutGraph().getVisibleNodes()\n    .filter(n=>n.category=='Pmid')\n    .forEach(\n      n=>n.properties.url=\n      `https://pubmed.ncbi.nlm.nih.gov/${n.properties.pmid}/`)\n\n  api.getLayoutGraph().getVisibleNodes()\n    .filter(n=>n.category=='Chembl')\n    .forEach(\n      n=>n.properties.url=\n      `https://www.ebi.ac.uk/chembl/g/#search_results/all/query=${n.properties.chemblid}`)\n\n  api.getLayoutGraph().getVisibleNodes()\n    .filter(n=>n.category=='Patents')\n    .forEach(\n      n=>n.properties.url=\n        `https://pubchem.ncbi.nlm.nih.gov/patent/${n.properties.patentid}`)\n//       `https://patents.google.com/patent/${n.properties.patentid.replaceAll('-','')}/en`)\n\n  \n}})","pinCode":false,"dname":"58852a8b-daba-44b0-b9b9-4a6387277d11","codeMode":"javascript2","hide":true}}},{"type":"paragraph","data":{"text":"Expand"}},{"type":"codeTool","data":{"codeData":{"value":"viewof selCategory = Inputs.select(\n  selectedNodes.length==0? \n  Object.keys(categories) : _.uniq(selectedNodes.map(n=>n.category)), \n  {label:'Select Category'})","pinCode":false,"dname":"efc8e009-5a82-4f26-be2f-89e6a7624273","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof selRelationship = Inputs.select(\n  _.chain(relationships)\n  .map((v, k)=>({...v, relationship: k}))\n  .filter(d=>(d.source==selCategory || d.target==selCategory))\n  .map(d=>d.relationship)\n  .value(), \n  {label:'Select Relationship'})","pinCode":false,"dname":"30b9fa6a-0caa-48e1-adfe-cb235920acc2","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Expand ${selCategory} on ${selRelationship}`, {reduce: async ()=>{\n  let nodePool = selectedNodes.length == 0 ? api.getLayoutGraph().getVisibleNodes() \n    : selectedNodes\n  let nodes = nodePool.filter(n=>n.category==selCategory) \n  if(nodes.length==0) return\n//   detect extraction\n  console.log(\"here\")\n  let relDef=relationships[selRelationship]\n  if((relDef.source==selCategory) && relDef.extractTgt){\n    console.log(\"het 1\")\n    relDef.extractTgt()\n  \n  }else if((relDef.target==selCategory) && relDef.extractSrc){\n    console.log(\"het 2\")\n    relDef.extractSrc()\n  }else{\n  //   we do expand\n//     for await( const node of nodes){\n      console.log(nodes)\n       expand(nodes, selRelationship)\n//     }\n  }\n  return nodes\n}})","pinCode":false,"dname":"bf344bf1-fb7a-4077-81db-5604df08fc01","codeMode":"javascript2"}}},{"type":"paragraph","data":{"text":"Query sample from DB"}},{"type":"codeTool","data":{"codeData":{"value":"viewof sampleCount = Inputs.range([0, 500], {value: 20, step: 10, label: \"Count\"})","pinCode":false,"dname":"923c7131-1330-4dfb-a8a2-cdce98f9a97e","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof queryCategoryCondition=Inputs.textarea({label: \"Query Condition\", placeholder: \"Appl_No in (21852, 208183)\", rows: 1})","pinCode":false,"dname":"7ec6977f-0f8a-4113-b944-5bce473f94c7","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Add sample ${selCategory} to Graph`, {reduce: async ()=>{\n  addSampleCategoryToGraph(selCategory, sampleCount)\n}})","pinCode":false,"dname":"82ba7c45-9de0-44a2-a7af-e98e5aec89ae","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Search Category"}},{"type":"codeTool","data":{"codeData":{"value":"viewof searchBox = Text({ label: \"Search \" + selCategory, placeholder: \"HeartBurn\" })","pinCode":false,"dname":"5779ada2-1078-4821-abe0-c031f38777b5","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof search = Inputs.button(\"Search and Add To Graph\", {value: null, reduce: () => {\n  let properties\n  console.log(categories[selCategory].properties)\n  if(categories[selCategory].properties == undefined){\n    properties = \"*\"\n  }else{\n    properties =  categories[selCategory].properties\n  }\n    \n let s = `SELECT ${properties} FROM ${categories[selCategory].table} WHERE regexp_contains(${categories[selCategory].searchProp},'(?i)${searchBox}')`\n  console.log(s)\n  searchThenAddToGraph(selCategory,s,categories[selCategory].key)\n}})","pinCode":false,"dname":"72bf08b2-c7e7-495d-909f-b4d8204d2ca8","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(\"Extract\", {value: null, reduce: () => {\n  extractCategory()\n}})","pinCode":false,"dname":"ab78219a-2637-4a54-8aea-0fe314317b2c","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Edit Relationship Mapping"}},{"type":"codeTool","data":{"codeData":{"value":"html`${[viewof cat1, viewof tab1, viewof key1,viewof cat2, viewof tab2,viewof key2,viewof rel,viewof isKeyInt,viewof addMapping]}`","pinCode":false,"dname":"db18462a-498a-4e70-ae57-2291202d14a0","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Edit Category Mapping"}},{"type":"codeTool","data":{"codeData":{"value":"html`${[viewof editCategory,viewof categoryTable,viewof properties,viewof categoryKey,viewof extractName, viewof extractProps, viewof searchProp,viewof isSearchInt,viewof addCategory]}`","pinCode":false,"dname":"4607bc0c-5c86-4f59-9137-73f68fef4451","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"html`${[downloadMapping]}`  ","pinCode":false,"dname":"0c16f75b-cdc8-4736-979a-1462bf4c6f68","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Assay View"}},{"type":"codeTool","data":{"codeData":{"value":"viewof extractTargetView=Inputs.button('Extract Target', {reduce: ()=>{\n  extractTarget();\n}, width: 150})","pinCode":false,"dname":"9122a1f9-0325-4ce7-8b5d-9e85fe6429f2","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable selectedCids = api.observe('select', () => {\n  let view = api.getLayoutGraph()\n  return view.getVisibleNodes()\n    .filter(n=>view.getNodeStyles(n.id).selected)\n    .filter(n=>n.category=='Cid')\n    .map(n=>n.properties.cid)\n});","pinCode":false,"dname":"1a0fa745-6289-4e17-910b-f6f2ad5009a6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof extractACValueView =Inputs.button('Extract ACValue', {reduce: ()=>{\n//   extractAid();\n  extractAcValue();\n}})","pinCode":false,"dname":"71ffd06e-4885-4925-bf92-7e8d65b7262a","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable cidWmultipleTargets=[]","pinCode":true,"dname":"0151fd7a-cbc4-4f61-80d4-6cc6849abde6","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable targetData=[]","pinCode":true,"dname":"9e07d7da-6db5-4b6b-98e7-6088dabee660","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Mapping HTML Definitions"}},{"type":"codeTool","data":{"codeData":{"value":"mutable downloadMapping = {\n  let obj = new Object({})\n  obj.relationships = relationships\n  obj.categories = categories\n  return DOM.download(serialize(obj), \"BigQueryMapping\", \"Download Mapping File\")}","pinCode":false,"dname":"47d18c9d-073e-48c5-9e43-8e35f6567d26","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof key2 = Text({label: \"Category 2 Key\", placeholder: \"Column Name\",submit: true })","pinCode":false,"dname":"32cd7bfc-59e0-4a08-adb4-f34635379f97","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof isKeyInt = toggleSwitch({\n  textOn: 'Key is Integer',\n  textOff: 'Key is String'\n})","pinCode":false,"dname":"79523722-841d-4158-bbaa-f7a750e16f3f","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof cat2 = Text({label: \"Category 2 Alias\", placeholder: \"Category Name\",submit: true })","pinCode":false,"dname":"f62d3f16-ca22-453e-bf4b-49f9de9fa42b","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof tab2 = Text({ label: \"Category 2 Table\", placeholder: \"project.dataset.table\" ,submit: true})","pinCode":false,"dname":"3bfd9328-30a5-49d2-9488-d6bbb2d33c5d","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof key1 = Text( {label: \"Category 1 Key\", placeholder: \"Column Name\",submit: true })","pinCode":false,"dname":"2866be19-1e9a-47b4-af19-e4abdf3a51a1","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof cat1 = Text({ label: \"Category 1 Alias\", placeholder: \"Category Name\",submit: true })","pinCode":false,"dname":"4071afd0-9833-40ab-8869-4a725fb853da","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof tab1 = Text({ label: \"Category 1 Table\", placeholder: \"project.dataset.table\" ,submit: true})","pinCode":false,"dname":"0c6fbd95-8c3d-46a2-bf60-cc70b806202f","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof rel = Text({ label: \"Relationship Name\", placeholder: \"Relationship Name\",submit: true })","pinCode":false,"dname":"3420a3fb-a072-4148-bf88-5cf304aa950c","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof addMapping = Inputs.button(\"Add Mapping\", {value: null, reduce: () => {\n  if(mappingNotEmpty){\n    let rMap = new Object({\n    source: cat1,\n    target: cat2,\n    key1: key1,\n    key2: key2,\n    tab1: tab1,\n    tab2: tab2,\n    isKeyInt:isKeyInt,\n    })\n    relationships[rel] = rMap\n    let cMap,cMap2;\n    if(categories[cat1] == undefined){\n        cMap = new Object({\n        key: key1,\n        table:tab1,\n        properties: \"*\"\n      })\n    }else{\n      cMap = categories[cat1]\n      cMap.table = tab1;\n    }\n    if(categories[cat2] == undefined){\n        cMap2 = new Object({\n        key: key2,\n        table:tab2,\n        properties: \"*\"\n      })\n    }else{\n      cMap2 = categories[cat2]\n      cMap2.table = tab2;\n    }\n    categories[cat1] = cMap\n    categories[cat2] = cMap2\n  let obj = new Object({})\n  obj.relationships = relationships\n  obj.categories = categories\n  mutable downloadMapping = DOM.download(serialize(obj), \"BigQueryMapping\", \"Download Mapping File\")\n  \n  }\n  \n}})","pinCode":false,"dname":"60c7ea2c-ccb8-44b4-8407-2c92fa2fd7b3","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Category HTML Definitions"}},{"type":"codeTool","data":{"codeData":{"value":"viewof editCategory = Inputs.select(\n  selectedNodes.length==0? \n  Object.keys(categories) : _.uniq(selectedNodes.map(n=>n.category)), \n  {label:'Select Category'})","pinCode":false,"dname":"7fc3e6a8-093f-4eb2-9ce6-9f3c02582201","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof categoryTable = Text({ label: \"Category Table\", placeholder: \"project.dataset.table\" ,submit: true,value: editCategory !== null ? categories[editCategory].table : undefined})","pinCode":false,"dname":"afe8bf2b-107e-43a1-9054-e56f3096e3bc","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof properties = Text({label: \"Properties to Select\", placeholder: \"Column Names\",submit: true,value: (editCategory !== null && categories[editCategory] !== undefined)? categories[editCategory].properties : undefined })","pinCode":false,"dname":"8eba8ab3-c942-4fe3-b405-464c9790decd","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof extractName = Text({label: \"Extract Category\", placeholder: \"New Category Name\",submit: true,value:(editCategory !== null && categories[editCategory] !== undefined) ? categories[editCategory].extractName : undefined })","pinCode":false,"dname":"b56cc11f-0c84-4350-a1cd-b6cfacb20646","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof extractProps = Text({label: \"Extract Properties\", placeholder: \"Data, data, data\",submit: true,value: (editCategory !== null && categories[editCategory] !== undefined) ? categories[editCategory].extractProps : undefined })","pinCode":false,"dname":"abcb7be8-770b-4b8a-ae5a-3b34b1d93c85","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof searchProp = Text({label: \"Column to Search\", placeholder: \"Column Name\",submit: true,value: (editCategory !== null && categories[editCategory] !== undefined) ? categories[editCategory].searchProp : true})","pinCode":false,"dname":"31aed204-e569-42b8-8ad6-9198ae40c72d","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof isSearchInt = toggleSwitch({\n  textOn: 'Search is Integer',\n  textOff: 'Search is String',\n  value: (editCategory !== null && categories[editCategory] !== undefined) ? categories[editCategory].searchType : undefined \n})","pinCode":false,"dname":"9e115df6-e36b-49e1-af45-5a8be503364e","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof categoryKey = Text({label: \"Key\", placeholder: \"Column Name\",submit: true,value: (editCategory !== null && categories[editCategory] !== undefined) ? categories[editCategory].key : undefined})","pinCode":false,"dname":"8a7ee7f4-2b2b-47ea-a1d0-f6e1036f2f6e","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof addCategory = Inputs.button(\"Edit Category\", {value: null, reduce: () => {\n  if(editCategory !== undefined){\n    let cMap = new Object({\n      table:categoryTable,\n      properties: properties,\n      extractName:extractName,\n      extractProps:extractProps,\n      searchProp:searchProp,\n      searchType:isSearchInt,\n      key:categoryKey\n    })\n    categories[editCategory] = cMap\n  }\n    let obj = new Object({})\n  obj.relationships = relationships\n  obj.categories = categories\n  mutable downloadMapping = DOM.download(serialize(obj), \"BigQueryMapping\", \"Download Mapping File\")\n  \n  \n}})","pinCode":false,"dname":"156cfdc4-2488-4cf9-82ac-112fff0b41ba","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"Function Resources"}},{"type":"codeTool","data":{"codeData":{"value":"extractCid=()=>{\n  let graph = api.getLayoutGraph()\n  graph.applyTransform(\n    api.extract({\n      category: \"Assay\",\n      props: [\n        {\n          name: \"cid\",\n          newName: \"cid\",\n          isSplit: false,\n          splitChar: \"\",\n          isKey: true,\n        },{\n          name: \"inchikey\",\n          newName: \"inchikey\",\n          isSplit: false,\n          splitChar: \"\",\n          isKey: false,\n        },{\n          name: \"smiles\",\n          newName: \"smiles\",\n          isSplit: false,\n          splitChar: \"\",\n          isKey: false,\n        }\n        \n      ],\n      newCategory: \"Cid\",\n      newRelationship: \"W_CId\",\n      inheritLinks: false,\n      skipEmpty: true,\n    })\n  )\n}","pinCode":false,"dname":"f0bf7e11-d996-47cf-81ae-c0df2b70a070","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"extractAcValue=()=>{\n  let graph = api.getLayoutGraph()\n  graph.applyTransform(\n    api.extract({\n      category: \"Assay\",\n      props: [\n        {\n          name: \"acvalue\",\n          newName: \"acvalue\",\n          isSplit: false,\n          splitChar: \"\",\n          isKey: true,\n        }\n        \n      ],\n      newCategory: \"Assay_Value\",\n      newRelationship: \"W_ASSAY_VALUE\",\n      inheritLinks: false,\n      skipEmpty: true,\n    })\n  )\n}","pinCode":false,"dname":"30b37cfe-c705-4f93-a0ba-bd9775202b94","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"extractAid = ()=>{\n  let graph = api.getLayoutGraph()\n  graph.applyTransform(\n    api.extract({\n      category: \"Assay\",\n      props: [\n        {\n          name: \"aid\",\n          newName: \"aid\",\n          isSplit: false,\n          splitChar: \"\",\n          isKey: true,\n        },{\n          name: \"aidname\",\n          newName: \"aidname\",\n          isSplit: false,\n          splitChar: \"\",\n          isKey: false,\n        }\n        \n      ],\n      newCategory: \"Aid\",\n      newRelationship: \"W_AId\",\n      inheritLinks: false,\n      skipEmpty: true,\n    })\n  )\n}","pinCode":false,"dname":"d1421d6b-1088-467f-98bb-16848288c39e","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"extractTarget=()=>{\n  let graph = api.getLayoutGraph()\n  graph.applyTransform(\n    api.extract({\n      category: \"Assay\",\n      props: [\n        {\n          name: \"target\",\n          newName: \"target\",\n          isSplit: false,\n          splitChar: \"\",\n          isKey: true,\n        }\n      ],\n      newCategory: \"Target\",\n      newRelationship: \"W_TARGET\",\n      inheritLinks: false,\n      skipEmpty: true,\n    })\n  )\n}","pinCode":false,"dname":"9669066c-5bf9-4912-9438-796bca28945b","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"runBigQuery = async (queryStr)=>{  \n  let result = await bqClient.bigquery.jobs.query({\n    projectId: [projectID],\n    resource: {\n      // See https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#QueryRequest\n      query:\n        [queryStr],\n      useLegacySql: false\n    }\n  })\n//   console.log(result)\n\n  if(result==null | result.result.totalRows==0) return []\n  let keys=result.result.schema.fields.map(f=>f.name)\n  return result.result.rows\n    .map(row=>row.f.map(x=>x.v))\n    .map(arr=>_.fromPairs(_.zip(keys,arr)))\n}","pinCode":false,"dname":"b8c61608-3983-47f4-9599-f385e3ed15f1","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"expand=async (nodes, relationship)=>{\n  let relDef = relationships[relationship];\n\n  if(nodes[0].category==relDef.source){\n    console.log(\"1\")\n    return await expandSrc(nodes, relationship)\n  }else{\n    console.log(\"2\")\n      expandTgt(nodes, relationship)\n  }\n\n}","pinCode":false,"dname":"e36aa0eb-2519-479f-8bb5-6de71beb19ee","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"extractCategory=()=>{\n  let graph = api.getLayoutGraph()\n  let properties = categories[selCategory].extractProps.split(\",\")\n  let props = []\n  for(let i = 0; i <properties.length; i++){\n    props.push(new Object({          \n          name: properties[i],\n          newName: properties[i],\n          isSplit: false,\n          splitChar: \"\",\n          isKey: true,}))\n  }\n  console.log(props)\n  graph.applyTransform(\n    api.extract({\n      category: selCategory,\n      props: props,\n      newCategory: categories[selCategory].extractName,\n      newRelationship: selCategory+\"_TO_\" + categories[selCategory].extractName,\n      inheritLinks: false,\n      skipEmpty: true,\n    })\n  )\n}","pinCode":false,"dname":"5c34b572-8ce5-4173-ae7d-d6b32b5b304e","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"addSampleCategoryToGraph= async(category, cnt)=>{\n  let catDef = categories[category];\n  let data\n  //if(catDef.querySample !== undefined)\n    data = (await runBigQuery(querySample(cnt,catDef.table,catDef.properties)))\n // else if(catDef.getSampleData !== undefined)\n  //  data = catDef.getSampleData(cnt)\n // else\n//    alert('getting data is not defined')\n //         \n  if(catDef.postQueryFunc!==undefined){\n   // data = catDef.postQueryFunc(data)\n  }\n  let nodes = genNodesFromJsonArray(data, category, catDef.key)\n  api.getLayoutGraph().addNodes(nodes)\n  api.triggerForceLayout() \n  return data\n}","pinCode":false,"dname":"fbcb8cbf-8074-4f61-9131-bf17f9068723","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function querySample(cnt,table,properties){\n  if(properties == undefined){\n    properties = \"*\"\n  }\n  return `SELECT ${properties} FROM ${table}\n    ${queryCategoryCondition.length > 0? 'where '+ queryCategoryCondition : '' }\n  LIMIT ${cnt} `\n                         }","pinCode":false,"dname":"d44e692b-3d87-44b0-aebc-bcc3d1628e06","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"searchThenAddToGraph= async(category, query,key)=>{\n  let data\n   data = (await runBigQuery(query))\n\n          \n  let nodes = genNodesFromJsonArray(data, category, key)\n  api.getLayoutGraph().addNodes(nodes)\n  api.triggerForceLayout() \n  return data\n}","pinCode":false,"dname":"27cf8e0c-eef7-4778-b81d-41b2f0fdaabf","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"expandSrc = async (sourceNodes, relationship)=>{\n  let relDef = relationships[relationship]\n  let srcCat = sourceNodes[0].category\n  let srcDef = categories[srcCat]\n  let tgtCat = relDef.target\n  let tgtDef = categories[tgtCat]\n  \n  \n  console.log(categories[relDef.source].properties)\n  let query = querySrc2Tgt(sourceNodes,relDef.isKeyInt,relDef,categories[relDef.target].properties)\n   console.log(query)\n  \n  let data = await runBigQuery(query)\n  console.log(data)\n  if(tgtDef.postQueryFunc!==undefined){\n    data = tgtDef.postQueryFunc(data)\n  }\n  \n  let nodes = genNodesFromJsonArray(data, tgtCat, tgtDef.key)\n\n  const view = api.getLayoutGraph();\n  view.addNodes(nodes)\n    setTimeout(function() {\n  view.applyTransform(api.link({\n    sourceCategory: srcCat,\n    sourceProperty: relDef.key1,\n    targetCategory: tgtCat,\n    targetProperty: relDef.key2,\n    relationship: relationship\n  }))\n}, 500)\n  api.triggerForceLayout() \n  return [query, data]\n}","pinCode":false,"dname":"e911dc28-c5da-4940-bf98-54e4f1601134","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"expandTgt = async (targetNodes, relationship)=>{\n  let relDef = relationships[relationship]\n  let tgtCat = targetNodes[0].category\n  let tgtDef = categories[tgtCat]\n  let srcCat = relDef.source\n  let srcDef = categories[srcCat]\n\n  let query = queryTgt2Src(targetNodes,relDef.isKeyInt,relDef,categories[relDef.source].properties)\n  let data = await runBigQuery(query)\n  \n  if(srcDef.postQueryFunc!==undefined){\n    data = srcDef.postQueryFunc(data)\n  }\n  \n  let nodes = genNodesFromJsonArray(data, srcCat, srcDef.key)\n  console.log(nodes)\n  console.log(\"hell;o\")\n\n  const view = api.getLayoutGraph();\n  view.addNodes(nodes)\n  setTimeout(function() {\n    view.applyTransform(api.link({\n    sourceCategory: srcCat,\n    sourceProperty: relDef.key1,\n    targetCategory: tgtCat,\n    targetProperty: relDef.key2,\n    relationship: relationship\n  }))\n}, 500)\n  \n  api.triggerForceLayout() \n  return [query, data]\n}","pinCode":false,"dname":"bd13d806-3d91-4e0a-9099-0d5b98a5843e","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function querySrc2Tgt(srcNodes,keyType,rel,properties){\n//       let condition = srcNode.properties.uid\n      if(properties == undefined){\n        properties = \"*\"\n      }\n      let condition\n      if(keyType){\n        condition = srcNodes.map(n=>n.properties[rel.key1]).join(\", \")\n        console.log(`SELECT * FROM ${rel.tab2} WHERE ${rel.key2} in (${condition})`)\n        return `SELECT ${properties} FROM ${rel.tab2} WHERE ${rel.key2} in (${condition})`\n      }else{\n        condition = srcNodes.map(n=>n.properties[rel.key1]).join(\"', '\")\n        console.log(`SELECT ${properties} FROM ${rel.tab2} WHERE ${rel.key2} in ('${condition}')`)\n        return `SELECT ${properties} FROM ${rel.tab2} WHERE ${rel.key2} in ('${condition}')`\n      }\n      \n      \n    }","pinCode":false,"dname":"2bd11e2c-3de7-41e5-b936-57581ef0151a","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function queryTgt2Src(tgtNodes,keyType,rel,properties){\n      let condition\n      if(properties == undefined){\n        properties = \"*\"\n      }\n       if(keyType){\n        condition = tgtNodes.map(n=>n.properties[rel.key2]).join(\", \")\n         return `SELECT ${properties} FROM ${rel.tab1} WHERE ${rel.key1} in (${condition})`\n         console.log(`SELECT * FROM ${rel.tab1} WHERE ${rel.key1} in (${condition})`)\n      }else{\n        condition = tgtNodes.map(n=>n.properties[rel.key2]).join(\"', '\")\n        console.log(`SELECT * FROM ${rel.tab1} WHERE ${rel.key1} in ('${condition}')`)\n        return `SELECT ${properties} FROM ${rel.tab1} WHERE ${rel.key1} in ('${condition}')`\n      }\n    }","pinCode":false,"dname":"c1a6354d-f816-433e-ae6f-fa17a4b6d831","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function postQueryFunc(data){data.map(d=>({\n       ...d // Appl_No and Product_No combined to form uid\n    }))}","pinCode":false,"dname":"1d645fd6-7f45-4fa3-bde2-f586622c338f","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"data_text = Files.text(data_in)","pinCode":false,"dname":"97e62123-3095-4cc1-b255-071af683d246","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable loadedMapping = new Object({})","pinCode":false,"dname":"d9ac6e16-a9f5-4327-a2de-068910de1cbb","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  mutable loadedMapping = JSON.parse(data_text)\n  let temp = JSON.parse(data_text)\n  let rels = Object.keys(temp.relationships)\n  let cats = Object.keys(temp.categories)\n  for(let i = 0; i < rels.length; i ++){\n    relationships[rels[i]] = temp.relationships[rels[i]]\n  }\n    for(let i = 0; i < cats.length; i ++){\n    categories[cats[i]] = temp.categories[cats[i]]\n  }\n  let obj = new Object({})\n  obj.relationships = relationships\n  obj.categories = categories\n  mutable downloadMapping = DOM.download(serialize(obj), \"BigQueryMapping\", \"Download Mapping File\")\n}","pinCode":false,"dname":"380db248-7b68-4e6f-ac89-2dc9ce751fc8","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"relationships = new Object()","pinCode":false,"dname":"7ef5ff02-b73b-4b99-abbf-2a75a1298e36","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"categories = new Object()","pinCode":false,"dname":"320df4c6-657f-4206-b515-24c3ed97b8c1","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function mappingNotEmpty(){\n  if(cat1.length > 0 && cat2.length > 0 && key1.length > 0 && key2.length > 0\n    && tab1.length > 0 && tab2.length > 0 && rel.length > 0){\n    return true\n  }else{\n    return false \n  }\n}","pinCode":false,"dname":"79366c6f-d1ce-443e-8590-cda3dda6db6d","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"selectedNodes = api.observe('select', () => {\n  let view = api.getLayoutGraph()\n  return view.getVisibleNodes()\n    .filter(n=>view.getNodeStyles(n.id).selected)\n});","pinCode":false,"dname":"235b1772-8f97-4083-84ac-5fae26a769bd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"function genNodesFromJsonArray(dataList, category, key) {\n  const newDataList = dataList.filter(data => {\n    const toMatch = {\n      [key]: data[key],\n    }\n    const toMatchInt = {\n      [key]: parseInt(data[key]),\n    }\n  //  console.log(isNaN(data[key]))\n   // console.log(data[key])\n    //console.log(toMatch)\n\n    return api.getLayoutGraph().getVisibleNodes().filter(n => {\n      //console.log(isNaN(n.properties[key]))\n      if(isNaN(n.properties[key])){\n        return n.category === category && _.isMatch(n.properties, toMatch);\n      }else{\n        return n.category === category && _.isMatch(n.properties, toMatchInt);\n      }\n    }).length === 0;\n  })\n  \n  return newDataList.map((properties) => api.makeNode({properties, category}))\n}","pinCode":false,"dname":"ccba1f81-4f8e-444f-ab96-05f6266a0f15","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"function addButtonStyle() {\n  var el = document.createElement('style');\n  el.setAttribute('type', 'text/css');\n  document.head.appendChild(el);\n  var sheet = el.sheet;\n  function addRule(rule) {\n    try {\n      sheet.insertRule(rule, sheet.cssRules.length);\n    } catch (e) {\n      console.warn('Error inserting rule', rule, e);\n    }\n  }\n  addRule(\n    '.button-switch { -webkit-touch-callout: none;-webkit-user-select: none;-khtml-user-select: none;-moz-user-select: none;-ms-user-select: none;user-select: none;display: inline-block;-webkit-border-radius: 2px;-moz-border-radius: 2px;border-radius: 2px;background-color: #EFEFEF;padding: 0px 7px 0px 7px;text-align: center;border: 1px solid grey;width: auto;color: #1c1c1c;font-size: 13px;font-family: sans-serif;text-decoration: none; }'\n  );\n  addRule(\n    '.button-switch:hover { background-color: #E5E5E5;border: 1px solid #454545; }'\n  );\n  addRule(\n    '.button-switch:active { background-color: #f5f5f5;border: 1px solid grey; }'\n  );\n}","pinCode":false,"dname":"a925b034-386e-4bfd-ba16-d4c3caed2047","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function toggleSwitch(options = { textOn: 'True', textOff: 'False' }) {\n  const button = html`<div class=\"button-switch\"\"></div>`;\n  button.innerText = options.textOn;\n  button.value = true;\n\n  button.onclick = () => {\n    button.value = !button.value;\n    button.innerText = button.value ? options.textOn : options.textOff;\n    button.dispatchEvent(new CustomEvent(\"input\"));\n  };\n\n  addButtonStyle()\n\n  return button;\n}","pinCode":false,"dname":"b6012555-d2aa-45d3-aef7-cecb961d3a20","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"paragraph","data":{"text":"API Resources"}},{"type":"codeTool","data":{"codeData":{"value":"{\n\n  function readFile(event){\n     const inputElement = event.target;\n     const inputFile = inputElement.files[0];\n         \n     var reader = new FileReader();\n     reader.onload = function(loadedEvent) {\n\n        const parsedResult = JSON.parse(loadedEvent.target.result);\n        mutable service_account_credentials = parsedResult;\n     }\n    \n     reader.readAsText(inputFile);\n  }\n  \n  return window.readFile = readFile;\n}","pinCode":true,"dname":"07be235a-369c-4534-9c86-768e86d06405","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable service_account_credentials = 'No File Chosen Yet'","pinCode":true,"dname":"7647c71b-a784-49d1-840c-f44be300e954","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Text = Inputs.text","pinCode":false,"dname":"decd9b3f-03bb-4b72-959a-a7495f713d75","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"api = (await require(\"@kineviz/graphxr-api\")).getApi()","pinCode":false,"dname":"153d7e20-885b-470b-a93c-3ead6ef9a01c","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"async function createGapi({\n  // Create API key https://cloud.google.com/docs/authentication/api-keys\n  apiKey = undefined,\n  // Find the APIs you want to use https://developers.google.com/apis-explorer/#p/\n  discoveryDocs = [],\n  // One way of authenticating is with an access_token\n  // gcloud auth print-access-token\n  access_token = undefined,\n  // Another is with a service account key like\n  /*\n  {\n    \"type\": \"service_account\",\n    \"project_id\": \"...\",\n    \"private_key_id\": \"...\",\n    \"private_key\": \"...\",\n    \"client_email\": \"...@....iam.gserviceaccount.com\",\n    \"client_id\": \"....\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/....iam.gserviceaccount.com\"\n  }*/\n  service_account_key = undefined\n} = {}) {\n  const gapi = await new Promise((resolve, reject) => {\n    require(\"https://apis.google.com/js/api.js\")\n      .catch(() => {\n        window.gapi.load(\"client:auth2\", () => resolve(window.gapi));\n      })\n      .then(() => {\n        window.gapi.load(\"client:auth2\", () => resolve(window.gapi)); // Embeds work?\n      });\n  });\n  await gapi.client.init({\n    apiKey,\n    discoveryDocs\n  });\n  // Auth based on config\n  if (service_account_key) {\n    console.log(\"Using service account to mint access token\");\n    access_token = await getAccessTokenFromServiceAccount(service_account_key);\n  }\n  if (access_token) {\n    console.log(\"Using access token\");\n    gapi.client.setToken({\n      access_token\n    });\n  }\n  return gapi.client;\n}","pinCode":false,"dname":"23e977c5-54f2-42dd-9712-503a4f742120","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"bqClient = await createGapi(gapi_config)","pinCode":false,"dname":"be575a99-2dbc-44c3-8e14-de49727ed8a9","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"async function getAccessTokenFromServiceAccount(serviceAccountKey) {\n  // First create a JWT from the credentials\n  const tNow = Math.floor((new Date()).getTime() / 1000);\n  const sHeader = JSON.stringify({alg: 'RS256', typ: 'JWT'});\n  const sPayload = JSON.stringify({\n      iss: serviceAccountKey.client_email,\n      scope: \"https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/cloud-platform\",\n      iat: tNow,\n      exp: tNow + 600,\n      aud: \"https://oauth2.googleapis.com/token\",\n  });\n  const JWT = jsrsasign.KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, serviceAccountKey.private_key);\n    \n  // Swap JWT for access_token\n  const tokenResponse = await fetch(\n    'https://oauth2.googleapis.com/token',\n    {\n      method: 'POST',\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      body: `grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=${JWT}`,\n    }\n  );\n\n  if (tokenResponse.status != 200) {\n    throw new Error(await tokenResponse.text())\n  }\n  return (await tokenResponse.json()).access_token;\n}","pinCode":false,"dname":"4cdde45c-61e3-46e7-9485-db8193f1c2ad","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"gapi_config = ({\n  discoveryDocs: \n    [\"https://bigquery.googleapis.com/discovery/v1/apis/bigquery/v2/rest\"]\n  ,\n  service_account_key: service_account_credentials\n})","pinCode":false,"dname":"f8589bf9-7beb-423b-905f-4eb467db9aea","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"jsrsasign = require('https://bundle.run/jsrsasign@10.1.4')","pinCode":false,"dname":"36085beb-359a-40cc-81ab-0b38713b39cb","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"projectID = 'black-dragon-324218'","pinCode":false,"dname":"2045bcef-5ae4-481b-bd52-251b8f05d9ed","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function serialize (data) {\n let s = JSON.stringify(data);\n return new Blob([s], {type: \"application/json\"}) \n}","pinCode":false,"dname":"4654a1dc-0572-40de-b016-c8063f308c82","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"delay = time => new Promise(res=>setTimeout(res,time));","pinCode":false,"dname":"4e52a42a-af1b-4e8c-9c00-035d406d1904","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"API=_app.controller.API","pinCode":false,"dname":"f5717c18-9b3a-4ab6-bb90-ed26a2909269","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"{while(true){\n  const view = api.getLayoutGraph();\n  \n  if (on) {\n    let currentlySelected = mutable selected;\n    if (!sticky || !added) {\n      const selectedNodes = getSelected();\n      if (selectedNodes.length > 0) {\n        if (mutable added === false) {\n          mutable added = true\n          scene.add(group)\n        }\n        let check = 3;\n        if(selectedNodes.length < check){\n          check = selectedNodes.length\n        }\n        if (!arraysEqual(selectedNodes.slice(0,check-1),currentlySelected)||(selectedNodes.length ==1 && selectedNodes[0] !== currentlySelected[0])) {\n        currentlySelected = []\n        while(group.children.length > 0){\n            group.remove(group.children[0])\n          }\n        for(let num = 0; num < check; num++){\n        let subGroup = new THREE.Group()\n        let firstSelectedNode = selectedNodes[num]\n        console.log(selectedNodes)\n        console.log(check)\n        //if (currentlySelected.id !== firstSelectedNode.id) {\n          //mutable selected.push(firstSelectedNode)\n          currentlySelected.push(firstSelectedNode)\n          mutable selected = currentlySelected\n          //console.log(firstSelectedNode)\n          \n          let smile = selectedNodes[num].properties.smiles\n          if(smile !== undefined){\n            createLabel(firstSelectedNode, 0, 0, 0, 60, \"black\",smile,subGroup,num)\n            subGroup.scale.set(.002,.002,.002)\n            group.add(subGroup)\n          }\n        }\n            \n        //}\n        }\n      } else {\n        mutable selected = []\n        if (mutable added) {\n          mutable added = false\n          scene.remove(group)\n        }\n      }\n    }\n\n    if (currentlySelected.length > 0) {\n      for(let num = 0; num < currentlySelected.length; num++){\n        if(group.children[num]!== undefined && view.getNodeStyles(currentlySelected[num].id).position !== undefined){\n      group.children[num].position.copy(view.getNodeStyles(currentlySelected[num].id).position)\n      var position = new THREE.Vector3();\n      var quaternion = new THREE.Quaternion();\n      var scale = new THREE.Vector3();\n      _drawing.camera.matrixWorld.decompose(position, quaternion, scale);\n      group.children[num].lookAt(position);\n        }\n      }\n    }\n  }\n  yield\n}}","pinCode":false,"dname":"f0dc83dc-fb30-4144-aaf1-cc22c757371b","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable selected = []","pinCode":false,"dname":"02b057f8-75c1-4490-8c83-637e7a9bf2de","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function createLabel(node, x, y, z, size, color,smile,subGroup,num) {\n  \ncontextArray[num].fillStyle = \"rgba(255, 255, 255, 0.5)\";\n  drawSmile(smile,num)\n\n\t\t\t\t\tvar texture = new THREE.CanvasTexture(contextArray[num].canvas);\n\t\t\t\t\ttexture.needsUpdate = true;\n                    texture.wrapS = 256\n                    texture.wrapT = 512\n                    texture.magFilter = THREE.LinearFilter\n\n\t\t\t\t\tvar material = new THREE.MeshBasicMaterial({\n\t\t\t\t\t\tmap : texture,\n                        transparent: true,\n                        opacity: .8,\n                        depthWrite: false\n                        //color: 'red'\n\t\t\t\t\t});\n\n\t\t\t\t\tvar mesh = new THREE.Mesh(new THREE.PlaneGeometry(contextArray[num].canvas.width, contextArray[num].canvas.height, 10, 10), material);\n\t\t\t\t\tmesh.overdraw = false;\n                    console.log(mesh)\n                    mesh.position.set(350/2 + 20,0,0)\n\t\t\t\t\t// mesh.doubleSided = true;\n\t\t\t\t\t//mesh.position.x = x - canvas.width / 2;\n\t\t\t\t\t//mesh.position.y = y - canvas.height / 2;\n\n\n                    const tx = 0;\n                    const ty = 0;\n\n                    material = new THREE.MeshBasicMaterial({\n\t\t\t\t\t\t//map : texture,\n                        transparent: true,\n                        opacity: .8,\n                        color: '#676A71'\n\t\t\t\t\t});\n                    var triangleShape = new THREE.Shape()\n\t\t\t\t\t.moveTo( 10, 0 )\n\t\t\t\t\t.lineTo( 20, 20 )\n\t\t\t\t\t.lineTo( 20, -20 )\n\t\t\t\t\t.lineTo( 10, 0 );\n                    \n\n                    const TriangleGeometry = new THREE.ShapeGeometry(triangleShape);\n                    var tri = new THREE.Mesh(TriangleGeometry, material);\n                 \n                 subGroup.add(mesh)\n                 subGroup.add(tri)\n}","pinCode":false,"dname":"cc4c9515-96ed-46cf-bb30-344b026829b0","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable added = false","pinCode":true,"dname":"e2a97da4-1768-4d1c-bcc1-95931a368cf4","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"context = DOM.context2d(width, height);","pinCode":true,"dname":"c7891c1a-a39a-400d-b2af-101397d7d705","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"context2 = DOM.context2d(width, height);","pinCode":true,"dname":"77c42e3a-bd13-44cb-b59d-6f7951a49584","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"context3 = DOM.context2d(width, height); ","pinCode":true,"dname":"8962fd17-cbc7-40e8-8d07-ea0711e47bb9","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"context.canvas;","pinCode":true,"dname":"56234634-5838-4eea-8090-48b173895c7f","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"context2.canvas","pinCode":true,"dname":"6ff51002-e340-4fda-998a-df564ab3278f","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"context3.canvas","pinCode":true,"dname":"1a6995f3-435f-43c3-87f3-da396d24253c","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"contextArray = [context,context2,context3] ","pinCode":true,"dname":"b1340b22-3ec5-4404-b455-ec722d7a0fee","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"width = 500","pinCode":true,"dname":"b8612a69-e55d-46f1-bdd7-45b2a14124c7","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"height = 500","pinCode":true,"dname":"40277f94-3e46-4222-8d1a-0e79b84d3e67","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"draw = import(\"https://cdn.skypack.dev/smiles-drawer@1.2.0\")","pinCode":true,"dname":"25d8d748-575c-4472-ab47-d99961ec7bf6","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"smilesDrawer = new draw.default.Drawer({\n      debug: false,\n      atomVisualization: 'default'\n    })","pinCode":true,"dname":"338a01fe-5db3-4836-ad9c-17381958f49b","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function drawSmile(input,num) {\n\n      draw.default.parse(input, function (tree) {\n        smilesDrawer.draw(tree, contextArray[num].canvas, 'dark', false);\n\n\n        console.log(smilesDrawer.getMolecularFormula());\n      }, function (err) {\n\n        console.log(err);\n      });      \n}","pinCode":true,"dname":"37bb472f-80a0-4260-bd45-64f46965d9af","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  if(on === false){\n  scene.remove(group)\n  mutable added = false\n}else{\n  scene.add(group)\n  mutable added = true\n  \n}\n}","pinCode":true,"dname":"009a1ec4-6ee8-4047-80de-ef9862707c00","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function getSelected() {\n  const view = api.getLayoutGraph();\n  return view.getVisibleNodes().filter(n => view.getNodeStyles(n.id).selected); \n}","pinCode":false,"dname":"dd9ee205-6e5c-4ef8-adc3-f04eb17925a4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"scene = api.getScene()","pinCode":false,"dname":"c3116450-c45a-48e5-b978-9658b9c20ddc","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"THREE = _drawing.THREE","pinCode":false,"dname":"3fbc6ca5-5e26-44f2-a92b-dd206eb7829f","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"group = new THREE.Group()","pinCode":false,"dname":"aaff0bd5-df2d-4eaf-b85f-c3c85b7dcf77","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"data = []","pinCode":false,"dname":"0c5fe039-6384-4795-9d14-328d77f67763","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length !== b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n  // Please note that calling sort on an array will modify that array.\n  // you might want to clone your array first.\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}","pinCode":false,"dname":"57efac1e-cdac-4139-a489-00d065ac60e5","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}}],"version":"2.19.1"}
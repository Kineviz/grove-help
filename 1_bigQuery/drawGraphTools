{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Draw Graph`","pinCode":false,"dname":"eaf6483d-b250-4c04-a794-d4ac6b7d05a7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    const { Space, Button, Input } = Antd;\n    const readFile = (event) => {\n       const inputElement = event.target;\n       const inputFile = inputElement.files[0];\n       const reader = new FileReader();\n       reader.onload =  onLoadFunc\n       reader.readAsText(inputFile);\n    }\n    return <Space key='c9a7d04a-0e0e-454c-94b6-fa9a0f8d9881'> \n      <label for=\"myfile\">BigQuery Auth File:</label> <Input type=\"file\" id=\"myfile\" name=\"myfile\" accept=\".json\" onChange={readFile}  /> \n    </Space>;\n})","pinCode":false,"dname":"07787ae1-d5c3-48cc-9ac5-d18ae830bf04","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    const { Space, Button, Input } = Antd;\n    const readFile = (event) => {\n       const inputElement = event.target;\n       const inputFile = inputElement.files[0];\n       const reader = new FileReader();\n       reader.onload =  onLoadMappingFunc\n       reader.readAsText(inputFile);\n    }\n    return <Space key='4488e44f-8bd7-41a4-afa2-5d2f1a4e96cf'> \n      <label for=\"myfile\">Mapping File:</label> \n      <Input type=\"file\" accept=\".json\" onChange={readFile}  /> \n    </Space>;\n})","pinCode":false,"dname":"235dc5b5-bcc7-4e30-baff-82470e19e760","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  const { Select, Space, Form, Table, Button, Input, message } = Antd;\n  const [source,setSource] = useState({});\n  const [target,setTarget] = useState({});\n  const [newRelationship,setNewRelationship] = useState(\"newRelationship\")\n   \n  useSetter({});\n  return <div key='ec0fddf0-fd4a-4e83-aa2e-fd4819a04eb8' className=\"draw-graph\" >\n    <Space direction=\"vertical\">\n      <CategoryComp tag=\"Source\" useSetter={(props)=>{ setSource(props);\n                                                     setCategoryMapping(props);\n                                                     }} />\n      {source.datasetId && source.table &&source.order && <ExtractComp datasetId={source.datasetId} table={source.table} order={source.order} />}\n      <CategoryComp tag=\"Target\" useSetter={(props)=>{ setTarget(props);\n                                                     setCategoryMapping(props); }} />\n      <Form.Item label=\"New Relationship\">\n        <Input value={newRelationship} onChange={(e)=>{\n            setNewRelationship(e.target.value.trim());\n          }} />\n      </Form.Item>\n      <div>\n        {source.datasetId && source.table && source.field && target.datasetId && target.table && target.field && \n          <div> \n            <Button onClick={()=>{\n                api.link({\n                  sourceCategory: `${source.datasetId}_${source.table}`,\n                  sourceProperty: source.field,\n                  targetCategory: `${target.datasetId}_${target.table}`,\n                  targetProperty: target.field,\n                  relationship: newRelationship\n                })\n                setLinkMapping(source, target, newRelationship);\n              }}>Link</Button>\n            <Button onClick={()=>{\n              \n              }}>Save</Button>\n          </div>\n        }\n      </div>\n      \n    </Space>\n  </div>;\n})","pinCode":false,"dname":"30401318-1679-435a-9311-d05d79a109df","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    const { Space, Button } = Antd;\n    return <Space key='343b54fa-dcd5-431f-ae87-4591631706c9' direction=\"vertical\">\n      <Button onClick={()=>{\n        \n        }}>Download Mapping</Button>\n    </Space>;\n})","pinCode":false,"dname":"7308f33e-ed8d-4d67-9fe3-3b1ba82f0f50","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable mapping = ({})","pinCode":false,"dname":"84bbdce6-488a-44b8-aa20-dec7038ee7b7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"","pinCode":false,"dname":"f5bde445-0b0c-4ab6-bc9f-5a329f58ba4a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"## Components","pinCode":false,"dname":"fa12dbac-b29b-4ae7-a9e2-73cbdb29fa81","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"CategoryComp = component(({ tag, useSetter }) => {\n  const { Select, Space, Form, Table, Button, Input, message } = Antd;\n  const datasetIdOptions = [{label:\"None\",value:\"\"}].concat(_.map(datasets,(d)=>{ return {label:d.datasetReference.datasetId,value:d.datasetReference.datasetId} }))\n  const [datasetId, setDatasetId] = useState('');//source datasetId\n  const [tables, setTables ] = useState([{label:\"None\",value:\"\"}])\n  const [table, setTable ] = useState(\"\");//source table\n  const [condition, setCondition] = useState(\"\");\n  const [field, setField ] = useState(\"\");//source field\n  const [order, setOrder ] = useState([{label:\"None\",value:\"\"}]);//all fields of current table\n  const [datas, setDatas ] = useState([]);//table datas\n  const [fields, setFields ] = useState([]);//selected fields to generate nodeId\n  const [nodeId, setNodeId ] = useState(\"\");//nodeId template string\n  const [tableData, setTableData] = useState({});//Query Result\n  let columnsData = getColumnsData(datas);\n  const convertArrayToObject = (order, array, key) =>\n  array.reduce(\n    (obj, item) => ({\n      ...obj,\n      //[item[key]]: item\n      [order[array.indexOf(item)]]:item\n    }),\n    {}\n  );\n  useEffect(async ()=>{\n    try{\n      if(datasetId){\n        let tablesC= tablesMap[datasetId] || JSON.parse((await bqClient.bigquery.tables.list({ projectId: [projectID],datasetId:datasetId,maxResults:1000  })).body).tables;\n        !tablesMap[datasetId] && setTablesMap(datasetId,tablesC)\n        setTables([{label:\"None\",value:\"\"}].concat(_.map(tablesC,(t)=>{\n          return {label:t.tableReference.tableId, value:t.tableReference.tableId}\n        })));\n      }\n    }catch(e){\n      message.error(e.message||e.error||\"get tables error!\");\n    }\n  }, [datasetId, bqClient])\n  useEffect(()=>{\n    datasetId && table && field && order && useSetter && useSetter({datasetId,table,field,order})\n  },[datasetId,table,field, order])\n  return <div key={tag}>\n    <Form.Item label={`${tag} Table Preview`}>\n      <Table dataSource={columnsData.data} columns={columnsData.columns} rowKey={(r)=>{return r.key||columnsData.data.indexOf(r)}} style={{width:\"fit-content\", maxWidth:\"calc(100vw - var(--padding))\", overFlowX:\"auto\"}} scroll={{\n          y: 300,\n        }}/>\n    </Form.Item>\n    <Space direction=\"horizontal\" className=\"d-flex align-items-center\" wrap>\n      <Form.Item label={`${tag} DatasetId`}>\n        <Select disabled={1==datasetIdOptions.length}\n          value={datasetId}\n          style={{ width: 200 }}\n          onChange={async (v)=>{\n            setDatasetId(v)\n            setTables([{label:\"None\",value:\"\"}])\n          }}\n          options={datasetIdOptions} />\n      </Form.Item>\n      <Form.Item label={`${tag} Table`}>\n        <Select disabled={1==tables.length}\n          value={table}\n          style={{ width: 200 }}\n          onChange={async (value) => {\n            setTable(value);\n            setTableData({});\n            setCondition(conditionMap[datasetId] && conditionMap[datasetId][value] || \"\")\n            setFields([]);\n            setDatas([]);\n            if(!value){\n              setOrder([{label:\"None\",value:\"\"}]);\n              setNodeId(\"\")\n            }else{\n              try{\n                let orderT = orderMap[datasetId] && orderMap[datasetId][value] ? orderMap[datasetId][value]: \n                setOrderMap(datasetId, value,(await bqClient.bigquery.tables.get({\n                  projectId: [projectID],\n                  datasetId: datasetId,\n                  tableId: value,\n                })).result.schema?.fields?.map(d => d.name))[datasetId][value];\n                setOrder([{label:\"None\",value:\"\"}].concat(_.map(orderT,(a)=>{return {label:a,value:a}})));\n                let nodeIdT = tableNodeIdMap[datasetId] && tableNodeIdMap[datasetId][value] ? tableNodeIdMap[datasetId][value] : \n                setTableNodeIdMap(datasetId, value, \"\")[datasetId][value];\n                setNodeId(nodeIdT)\n              }catch(e){\n                message.error(e.message||e.error||\"get fields error!\");\n              }\n            }\n          }}\n          options={tables}/>\n      </Form.Item>\n      <Form.Item label={`${tag} Field`}>\n        <Select disabled={1==order.length}\n          mode=\"single\"\n          allowClear\n          style={{ width: 200 }}\n          placeholder=\"Please select field\"\n          value={field}\n          onChange={(v)=>{\n            setField(v)\n          }}\n          options={order}\n          />\n      </Form.Item>\n      <Form.Item label=\"Condition\">\n        <Input value={condition} onChange={(e)=>{\n            setCondition(e.target.value);\n            setConditionMap(datasetId, table, e.target.value);\n            setTableData({});\n          }} />\n      </Form.Item>\n      <Button disabled={!datasetId|| !table} onClick={async ()=>{\n          try{\n            let limitCall = await bqClient.bigquery.jobs.query({\n              projectId: [projectID],\n              resource: {\n                // See https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#QueryRequest\n                query: `select * from ${projectID}.${datasetId}.${table} ${condition?`where ${condition}`:\"\"}`,\n                useLegacySql: false,\n                maxResults: maxResults\n              }\n            })\n            if(!limitCall.result.jobComplete){\n              message.error(limitCall.result.error || limitCall.result.errors)\n              return;\n            }\n            let orderT = setOrderMap(datasetId, table, limitCall.result.schema?.fields?.map(d => d.name))[datasetId][table]\n            let temop = await limitCall.result.rows.map(d => d.f.map(d=>d.v)).map(d=>convertArrayToObject(orderT, d, 'v'));\n            setTableData(limitCall.result);\n            setOrder([{label:\"None\",value:\"\"}].concat(_.map(orderT,(a)=>{return {label:a,value:a}})));\n            setDatas(temop);\n          }catch(e){\n            message.error(e.message||e.error||\"query error!\");\n          }\n        }}>Query</Button>\n      <Button className={(!tableData.pageToken || !tableData.jobReference?.jobId) ?\"hide\":\"\" } onClick={async ()=>{\n          let limitCall = await bqClient.bigquery.jobs.getQueryResults({\n            projectId: [projectID],\n            jobId: tableData.jobReference?.jobId,\n            resource: { // See https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults\n              startIndex: datas.length,  \n              pageToken: tableData.pageToken,\n              maxResults: maxResults\n            }\n          })\n          let temop = await limitCall.result.rows.map(d => d.f.map(d=>d.v)).map(d=>convertArrayToObject(orderMap[datasetId][table], d, 'v'));\n          setTableData(limitCall.result);\n          setDatas(datas.concat(temop));\n        }}>Next Page</Button>\n    </Space>\n    <Space direction=\"horizontal\" wrap>\n      <Form.Item label=\"NodeId\">\n        <Space>\n          <Select disabled={0==order.length}\n            mode=\"multiple\"\n            allowClear\n            style={{ width: 200 }}\n            placeholder=\"Please select fields\"\n            value={fields}\n            onChange={(v)=>{\n              setFields(v)\n              let nodeIdT = _.map(v,(a)=>`{${a}}`).join(\"_\");\n              setNodeId(nodeIdT)\n              setTableNodeIdMap(datasetId, table, nodeIdT)\n            }}\n            options={order}\n            />\n          <Input disabled={0==order.length} style={{ width: 200 }} placeholder=\"Node Id\" value={nodeId} onChange={e=>{\n              let nodeIdT = e.target.value;\n              setNodeId(nodeIdT)\n              setTableNodeIdMap(datasetId, table, nodeIdT)\n            }} />\n          <label>eg: {datas[0]&&_.reduce(_.keys(datas[0]), (p, FIELD) => {\n              p = p.replaceAll(`{${FIELD}}`, datas[0][FIELD])\n              return p\n            }, nodeId)}</label> { nodeId && _.uniqBy(datas, (a)=>_.reduce(_.keys(datas[0]), (p, FIELD) => {\n            p = p.replaceAll(`{${FIELD}}`, a[FIELD])\n            return p\n          }, nodeId)).length !== datas.length && <label className=\"text-danger\">Detect nodeId not unique</label>}\n        </Space>\n      </Form.Item>\n    </Space>\n    <div>\n      <Button disabled={!columnsData.data.length} onClick={()=>{\n          drawGraph.importDatas(_.map(columnsData.data, (d)=>{\n            if(nodeId.trim()){\n              d.nodeId = _.reduce(_.keys(d), (p, FIELD) => {\n                p = p.replaceAll(`{${FIELD}}`, d[FIELD])\n                return p\n              }, nodeId.trim())\n            }\n            return d;\n          }), `${datasetId}_${table}`)\n        }}>Add to Graph</Button>\n    </div>\n  </div>\n}) \n","pinCode":false,"dname":"5781cff3-b807-4a01-a73f-15585e942487","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"ExtractComp = component(({ datasetId, table, order }) => {\n    const { Space, Select, Form, Input, Switch, Table, Button } = Antd;\n  \tconst [fields, setFields] = useState([]);\n  \tconst [properties, setProperties] = useState({})\n  \tconst [newCategory, setNewCategory] = useState(\"newCategory\")\n    const [newRelationship, setNewRelationship] = useState(\"newRelationship\")\n    const columns = [\n      {\n        title: 'Selected Property',\n        dataIndex: 'name',\n        key: 'name',\n      },\n      {\n        title: 'New Property Name',\n        dataIndex: 'newName',\n        key: 'newName',\n        render: (text,record) => <Input value={text} style={{width:200}} onChange={(e)=>{\n          \trecord.newName = e.target.value;\n            properties[record.name] = record;\n            setProperties(_.clone(properties));\n          }} />,\n      },\n      {\n        title: 'Key',\n        dataIndex: 'isKey',\n        key: 'isKey',\n        render: (text,record) => <Switch checked={text} onChange={(checked)=>{\n          \trecord.isKey = checked;\n            properties[record.name] = record;\n            setProperties(_.clone(properties));\n          }} />,\n      },\n      {\n        title: 'Split',\n        dataIndex: 'isSplit',\n        key: 'isSplit',\n        render: (text,record) => <span className={record.isKey?\"\":\"hide\"}> <Switch checked={text} onChange={(checked)=>{\n          \trecord.isSplit = checked;\n            record.isSplit && (record.splitChar = \",\");\n            properties[record.name] = record;\n            setProperties(_.clone(properties));\n            }} /> {text && <Input value={record.splitChar} style={{width:50}} onChange={(e)=>{\n          \trecord.splitChar = e.target.value;\n            properties[record.name] = record;\n            setProperties(_.clone(properties));\n          }} />}</span>,\n      },\n    ];\n    return <div key='f6b3329f-08c0-4ff2-9417-cdb071f5fcf4'>\n      <Space direction=\"horizontal\" wrap>\n        <Form.Item label=\"Properties\"> \n          <Select disabled={0==order.length}\n            mode=\"multiple\"\n            allowClear\n            style={{ width: 200 }}\n            placeholder=\"Please select fields\"\n            value={fields}\n            onChange={(v)=>{\n              let p = _.reduce(v,(p, field)=>{\n                if(!properties[field]){\n                  p[field] = {\n                    name:field,\n                    newName:field,\n                    isKey:false,\n                    isSplit:false,\n                    splitChar:\"\",\n                  }\n                }else{\n                  p[field] = properties[field];\n                }\n                return p;\n              }, {})\n              setProperties(p)\n              setFields(v);\n            }}\n            options={order}\n            />\n        </Form.Item>\n        <Form.Item label=\"New Category\">\n          <Input value={newCategory} onChange={(e)=>{\n              setNewCategory(e.target.value.trim());\n            }} />\n        </Form.Item>\n        <Form.Item label=\"New Relationship\">\n          <Input value={newRelationship} onChange={(e)=>{\n              setNewRelationship(e.target.value.trim());\n            }} />\n        </Form.Item>\n      </Space>\n      <div>\n        <Table dataSource={_.values(properties)} columns={columns}  />\n        <Button disabled={!fields.length} onClick={()=>{\n            !_.isEmpty(properties) && newRelationship && newCategory &&  api.extract({\n                category: `${datasetId}_${table}`,\n                props: _.values(properties),\n                newCategory: newCategory,\n                newRelationship: newRelationship,\n                inheritLinks: false,\n                skipEmpty: true,\n              })\n          }}>Extract</Button>\n      </div>\n  </div>;\n})","pinCode":false,"dname":"d5cd319a-f593-4d49-91b7-15069f9ea22a","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"setCategoryMapping = (props) => {\n  const { datasetId, table, field } = props;\n  const mappingT = _.clone(mapping);\n  if (!mappingT[datasetId]) {\n    mappingT[datasetId] = {};\n  }\n  mappingT[datasetId][table] = {\n    field: field,\n    nodeId: tableNodeIdMap[datasetId] && tableNodeIdMap[datasetId][table] || \"\",\n  };\n  mutable mapping = mappingT;\n}","pinCode":false,"dname":"79ece6de-c117-4669-a99a-fe0f0d28dba7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"setLinkMapping = (source, target, newRelationship)=>{\n\t\n\n}","pinCode":false,"dname":"3b6a2024-3e98-4306-bf04-1d7809cf17ce","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"onLoadMappingFunc = (loadedEvent) => {\n  const parsedResult = JSON.parse(loadedEvent.target.result);\n  mutable mapping = parsedResult;\n}","pinCode":false,"dname":"a767932a-0534-48ce-97d3-7633d46d071e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"//cache tables of dataset\nmutable tablesMap = ({})","pinCode":false,"dname":"b6964d2a-f439-449b-8982-ee5422633e3f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"setTablesMap = function (datasetId, tables) {\n  let tablesMapT = _.clone(tablesMap);\n  tablesMapT[datasetId] = tables;\n  mutable tablesMap = tablesMapT;\n  return tablesMap;\n}","pinCode":false,"dname":"1c3688e8-7776-4e85-8d7d-2f2655eb0377","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"//datasets\ndatasets =  bqClient?.bigquery && JSON.parse(\n  (await bqClient.bigquery.datasets.list({ projectId: projectID })).body\n).datasets","pinCode":false,"dname":"6b21f728-37f1-4694-a3ff-60ad667deff4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable conditionMap = ({}) //`target='IL17' and acname='IC50'`","pinCode":false,"dname":"d15ac68f-f74e-489c-a87c-b575346ff59a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"setConditionMap = function (datasetId, table, condition) {\n  let conditionMapT = _.clone(conditionMap);\n  if (!conditionMapT[datasetId]) {\n    conditionMapT[datasetId] = {};\n  }\n  conditionMapT[datasetId][table] = condition;\n  mutable conditionMap = conditionMapT;\n  return conditionMap;\n}","pinCode":false,"dname":"860b0e07-8b31-4074-8831-89e659a1ac7c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"//cache fields of table\nmutable orderMap = ({})","pinCode":false,"dname":"9643964a-9d5b-49d8-ba5c-4ca6102a7f57","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"setOrderMap = function (datasetId, table, order) {\n  let orderMapT = _.clone(orderMap);\n  if (!orderMapT[datasetId]) {\n    orderMapT[datasetId] = {};\n  }\n  orderMapT[datasetId][table] = order;\n  mutable orderMap = orderMapT;\n  return orderMap;\n}","pinCode":false,"dname":"8043f523-ff81-4ddf-8b16-3f00a997cf2c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"//cache nodeId of table to draw graph nodes\nmutable tableNodeIdMap = ({})","pinCode":false,"dname":"c33c2270-c88c-4437-91fb-2f25a0319d56","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"setTableNodeIdMap = function (datasetId, table, nodeId) {\n  let tableNodeIdMapT = _.clone(tableNodeIdMap);\n  if (!tableNodeIdMapT[datasetId]) {\n   tableNodeIdMapT[datasetId] = {};\n  }\n  tableNodeIdMapT[datasetId][table] = nodeId;\n  mutable tableNodeIdMap = tableNodeIdMapT;\n  return tableNodeIdMap;\n}","pinCode":false,"dname":"47286109-28cc-4f0e-a5ed-5723fddceb3e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"selectedNodes = api.observe('select', () => {\n  let view = api.getLayoutGraph()\n  return view.getNodes()\n    .filter(n=>view.getNodeStyles(n.id).selected)\n});","pinCode":false,"dname":"75fcc89d-ba58-4d92-8d80-a6569e412105","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"## Settings","pinCode":false,"dname":"493f6752-d8ad-434a-8b9a-46d0a073caab","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"<style>\n  .draw-graph .ant-form-item {\n    margin-bottom:0px;\n  }\n</style>","pinCode":false,"dname":"a76f247e-555a-4a1f-89b6-aed6485e2a21","codeMode":"htmlmixed"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof maxResults = Inputs.range([100,10000], {step: 1, value:1000 })","pinCode":false,"dname":"66902cb1-874d-4f79-85f2-2bcdd5404a5a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"## Dependencies","pinCode":false,"dname":"02b72d02-89bc-438c-8161-1055ff9645d1","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"api = window.opener.gxr//(await require(\"@kineviz/graphxr-api\")).getApi()","pinCode":false,"dname":"2c06e460-abf2-4453-a0b5-d6128d182887","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { drawGraph } from \"https://grove-help.graphxr.com/1_bigQuery/importDataToGraph\"","pinCode":false,"dname":"37426c6e-fffb-4e66-accd-544ea76cba7e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { runBigQuery, bqClient, projectID, onLoadFunc } from \"https://grove-help.graphxr.com/1_bigQuery/bigquery\";","pinCode":false,"dname":"4d7908bb-f9c8-4a47-90a2-80814e23e611","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"be0dd8b9-70bd-493e-a61e-1eb074df3ff7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { getColumnsData } from \"https://grove-help.graphxr.com/1_react/util/helper\"","pinCode":false,"dname":"b8b64914-e943-4f85-b06b-f7488b5c26b7","codeMode":"javascript2"}}}],"version":"2.19.1"}
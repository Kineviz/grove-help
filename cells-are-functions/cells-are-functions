{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Cells are Functions\n\nSay you have some cell *foo* whose value is false. (For demonstration purposes, this cell happens to be mutable so that we can easily change its value, but you could just as easily edit the code or use an input.)`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable foo = (false)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Now say you have another cell which loops, observing the value of *foo* once a second, and breaking when *foo* is false. The loop also increments a counter so that we can observe it.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"loop1 = {\n  while (foo) {\n    await Promises.tick(1000);\n    ++mutable count1;\n  }\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable count1 = (0)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Initially, the loop doesn’t run because *foo* is false. But if we toggle *foo*’s value by clicking the button below once, the loop starts.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const button = html`<button>Set foo to ${!foo}`;\n  button.onclick = () => mutable foo = !foo;\n  return button;\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Seems good so far: the loop’s running. But what happens when we set *foo* back to false by clicking the button again? Oops! It doesn’t stop. It runs… forever! And if we keep toggling, we now have multiple infinite loops! Ack! Why is that?\n\nIn Observable, each cell is a function; this function is called automatically [by the runtime](/@mbostock/how-observable-runs) with the values of any *other* cell it references.\n\nHere’s what the loop looks like to the runtime (omitting the counter for brevity):`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"loop2 = (async function loop2(foo) {\n  while (foo) {\n    await Promises.tick(1000);\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`If *foo* is initially false, the runtime invokes the loop as:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"loop2(false)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`When *foo* is set to true, the runtime again invokes the loop as:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"loop2(true)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`The true loop never terminates because the value of *foo* it sees never changes. When the value of *foo* changes, the cell is [invalidated](/@mbostock/disposing-content) and re-evaluated, but the old cell still runs to completion. It has to—[promises aren’t cancellable](https://github.com/tc39/proposal-cancelable-promises).\n\nTo make this clearer, we could have written an identical while-true loop, like so:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"loop3 = {\n  if (!foo) return;\n  while (true) await Promises.tick(1000);\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`So, how should we implement this loop?\n\nThe most natural approach is to use a generator. Unlike promises, [generators](/@mbostock/introduction-to-generators) *are* automatically terminated on invalidation by the runtime. (But, even a generator can only be terminated when it yields! And if a generator yields a promise, that promise still runs to completion.)`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const button = html`<button>Set foo to ${!foo}`;\n  button.onclick = () => mutable foo = !foo;\n  return button;\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"loop4 = {\n  if (!foo) return;\n  while (true) yield Promises.tick(100);\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you want to avoid a generator, you can do something similar using the [invalidation promise](https://github.com/observablehq/notebook-stdlib/blob/master/README.md#invalidation) and [Promise.race](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise/race): this will throw an error when the cell is invalidated, causing the loop to terminate. This error is never shown because the cell is immediately re-evaluated, giving it a new value.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"loop5 = {\n  if (!foo) return;\n  const abort = invalidation.then(() => Promise.reject(\"abort\"));\n  while (true) await Promise.race([abort, Promises.tick(100)]);\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Similarly, we could explicitly set the loop condition to false on invalidation:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"loop6 = {\n  let run = foo;\n  invalidation.then(() => run = false);\n  while (run) await Promises.tick(100);\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`For a related topic, see [Animation Loops](/@mbostock/animation-loops).`","pinCode":false}}}],"version":"2.19.1"}
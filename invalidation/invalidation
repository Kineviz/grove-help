{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Invalidation\n\nTo free up resources when a cell is re-evaluated, such as cancelling timers or disposing WebGL contexts, use the \\`invalidation\\` promise from the [standard library](https://observablehq.com/@observablehq/stdlib). This promise resolves when the current cell is re-evaluated: when the cell’s code changes, when it is run using Shift-Enter, or when a referenced input changes.\n\nHere’s \\`invalidation\\` being used to terminate a timer loop:`","pinCode":false,"dname":"fabdf038-3977-4726-aee0-810cccf8a9c9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const div = html`<div>`;\n  let request = requestAnimationFrame(function tick() {\n    div.textContent = Date.now();\n    request = requestAnimationFrame(tick);\n  });\n  invalidation.then(() => cancelAnimationFrame(request));\n  return div;\n}","pinCode":true,"dname":"ad089715-b6f8-4089-ae7f-00add5fd82f3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`If the cell above didn’t handle invalidation, then the page would get slower each time the cell were re-evaluated because many timer loops would run simultaneously! This is especially noticeable when a cell starting the timer loop references other cells such as sliders.\n\nThe cell above is contrived to demonstrate invalidation. A more idiomatic way of implementing a timer loop in Grove is a generator:`","pinCode":false,"dname":"64a84414-7bf3-4fcb-ab84-ece1ab547e88","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const div = html`<div>`;\n  while (true) {\n    div.textContent = Date.now();\n    yield div;\n  }\n}","pinCode":false,"dname":"d5e33fed-a637-46a1-963e-1e54a55f7faa","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Or even simpler, use \\`now\\`:`","pinCode":false,"dname":"4da5a5fb-f525-4113-bd36-4cefbead3f8a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<div>${now}`","pinCode":false,"dname":"329ce5df-b13b-4e5d-8389-9a341710ff6f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can also implement disposal using a generator: if the generator yields the \\`invalidation\\` promise, it will wait until the cell is re-evaluated, at which point [*generator*.return](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/return) is invoked by the runtime. You can then dispose of the cell’s resources in a try-finally block.`","pinCode":false,"dname":"b031cab1-d55e-4db1-8091-3798cfa1d005","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  ++mutable count; // This should always be one.\n  yield mutable count === 1\n      ? html`<div style=\"color:green;\">Success!</div>`\n      : html`<div style=\"color:red;\">Failure!</div>`;\n  try {\n    yield invalidation;\n  } finally {\n    --mutable count;\n  }\n}","pinCode":false,"dname":"bd6be8c3-ce9d-49a5-b8ab-c0075b4e9048","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable count = (0)","pinCode":false,"dname":"e4176c40-529c-4461-aa11-7559d4387012","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`A generator can implement disposal without the \\`invalidation\\` promise, too, just by implementing *generator*.return. Using Generators.observe, call the *notify* function to yield a value, then return a *finalize* function to dispose of the cell’s resources. The *finalize* function will only be called when the cell is re-evaluated.`","pinCode":false,"dname":"fb0aa0a4-8615-419d-9ef4-a3f819f42252","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Generators.observe(notify => {\n  notify(42);\n  return () => console.log(\"invalidated\");\n})","pinCode":true,"dname":"b7ec24a9-d88c-4a9b-a2b6-b240bdf85808","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can even implement a generator by hand:`","pinCode":false,"dname":"4de82aec-6737-4349-acc2-4fa82e808926","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  let a = 12346;\n  let done = false;\n  return {\n    next() {\n      if (done) return {done: true};\n      done = true;\n      return {done: false, value: 42};\n    },\n    return() {\n      console.log(\"invalidated\");\n    }\n  };\n}","pinCode":false,"dname":"65c812b3-0632-4361-9c82-ff8aee608866","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}}],"version":"2.19.1"}
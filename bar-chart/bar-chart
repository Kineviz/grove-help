{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Bar25 Chart\n\nThis chart shows the relative frequency of letters in the English language. A vertical bar chart such as this is sometimes called a *column* chart. Data: *Cryptological Mathematics*, Robert Lewand`","pinCode":false,"dname":"e069da72-24eb-4fbd-8345-a3ff72932020","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"chart = (BarChart(alphabet, {\n  x: d => d.letter,\n  y: d => d.frequency,\n  xDomain: d3.groupSort(alphabet, ([d]) => -d.frequency, d => d.letter), // sort by descending frequency\n  yFormat: \"%\",\n  yLabel: \"â†‘ Frequency\",\n  width,\n  height: 500,\n  color: \"steelblue\"\n}))","pinCode":false,"dname":"9f28d599-2795-490d-a591-a437d02cdfba","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"alphabet = (FileAttachment(\"alphabet.csv\").csv({typed: true}))","pinCode":false,"dname":"77186d28-5aae-42b5-b550-f3182bb16187","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"howto(\"BarChart\")","pinCode":false,"dname":"97343bc6-ef46-4612-9dda-2f763afff9a5","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"altplot(`Plot.barY(alphabet, {x: \"letter\", y: \"frequency\"}).plot()`)","pinCode":false,"dname":"7756a36d-e3bd-43f9-bbda-709eb285210b","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"BarChart = (function BarChart(data, {\n  x = (d, i) => i, // given d in data, returns the (ordinal) x-value\n  y = d => d, // given d in data, returns the (quantitative) y-value\n  title, // given d in data, returns the title text\n  marginTop = 20, // the top margin, in pixels\n  marginRight = 0, // the right margin, in pixels\n  marginBottom = 30, // the bottom margin, in pixels\n  marginLeft = 40, // the left margin, in pixels\n  width = 640, // the outer width of the chart, in pixels\n  height = 400, // the outer height of the chart, in pixels\n  xDomain, // an array of (ordinal) x-values\n  xRange = [marginLeft, width - marginRight], // [left, right]\n  yType = d3.scaleLinear, // y-scale type\n  yDomain, // [ymin, ymax]\n  yRange = [height - marginBottom, marginTop], // [bottom, top]\n  xPadding = 0.1, // amount of x-range to reserve to separate bars\n  yFormat, // a format specifier string for the y-axis\n  yLabel, // a label for the y-axis\n  color = \"currentColor\" // bar fill color\n} = {}) {\n  // Compute values.\n  const X = d3.map(data, x);\n  const Y = d3.map(data, y);\n\n  // Compute default domains, and unique the x-domain.\n  if (xDomain === undefined) xDomain = X;\n  if (yDomain === undefined) yDomain = [0, d3.max(Y)];\n  xDomain = new d3.InternSet(xDomain);\n\n  // Omit any data not present in the x-domain.\n  const I = d3.range(X.length).filter(i => xDomain.has(X[i]));\n\n  // Construct scales, axes, and formats.\n  const xScale = d3.scaleBand(xDomain, xRange).padding(xPadding);\n  const yScale = yType(yDomain, yRange);\n  const xAxis = d3.axisBottom(xScale).tickSizeOuter(0);\n  const yAxis = d3.axisLeft(yScale).ticks(height / 40, yFormat);\n\n  // Compute titles.\n  if (title === undefined) {\n    const formatValue = yScale.tickFormat(100, yFormat);\n    title = i => `${X[i]}\\n${formatValue(Y[i])}`;\n  } else {\n    const O = d3.map(data, d => d);\n    const T = title;\n    title = i => T(O[i], i, data);\n  }\n\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [0, 0, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(${marginLeft},0)`)\n      .call(yAxis)\n      .call(g => g.select(\".domain\").remove())\n      .call(g => g.selectAll(\".tick line\").clone()\n          .attr(\"x2\", width - marginLeft - marginRight)\n          .attr(\"stroke-opacity\", 0.1))\n      .call(g => g.append(\"text\")\n          .attr(\"x\", -marginLeft)\n          .attr(\"y\", 10)\n          .attr(\"fill\", \"currentColor\")\n          .attr(\"text-anchor\", \"start\")\n          .text(yLabel));\n\n  const bar = svg.append(\"g\")\n      .attr(\"fill\", color)\n    .selectAll(\"rect\")\n    .data(I)\n    .join(\"rect\")\n      .attr(\"x\", i => xScale(X[i]))\n      .attr(\"y\", i => yScale(Y[i]))\n      .attr(\"height\", i => yScale(0) - yScale(Y[i]))\n      .attr(\"width\", xScale.bandwidth());\n\n  if (title) bar.append(\"title\")\n      .text(title);\n\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(0,${height - marginBottom})`)\n      .call(xAxis);\n\n  return svg.node();\n})","pinCode":false,"dname":"c02ce606-5c80-4632-9553-920e550416a4","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}},{"type":"codeTool","data":{"codeData":{"value":"import { howto,altplot }  from 'bar-chart/7a9e12f9fb3d8e06'","pinCode":false,"dname":"4df954dc-2ef1-48cd-aa99-b0de462fd7c8","codeMode":"javascript2","vimEnabled":false,"insertMode":false}}}],"version":"2.19.1"}
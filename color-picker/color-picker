{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Color Picker (with alpha)\n<i>\\`<input type=color>\\` doesn't support [alpha](https://github.com/w3c/html/issues/1422), so here's [Pickr](https://github.com/Simonwep/pickr) trimmed down for Observable.</i>\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`\n\\`\\`\\`js\nimport {colorPicker} from \"@shaunlebron/color-picker\"\n\\`\\`\\`\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof nameExample = (colorPicker(\"steelblue\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof hexExample = (colorPicker(\"#eee\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof rgbExample = (colorPicker(\"rgb(219, 44, 44)\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof rgbaExample = (colorPicker(\"rgba(64, 161, 0, 0.77)\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof hslExample = (colorPicker(\"hsl(220, 53%, 43%)\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof hsvaExample = (colorPicker(\"hsva(240, 69%, 66%, 0.4)\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Formatting\n- Color string is formatted according to the initial value (first arg).\n- Optionally pass an explicit [TinyColor format string](https://github.com/bgrins/TinyColor#tostring) as second arg.\n  - e.g. \\`\"hex\", \"rgb\", \"hsl\", \"hsv\", \"name\"\\`\n\n## Known issues\n- Pickr seems to be lossy\n  - i.e. moving the knobs to original position may not return original value\n- Pickr modal is occluded by expanded cells.\n- Trying to adjust Pickr modal size (width,height,padding) throws off the knob positions, so we're stuck with the default.\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Code`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"colorPicker = (function colorPicker(defaultValue, format) {\n  // Set desired color format.\n  format = format || tinycolor(defaultValue).getFormat();\n\n  // Build container element.\n  const container = html`\n  <div style=\"height:2.4em;\">\n    ${styles}\n    <div id=\"picker\"></div>\n    <code id=\"label\" style=\"margin-left: 0.5em;\"></code>\n  </div>`;\n  const picker = container.querySelector(\"#picker\");\n  const label = container.querySelector(\"#label\");\n\n  // Set color value.\n  const setValue = colorStr => {\n    // Create color object from string.\n    const color = tinycolor(colorStr);\n\n    // Hex doesn't support alpha (but will in CSS4), so force RGB if alpha is < 1.\n    const actualFormat = tinycolor(color.toString(format)).getFormat();\n    const forceRGB = actualFormat === \"hex\" && color.getAlpha() < 1;\n\n    // Create desired output color string and display it.\n    const finalColorStr = color.toString(forceRGB ? \"rgb\" : format);\n    label.innerHTML = finalColorStr;\n\n    // Notify Observable about change in value.\n    container.value = finalColorStr;\n    container.dispatchEvent(new window.Event(\"input\"));\n  };\n  setValue(defaultValue);\n\n  // Setup Pickr.\n  const setupPickr = () => {\n    new Pickr({\n      el: picker,\n      default: tinycolor(defaultValue).toString(\"rgb\"),\n      onChange: c => setValue(c.toRGBA().toString()),\n      comparison: false,\n      components: {\n        preview: false,\n        opacity: true,\n        hue: true\n      }\n    });\n  };\n\n  // For some reason, Pickr doesn't want to set the default color unless the element is mounted,\n  // so we wait for it to mount here.\n  const interval = setInterval(() => {\n    if (document.body.contains(container)) {\n      clearInterval(interval);\n      setupPickr();\n    }\n  }, 100);\n\n  return container;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"styles = (html`\n<link rel=\"stylesheet\" href=\"https://unpkg.com/pickr-widget@0.2.0/dist/pickr.min.css\"/>\n<style>\n  /* Make sure picker stays above other Observable elements. */\n  .pcr-app.visible {\n    z-index: 10000000;\n  }\n  /* Allow our value label to be appended with good alignment. */\n  .pickr {\n    display: inline-block;\n    vertical-align: middle;\n  }\n</style>\n`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Dependencies`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"tinycolor = (require(\"tinycolor2@1.4.1\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Pickr = (require(\"pickr-widget@0.2.0\"))","pinCode":false}}}],"version":"2.19.1"}
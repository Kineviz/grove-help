{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Breakout! Game`","pinCode":false,"dname":"1ef17a72-236b-431a-9c28-dce9a710bd5b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof c = {\nvar c = DOM.context2d(w, h);\n  c.fillRect(0,0,w,h);\n  c.canvas.value = c;\n  return c.canvas;\n}","pinCode":false,"dname":"7fc744ec-0101-40de-9df2-63f3bb923e14","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof newgame = (button(\"New Game\"))","pinCode":false,"dname":"4c6ed86c-53cc-4ec7-bf1e-dd8e40ddcc6e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"highscore = (Math.max(this || 0, score))","pinCode":false,"dname":"e7464539-c8ba-4f0b-bb1b-896df93363e9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable score = {\n  newgame;\n  return 0;\n}","pinCode":false,"dname":"04a47874-21b3-4b40-b466-04f489e6c534","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable gameover = {\n  newgame;\n  return false;\n}","pinCode":false,"dname":"69120559-460c-431a-b4d2-d099fa887b8b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof h = (slider({ min: 100, max: 800, value: 350, step: 1, title: \"Height\" }))","pinCode":false,"dname":"f30c0ced-9e83-4d63-a50c-2021147aee2e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof w = (slider({ min: 100, max: width, value: 700, step: 1, title: \"Width\" }))","pinCode":true,"dname":"7c0725e3-eb1f-40f1-9991-74e897130f0f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof speed = (slider({\n  min: 0.1,\n  max: 10,\n  step: 0.1,\n  value: 5,\n  title: \"Speed\"\n}))","pinCode":false,"dname":"7bc16b57-f325-4b12-bc1f-5a955dd92fdf","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof scale = (slider({ min: 2, max: 20, value: 12, step: 1, title: \"Scale\" }))","pinCode":false,"dname":"c3de31e6-b52c-4324-85d2-353c903f985f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof paddleLength = (slider({\n  min: 20,\n  max: 1500,\n  value: 90,\n  step: 1,\n  title: \"Paddle length\"\n}))","pinCode":false,"dname":"6fa70d5d-de23-4617-9e5c-dab9677e4f60","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable ball = {\n  newgame;\n  return { r: scale * 0.7, x: w / 2, y: h - scale * 2, dx: 0, dy: -speed };\n}","pinCode":false,"dname":"8ebf044f-51d8-475a-bc47-232e5323a0cf","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"gameloop = {\n  let { r, x, y, dx, dy } = mutable ball;\n\n  while (!mutable gameover) {\n    // Move the ball.\n    (x += dx), (y += dy);\n\n    // Bounce off walls.\n    if (x < r + scale) dx = Math.abs(dx);\n    if (x + r > w - scale) dx = -Math.abs(dx);\n    if (y < r + scale) dy = speed;\n\n    // Bounce off paddle.\n    let px = mutable paddleX;\n    if (y + r > h - scale && x + r > px && x - r < px + paddleLength) {\n      dy = -speed;\n      dx = ((x - px) / paddleLength - 0.5) * Math.PI * speed;\n    }\n\n    // Bounce off bricks.\n    eachBrick(bricks, (brick, row, col) => {\n      let hit;\n      if (!(hit = collide(mutable ball, brick))) return;\n      bricks[row][col] = null;\n      mutable score += brick.points;\n      hit == \"v\" ? (dy = -dy) : (dx = -dx);\n      return true;\n    });\n\n    mutable ball = { r, x, y, dx, dy };\n    if (y + r > h) mutable gameover = true;\n    yield true;\n  }\n}","pinCode":false,"dname":"4bdfd089-ad42-44e8-86e2-30c0359b1700","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"draw = {\n  gameloop;\n\n  // Draw the background.\n  c.fillStyle = \"black\";\n  c.fillRect(0, 0, w, h);\n\n  // Draw the walls.\n  c.fillStyle = \"#444\";\n  c.fillRect(0, 0, scale, h);\n  c.fillRect(0, 0, w, scale);\n  c.fillRect(w - scale, 0, scale, h);\n\n  // Draw the bricks.\n  eachBrick(bricks, brick => {\n    c.fillStyle = brick.color;\n    c.fillRect(brick.x, brick.y, brick.w, brick.h);\n  });\n\n  // Draw the paddle.\n  c.fillStyle = colors[0];\n  c.fillRect(mutable paddleX, h - scale, paddleLength, scale);\n\n  // Draw the ball.\n  const { r, x, y } = mutable ball;\n  c.beginPath();\n  c.fillStyle = colors[0];\n  c.arc(x, y, r, 0, 2 * Math.PI);\n  c.fill();\n  return true;\n}","pinCode":false,"dname":"c782eccc-22ba-4546-aa56-5d6cc6770107","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable paddleX = (w / 2 - paddleLength / 2)","pinCode":false,"dname":"d6e3e76d-1b17-4e74-8566-31ec2a58b5f6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mousemove = (c.canvas.onmousemove = c.canvas.ontouchmove = e => {\n  e.preventDefault();\n  const cursor = e.changedTouches ? e.changedTouches[0] : e;\n  const left = c.canvas.getBoundingClientRect().left;\n  const x = cursor.pageX - left;\n  mutable paddleX = Math.min(\n    Math.max(scale, x - paddleLength / 2),\n    w - paddleLength - scale\n  );\n})","pinCode":false,"dname":"4511684c-bf6d-4eb8-adcc-9a7fb836127b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"collide = (function collide(ball, brick) {\n  const { x, y, r, dx, dy } = ball;\n  let hit =\n    x + r > brick.x &&\n    x - r < brick.x + brick.w &&\n    y + r > brick.y &&\n    y - r < brick.y + brick.h;\n  if (!hit) return false;\n  if (y - dy + r <= brick.y || y - dy - r >= brick.y + brick.h) return \"v\";\n  if (x - dx + r <= brick.x || x - dx - r >= brick.x + brick.w) return \"h\";\n})","pinCode":false,"dname":"417496a2-7d2e-4245-b793-b981c20d7683","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"bricks = {\n  newgame;\n\n  const rows = 6,\n    columns = Math.floor(w / 50);\n  const padding = 3,\n    top = 70;\n  const width = (w - padding * (columns + 1) - scale * 2) / columns;\n\n  let bricks = new Array(rows).fill(1).map(() => new Array(columns).fill(1));\n\n  eachBrick(bricks, (b, row, col) => {\n    bricks[row][col] = {\n      w: width,\n      h: scale,\n      x: col * (width + padding) + padding + scale,\n      y: row * (scale + padding) + top,\n      color: colors[row],\n      points: brickPoints[row]\n    };\n  });\n\n  return bricks;\n}","pinCode":false,"dname":"b3101918-6ceb-4cb5-944b-215dc7dc2adc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"colors = ([\"#c84848\", \"#c66c3a\", \"#b47a2f\", \"#a2a229\", \"#49a049\", \"#4348c8\"])","pinCode":false,"dname":"d42f99dd-b058-45ee-8624-42d63de65d7c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"brickPoints = ([7, 7, 4, 4, 1, 1])","pinCode":false,"dname":"0c353b16-5cd7-493d-9b55-bc419e44b2a8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"eachBrick = (function eachBrick(bricks, cb) {\n  for (let row = 0; row < bricks.length; row++) {\n    for (let col = 0; col < bricks[row].length; col++) {\n      let brick = bricks[row][col];\n      if (!brick) continue;\n      if (cb(brick, row, col)) return;\n    }\n  }\n})","pinCode":false,"dname":"efe92975-9dbb-4a1a-b7ad-5c04acc9e066","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { slider,button }  from 'breakout-game/inputs'","pinCode":false,"dname":"ec53b8fa-873b-4eb6-a094-e93da4337dbf","codeMode":"javascript2"}}}],"version":"2.19.1"}
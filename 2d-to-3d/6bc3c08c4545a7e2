{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# DIY inputs`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`*Inspired by [jashkenas' inputs.] Coming soon: checkbox, text input, textarea.*\n[jashkenas' inputs.]: https://observablehq.com/@jashkenas/inputs`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\nWelcome to the toolbo... notebook of easily customizable inputs! It serves as a list of examples, to showcase what's possible to achieve. `","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`I decided to create a tool – instead of a set of predefined functionalities – that can be used to create fantastic inputs with just a little doze of creativity.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Have fun! 🎢`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Sliders`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`~~~js\nimport {slider} from '@bartok32/diy-inputs'\n~~~`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'HOW-ARE-YOU-TODAY SLIDER',\n  desc: 'TOOLTIP.',\n  descStyle: {\n    'margin-top': '0px',\n    'pointer-events': 'none'\n  },\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 75,\n  theme: 'white-round',\n  background: {\n    type: 'double',\n    colors: ['#7EE5A0', '#FFA5A5']\n  },\n  oninput: objs => {\n\n    objs.output.textContent = objs.value < 10 ? '😭'\n                            : objs.value < 30 ? '☹️'\n                            : objs.value < 50 ? '😐'\n                            : objs.value < 70 ? '🙂'\n                            : objs.value < 90 ? '😄'\n                            : objs.value < 99 ? '🥳' : '💯';\n\n    objs.desc.textContent = objs.value + '%';\n    \n    // calculating tooltip's position (200px - margins) + exceptions for one- and three-number percentages\n    objs.desc.style.marginLeft = objs.progress * (200 - 15) + (objs.value < 10 ? 5 : objs.value > 99 ? -5 : 0) + 'px';\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'LIGHTSABER SLIDER',\n  desc: 'MAY THE FORCE BE WITH YOU.',\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 15,\n  theme: 'default-thin',\n  background: {\n    type: 'double',\n    colors: ['#7295FF', '#CCD8FF']\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'ONLY-LEFT-COLOR SLIDER',\n  desc: 'SO LEFT-SIDED.',\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 50,\n  theme: 'default-round',\n  background: {\n    type: 'double',\n    colors: ['#7295FF', 'white']\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'ONLY-RIGHT-COLOR SLIDER',\n  desc: 'SO OPPOSITE-SIDED.',\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 50,\n  theme: 'white-round',\n  background: {\n    type: 'double',\n    colors: ['white', '#7295FF']\n  },\n  oninput: objs => {\n    objs.output.textContent = '🤔'\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'COLOR-INCREMENTING SLIDER',\n  desc: 'SO MAJESTIC.',\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 20,\n  theme: 'default',\n  background: {\n    type: 'progress',\n    colors: ['#CCD8FF', '#7295FF', 'white']\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'GRADIENT-FADE BACKGROUND SLIDER',\n  desc: 'SO MANY COLORS.',\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 80,\n  theme: 'default-round',\n  background: {\n    type: 'interpolate',\n    colors: ['#FFA5A5', '#7EE5A0']\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'HIGHLIGHTED SLIDER',\n  desc: '👨 : - IS IT FINE TO CROSS THE GREEN LINE?',\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 40,\n  theme: 'default',\n  highlight: {\n    lower: 60,\n    upper: 90,\n    colors: {\n      normal: '#EDEDED',\n      inactive: '#B7E5C6',\n      active: '#7EE5A0'\n    },\n    preventUpdate: false\n  },\n  oninput: objs => {\n    if (objs.slider.value >= 60 && objs.slider.value <= 90) {\n      objs.desc.textContent = \"🧝‍♀️ : - YES, MY SON. THERE IS A LOT OF INTERESTING THINGS THERE!\";\n    } else {\n      objs.desc.textContent = '👨 : - IS IT FINE TO CROSS THE GREEN LINE?';\n    }\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'RESTRICTED SLIDER',\n  desc: '👨 : - IS IT FINE TO CROSS THE RED LINE?',\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 40,\n  theme: 'default',\n  highlight: {\n    lower: 60,\n    upper: 90,\n    colors: {\n      normal: '#EDEDED',\n      inactive: '#FFA5A5',\n      active: '#FF6666'\n    },\n    preventUpdate: true\n  },\n  oninput: objs => {\n    if (objs.slider.value >= 60 && objs.slider.value <= 90) {\n      objs.desc.textContent = \"🧝‍♀️ : - NO, MY SON. YOU SHOULD ALWAYS KEEP AWAY FROM IT.\";\n    } else {\n      objs.desc.textContent = '👨 : - IS IT FINE TO CROSS THE RED LINE?';\n    }\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'LOTR-RESTRICTED SLIDER',\n  desc: '👨 : - SHALL I PASS?',\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 40,\n  theme: 'default',\n  highlight: {\n    lower: 60,\n    upper: 101,\n    colors: {\n      normal: '#EDEDED',\n      inactive: '#FFA5A5',\n      active: '#FF6666'\n    },\n    preventUpdate: true\n  },\n  oninput: objs => {\n    if (objs.slider.value >= 60 && objs.slider.value <=  101) {\n      objs.desc.textContent = \"🧙‍♂️ : - YOU SHALL NOT PASS!\";\n    } else {\n      objs.desc.textContent = '👾 : - SHALL I PASS?';\n    }\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'CUSTOM-DESCRIPTION-AND-OUTPUT SLIDER',\n  descStyle: {\n    'pointer-events': 'none'\n  },\n  min: 0,\n  max: 10,\n  step: 1,\n  value: 0,\n  background: {\n    type: 'progress',\n    colors: ['#F2F2F2', '#7EE5A0', '#F2F2F2']\n  },\n  oninput: objs => {\n    objs.output.textContent = objs.value == 10\n                            ? 'Congrats, you did it! 🎉'\n                            : 'Only ' + (10 - objs.value) + ' to go!';\n\n    objs.desc.textContent = objs.value == 0\n                          ? \"LET'S COUNT TO 10!\"\n                          : d3.range(objs.value)\n                              .map(d => d == 9 ? (d + 1) + '!' : (d + 1) + '...')\n                              .reduce((a, b) => a + ' ' + b, '');\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'TRICKY SLIDER',\n  desc: '❌ NEVER TRUST THESE ONES.',\n  min: 0,\n  max: 100,\n  step: 1,\n  theme: 'default-thin',\n  oninput: objs => {\n    objs.div.update(objs.settings.max - objs.value);\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  title: 'EXPANDING RAINBOW SLIDER',\n  desc: 'BECAUSE WHY NOT?',\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 20,\n  background: {\n    type: 'progress',\n    interpolation: d3.interpolateRainbow,\n    color: '#EDEDED'\n  },\n  oninput: objs => {\n    objs.slider.style.width = 75 + 0.75 * +objs.value + 50 * objs.progress + 'px';\n    if (objs.progress < 1) {\n      objs.output.textContent = '🌈 : - Catch me if you can!';\n      objs.desc.textContent = 'BECAUSE WHY NOT?';\n    } else {\n      objs.output.textContent = \"🧝‍♀️ : - You caught the rainbow. Congratulations!\";\n      objs.desc.textContent = 'THE TRUE RAINBOW–CATCHER.';\n    };\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`**Inline sliders.**`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`🧝‍♀️: - Have you seen the Inline-Robo-Candy-Slider 9000?\n<br>🤖: - <span style = 'font-family: Avenir, Arial; font-size: 15px;'>D1$@BL1NG $T3@LTH M0D3...</span> ${slider({\n  titleStyle: {\n    'font-size': '11px'\n  },\n  min: 0,\n  max: 15,\n  step : 1,\n  divStyle: {\n    'display': 'inline-block',\n    'text-align': 'center',\n    'margin-left': '3.5px'\n  },\n  sliderStyle: {\n    'width': '130px',\n    'background': '#FFA5D0'\n  },\n  theme: 'default-thin',\n  oninput: objs => {\n    mutable S0___MANY___CAND13S = Array(+objs.value + 1).join('🍬');\n  }\n})}\n<br>🧝‍♀️: - Ah, there you are!`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable S0___MANY___CAND13S = ('')","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`**Bonus:** synchronized dance-sliders.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  desc: \"'CAUSE PARTY IS NEVER OVER.\",\n  min: 0,\n  max: 100,\n  step: 1,\n  divAttrs: {\n    id: 'slider1'\n  },\n  divStyle: {\n    display: 'inline-block'\n  },\n  sliderStyle: {\n    width: '150px'\n  },\n  theme: 'default-round',\n  oninput: objs => {\n    let secondSlider = d3.select('#slider2');\n    if (!secondSlider.empty()) {\n      secondSlider.node().update(100 - objs.value);\n      secondSlider.select('input').node().style.background = d3.interpolateCool(1 - objs.progress);\n      objs.slider.style.background = d3.interpolateCool(objs.progress);\n      if (objs.value >= 50) {\n        objs.output.textContent = '💃';\n        secondSlider.select('span').node().textContent = '🕺';\n      } else {\n        objs.output.textContent = '🕺';\n        secondSlider.select('span').node().textContent = '💃';\n      }\n    } else {\n      objs.slider.style.background = d3.interpolateCool(objs.progress);\n      objs.output.textContent = '💃';\n    };\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider({\n  desc: 'CHEERS TO THAT!',\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 50,\n  divAttrs: {\n    id: 'slider2'\n  },\n  divStyle: {\n    display: 'inline-block'\n  },\n  sliderStyle: {\n    width: '150px'\n  },\n  theme: 'default-round',\n  oninput: objs => {\n    let secondSlider = d3.select('#slider1');\n    if (!secondSlider.empty()) {\n      secondSlider.node().update(100 - objs.value);\n      secondSlider.select('input').node().style.background = d3.interpolateCool(1 - objs.progress);\n      objs.slider.style.background = d3.interpolateCool(objs.progress);\n      if (objs.value <= 50) {\n        objs.output.textContent = '🕺';\n        secondSlider.select('span').node().textContent = '💃';\n      } else {\n        objs.output.textContent = '💃';\n        secondSlider.select('span').node().textContent = '🕺';\n      }; \n    } else {\n      objs.slider.style.background = d3.interpolateCool(objs.progress);\n      objs.output.textContent = '🕺';\n    };\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## API`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`\n~~~js\nfunction slider({\n~~~\n~~~js\n  min: 0,\n  max: 1,\n  step: 0.1,\n  value: 0.5, // initial value\n  title: 'some title',\n  desc: 'some description',\n~~~\n**[element]**\n\nFor the next two arguments, replace <code>[element]</code> with one of the following: <code>[title, slider, output, desc, div</code> *(element that ties the others together)*<code>].</code>\n~~~js\n  [element]Style: {\n    width: '150px',\n    color: 'white',\n    ... // other CSS styles\n  },\n  [element]Attrs: {\n    id: 'slider1',\n    cla‎ss: 'cool-slider',\n    ... // other attributes\n  },\n~~~\n<hr>\n**theme**\n\n~~~js\n  theme: 'white-round',\n~~~\n\nChoose one from <code>[default, white].</code> You can change the slider's thumb appearance by adding <code>-thin</code> or <code>-round</code> to the theme, e.g. <code>white-round.</code>\n<hr>\n**background**\n\n~~~js\n  background: {\n    type: 'progress',\n    colors: [yourColors]\n  },\n~~~\n<code>type:</code> one of <code>[normal, double, interpolate, progress]</code>\n\n~~~js\nif (type == 'normal') use color: yourColor instead o‎f colors: [yourColors]\n~~~\n\n~~~js\nif (type == 'progress') use a list o‎f three colors – starting one, final one\nand optional right-most solid color (see color-incrementing-slider)\n~~~\n\n~~~js\nif (type == 'interpolate') use a list o‎f two colors (left and right) or\ncompletely omit colors argument and use some d3 color interpolator\n(see gradient–fade background)\n~~~\n<hr>\n**highlight**\n\n~~~js\n  highlight: {\n    lower: 60,\n    upper: 90,\n    colors: {\n      normal: '#EDEDED',\n      inactive: '#B7E5C6',\n      active: '#7EE5A0'\n    },\n    preventUpdate: false\n  },\n~~~\nIf <code>preventUpdate</code> is set to <code>true</code>, then the slider won't be updated when inside of highlighted area *(see restricted slider)*.\n<hr>\n~~~js\n  initialize: true, // if false, oninput won't be triggered when slider is created\n~~~\n<hr>\n**oninput**\n\n~~~js\n  oninput: objs => {\n    // 🧙‍♀️ magic stuff happens here 🧙‍♂️ \\\\\\\\\n  }\n~~~\n<code>objs</code> object holds <code>title, slider, output, desc,</code> and <code>div</code> elements. Additionally, you have an access to current value of the slider <code>(objs.value)</code>, progress <code>[0-1] (objs.progress)</code> and <code>settings (objs.settings)</code>, so you can access the <code>min</code> and <code>max</code> values for example <code>(objs.settings.min, objs.settings.max)</code>.\n\nYou can also change the behavior of slider by using <code>div's update</code> method *(which also updates the div's value and output text)*, for example by using <code>objs.div.update(objs.settings.max - objs.slider.value)</code> to create a *tricky slider.*\n~~~js\n})\n~~~ `","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Selects`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`~~~js\nimport {select} from '@bartok32/diy-inputs'\n~~~`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"select({\n  title: 'JUMPING SELECT',\n  desc: 'AAAAND HOP!',\n  options: {\n    GREEN: '#A1E8CC',\n    APRICOT: '#FAC9B8',\n    BLUE: '#BFD4FF'\n  },\n  onchange: objs => {\n    d3.select(objs.select)\n      .style('font-size', '0px')\n      .interrupt()\n      .transition()\n        .ease(d3.easePoly)\n        .duration(250)\n        .style('width', '100px')\n        .style('height', '35px')\n        .style('margin', '15px')\n      .transition()\n        .ease(d3.easeBounce)\n        .duration(250)\n        .style('font-size', '12px')\n        .style('width', '100px')\n        .style('height', '30px')\n        .style('margin', '0px')\n        .style('background', objs.value)\n      .on('end', () => objs.div.update(objs.select.value));\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"select({\n  title: 'SHRINKING SELECT',\n  desc: 'AAAAND SHRINK!',\n  options: {\n    APRICOT: '#FAC9B8',\n    GREEN: '#A1E8CC',\n    BLUE: '#BFD4FF'\n  },\n  onchange: objs => {\n    d3.select(objs.select)\n      .style('font-size', '0px')\n      .interrupt()\n      .transition()\n        .ease(d3.easePoly)\n        .duration(250)\n        .style('width', '10px')\n        .style('height', '90px')\n      .transition()\n        .ease(d3.easeBounce)\n        .duration(250)\n        .style('font-size', '12px')\n        .style('width', '100px')\n        .style('height', '30px')\n        .style('background', objs.value)\n      .on('end', () => objs.div.update(objs.select.value));\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"select({\n  title: 'MY-FATHER-WAS-A-CIRCLE SELECT',\n  desc: 'NO JOKES.',\n  options: {\n    BLUE: '#BFD4FF',\n    GREEN: '#A1E8CC',\n    APRICOT: '#FAC9B8'\n  },\n  onchange: objs => {\n    d3.select(objs.select)\n      .style('font-size', '0px')\n      .interrupt()\n      .transition()\n        .ease(d3.easePoly)\n        .duration(350)\n        .style('width', '100px')\n        .style('height', '100px')\n        .style('border-radius', '50px')\n      .transition()\n        .ease(d3.easeBounce)\n        .duration(250)\n        .style('font-size', '12px')\n        .style('width', '100px')\n        .style('height', '30px')\n        .style('border-radius', '5px')\n        .style('background', objs.value)\n      .on('end', () => objs.div.update(objs.select.value));\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"select({\n  title: 'SPINNING SELECT',\n  desc: \"LET'S ROLL!\",\n  options: {\n    I: 'SPIN',\n    LIKE: 'TO',\n    TOOOOO: 'LIKE',\n    SPIN: 'I'\n  },\n  selectStyle: {\n    background: '#FF72AF'\n  },\n  divStyle: {\n    width: '160px',\n    'font-size': '1px'\n  },\n  theme: 'white',\n  onchange: objs => {\n    d3.select(objs.div)\n      .interrupt()\n      .transition()\n        .duration(250)\n        .style('transform', `rotate(300deg)`)\n      .transition()\n        .ease(d3.easeBounce)\n        .duration(750)\n        .style('transform', `rotate(0deg)`);\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## API`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`\n~~~js\nfunction select({\n~~~\n**options**\n~~~js\n  options: {\n    option1: value1,\n    option2: value2,\n    ...\n  },\n~~~\nEither dict or list, e.g. <code>['a', 'b', 'c']</code> will become <code>{'a': 'a', 'b': 'b', 'c': 'c'}.</code>\n<hr>\n~~~js\n  selected: option1, // initially selected option\n  title: 'some title',\n  desc: 'some description',\n~~~\n<hr>\n**[element]**\n\nFor the next two arguments, replace <code>[element]</code> with one of the following: <code>[title, select, additionalElement (caret), desc, div</code> *(element that ties the others together)*<code>].</code>\n~~~js\n  [element]Style: {\n    width: '150px',\n    color: 'white',\n    ... // other CSS styles\n  },\n  [element]Attrs: {\n    id: 'slider1',\n    cla‎ss: 'cool-slider',\n    ... // other attributes\n  },\n~~~\n<hr>\n~~~js\n  theme: 'white', // one of [default, white],\n  initialize: true, // if false, oninput won't be triggered when slider is created\n~~~\n<hr>\n**onchange**\n~~~js\n  onchange: objs => {\n    // 🧙‍♀️ magic stuff happens here 🧙‍♂️ \\\\\\\\\n  }\n~~~\n<code>objs</code> object holds <code>title, button, desc, additionalElement (caret), div</code> elements. You can also update the select's value by using <code>objs.div.update</code> method.\n~~~js\n})\n~~~ \n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Buttons`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`~~~js\nimport {button} from '@bartok32/diy-inputs'\n~~~`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"button({\n  value: 'REGULAR BUTTON',\n  desc: \"SO REGULAR.\",\n  buttonStyle: {\n    background: '#7EE5A0',\n    color: '#1A1A26'\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"button({\n  value: 'PRESS-VISIBLE BUTTON',\n  desc: 'SO CLICKY.',\n  buttonStyle: {\n    background: '#6B6B99',\n    color: 'white'\n  },\n  onclick: objs => {\n    d3.select(objs.button)\n      .style('background', '#505072')\n      .interrupt()\n      .transition()\n        .duration(300)\n        .style('background', '#6B6B99');\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"button({\n  title: 'COUNTER-IMITATING BUTTON',\n  value: 'CLICK ME!',\n  desc:'SO MANY CLICKS...',\n  buttonStyle: {\n    background: '#7295FF',\n    color: 'white'\n  },\n  onclick: objs => {\n    \n    mutable count += 1;\n    \n    d3.select(objs.button)\n      .style('background', '#6786E5')\n      .interrupt()\n      .transition()\n        .duration(300)\n        .style('background', '#7295FF');\n    \n    if (mutable count > 0 && objs.output == '') {\n\n      objs.output = d3.select(objs.div)\n        .insert('a', 'div.desc')\n        .attr('class', 'output')\n        .style('margin-left', '5px')\n        .style('font-size', '11px')\n        .style('cursor', 'pointer')\n        .style('border', '0.5px solid black')\n        .style('border-radius', '5px')\n        .style('padding', '5px')\n        .on('click', function() {\n          this.remove();\n          objs.output = '';\n          mutable count = 0;\n        })\n        .html('RESET');\n    };\n\n  },\n  initialize: false\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable count = (0)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`**Inline buttons.**`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"html`\n${button({\n  title: '🐟',\n  value: 'JUST',\n  divStyle: {\n    display: 'inline-block'\n  },\n  buttonStyle: {\n    background: '#CCE9FF'\n  },\n  titleStyle: {\n    'text-align': 'center'\n  },\n  onclick: objs => {\n    mutable guessTheMovie = 'FIN...';\n    d3.select(objs.button)\n      .style('background', '#B2DFFF')\n      .interrupt()\n      .transition()\n        .duration(300)\n        .style('background', '#CCE9FF');\n  },\n  initialize: false\n})}\n${button({\n  title: '🐬🐬',\n  value: 'KEEP',\n  divStyle: {\n    display: 'inline-block',\n    'margin-left': '5px'\n  },\n  buttonStyle: {\n    background: '#B2DFFF'\n  },\n  titleStyle: {\n    'text-align': 'center'\n  },\n  onclick: objs => {\n    mutable guessTheMovie = 'FINDING...';\n    d3.select(objs.button)\n      .style('background', '#99D4FF')\n      .interrupt()\n      .transition()\n        .duration(300)\n        .style('background', '#B2DFFF');\n  },\n  initialize: false\n})}\n${button({\n  title: '🐠🐠🐠',\n  value: 'SWIMMING',\n  divStyle: {\n    display: 'inline-block',\n    'margin-left': '5px'\n  },\n  buttonStyle: {\n    background: '#99D4FF'\n  },\n  titleStyle: {\n    'text-align': 'center'\n  },\n  onclick: objs => {\n    mutable guessTheMovie = 'FINDING NEMO';\n    d3.select(objs.button)\n      .style('background', '#7FC9FF')\n      .interrupt()\n      .transition()\n        .duration(300)\n        .style('background', '#99D4FF');\n  },\n  initialize: false\n})}\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable guessTheMovie = ('')","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`**Bonus:** single-use button. Click only after a careful consideration!`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof singleUseButton = (button({\n  value: 'YOCO*!',\n  buttonStyle: {\n    background: '#F4ED47',\n    'font-weight': 600,\n    width: '70px',\n    height: '70px',\n    border: '1px solid black',\n    'border-radius': '50%'\n  },\n  divStyle: {\n    width: '125px',\n    'text-align': 'center'\n  },\n  onclick: objs => {\n    d3.select(objs.button)\n      .transition()\n        .duration(400)\n        .style('width', '0px')\n        .style('height', '0px')\n        .style('font-size', '0px')\n        .style('opacity', 0)\n      .on('end', () => {\n        objs.div.update('it was nice to meet yooooou...');\n        objs.div.remove();\n    })\n  },\n  initialize: false\n}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Button says: **${singleUseButton}**\n\n<small>*You Only Click Once.</small>`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## API`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`\n~~~js\nfunction button({\n~~~\n~~~js\n  value: \"button's label\",\n  title: 'some title',\n  desc: 'some description',\n~~~\n<hr>\n**[element]**\n\nFor the next two arguments, replace <code>[element]</code> with one of the following: <code>[title, button, desc, div</code> *(element that ties the others together)*<code>].</code>\n~~~js\n  [element]Style: {\n    width: '150px',\n    color: 'white',\n    ... // other CSS styles\n  },\n  [element]Attrs: {\n    id: 'button1',\n    cla‎ss: 'cool-button',\n    ... // other attributes\n  },\n~~~\n<hr>\n~~~js\n  theme: 'white', // one of [default, white]\n  initialize: true, // if false, oninput won't be triggered when slider is created\n~~~\n<hr>\n**onclick**\n\n~~~js\n  onclick: objs => {\n    // 🧙‍♀️ magic stuff happens here 🧙‍♂️ \\\\\\\\\n  }\n~~~\n<code>objs</code> object holds <code>title, button, desc, div</code> elements. You can also update the button's value by using <code>objs.div.update</code> method.\n\nCheck the code of the examples above, to see how you can use all of them!\n~~~js\n})\n~~~ \n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you have any thoughts or suggestions please leave a comment or fork this notebook!`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Checkboxes`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`*In progress...*`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof checkMe = (checkbox({\n  title: 'WOULD YOU MIND CHECKING ME?',\n  desc: 'THANK YOU.',\n  value: 'I AM CHECKED!!!',\n  label: 'CHECK ME',\n  oninput: objs => {\n    if (objs.value == false) objs.output.textContent = 'CHECK ME';\n    else objs.output.textContent = 'GREAT!';\n  }\n}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"checkMe","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Appendix`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n### Functions`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"input = ((settings = {}, type) => {\n  \n  if (typeof settings != 'object') return 'Please provide a value!';\n\n  let theme = settings.theme ? settings.theme : 'default',\n      initialize = settings.initialize != undefined ? settings.initialize : true,\n      on = type == 'button'\n           ? 'onclick'\n         : type == 'select'\n           ? 'onchange'\n         : 'oninput';\n\n  setGlobalStyles(theme);\n\n  let objs = {\n    title: createElement('title', settings.title, theme, settings),\n    desc: createElement('desc', settings.desc, theme, settings),\n    output: type == 'slider'\n            ? createElement('output', settings.value, theme, settings)\n          : type == 'checkbox'\n            ? createElement('output', settings.label, theme, settings)\n          : '',\n    settings,\n    value: settings.value\n  };\n\n  objs.additionalElement = settings.additionalElement ? createElement(settings.additionalElement.name, settings.additionalElement.value, theme, settings) : '';\n\n  objs[type] = createElement(type, settings.value, theme, settings),\n  objs.div = createElement('div', [objs.title, objs[type], objs.output, objs.additionalElement, objs.desc], theme, settings);\n\n  objs[type][on] = () => {\n    if (!settings.preventUpdate) {\n      objs.div.update(); \n    };\n    if (type == 'slider') objs.progress = (objs.value - settings.min) / (settings.max - settings.min);\n    if (settings.utilities) {\n      for (let [key, func] of Object.entries(settings.utilities)) {\n        func(settings[key], objs);\n      };\n    };\n    if (settings[on]) settings[on](objs);\n  };\n\n  objs.div.update = (value = objs[type].value || settings.value) => {\n    value = isNaN(value) ? value : +value;\n\n    if (type == 'checkbox' && objs.value != false) value = false;\n    else if (type == 'checkbox') value = settings.value;\n\n    objs.value = value;\n    if (type != 'select') objs[type].value = value;\n    objs.div.value = objs.value;\n    if (type != 'checkbox' && objs.output) objs.output.textContent = objs.value;\n    objs.div.dispatchEvent(new CustomEvent('input'));\n  };\n\n  if (settings.preventUpdate) objs.div.update();\n  if (initialize) {\n    objs[type][on]();\n  } else if (!settings.preventUpdate) {\n    objs.div.update();\n  };\n  \n  return objs.div;\n  \n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"button = ((settings = {}) => {\n  if (typeof settings == 'string') return input({value: settings}, 'button');\n  else return input(settings, 'button');\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"checkbox = ((settings = {}) => {\n  if (typeof settings == 'string') return input({value: settings}, 'checkbox');\n  else return input(settings, 'checkbox');\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"select = ((settings = {}) => {\n  if (typeof settings.options != 'object' || Object.keys(settings.options).length == 0) return 'Please provide at least one option!';\n\n  if (Array.isArray(settings.options)) {\n    settings.options = settings.options.reduce((obj, key) => Object.assign(obj, {[key]: key}), {});\n  };\n\n  let options = '';\n  for (let [key, value] of Object.entries(settings.options)) {\n    options += `<option ${key == settings.selected ? 'selected' : ''} value = '${value}'>${key}</option>`;\n  };\n\n  settings.value = options;\n  settings.additionalElement = {\n    name: 'caret',\n    value :`<path d = 'M0,1.5 6,8.5 12,1.5'>`\n  };\n  return input(settings, 'select');\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"slider = ((settings = {}) => {\n\n  settings.min = settings.min == undefined ? settings.max - 1 || 0 : settings.min;\n  settings.max = settings.max == undefined ? settings.min + 1 || 1 : settings.max;\n  settings.value = settings.value == undefined ? (settings.min + settings.max) / 2 : settings.value;\n  settings.step = settings.step || (settings.max > settings.min\n                                 ? (settings.max - settings.min) / 10\n                                 : (settings.min - settings.max) / 10) || 0.1;\n\n  settings.utilities = {};\n\n  if (settings.background) {\n    settings.utilities.background = setSliderBackground;\n  };\n\n  if (settings.highlight) {\n    settings.utilities.highlight = highlightSlider;\n  };\n\n  return input(settings, 'slider');\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"createElement = ((type, text = '', theme = '', settings = '') => {\n\n  if (text == undefined) return '';\n  text = type != 'slider' && type != 'checkbox' ? text : '';\n\n  let typesMapping = {\n    title: {\n      tag: 'div',\n      mandatoryAttrs: {class: 'title'}\n    },\n    button: {\n      tag: 'button',\n      mandatoryAttrs: {}\n    },\n    checkbox: {\n      tag: 'input',\n      mandatoryAttrs: {\n        type: 'checkbox',\n        value: settings.value\n      }\n    },\n    select: {\n      tag: 'select',\n      mandatoryAttrs: {}\n    },\n    slider: {\n      tag: 'input',\n      mandatoryAttrs: {\n        type: 'range',\n        min: settings.min,\n        max: settings.max,\n        step: settings.step,\n        value: settings.value\n      }\n    },\n    output: {\n      tag: 'span',\n      mandatoryAttrs: {class: 'output'}\n    },\n    desc: {\n      tag: 'div',\n      mandatoryAttrs: {class: 'desc'}\n    },\n    div: {\n      tag: 'div',\n      mandatoryAttrs: {class: `input-${theme}`}\n    },\n    caret: {\n      tag: 'svg',\n      mandatoryAttrs: {class : 'caret'}\n    }\n  };\n\n  let el = html`<${typesMapping[type].tag}>${text}</${typesMapping[type].tag}>`;\n  Object.entries(typesMapping[type].mandatoryAttrs).forEach(d => el.setAttribute(d[0], d[1]));\n\n  if (typeof settings[type + 'Attrs'] == 'object') Object.entries(settings[type + 'Attrs']).forEach(d => {\n    if (d[0] == 'class') el.classList.add(d[1]);\n    else el.setAttribute(d[0], d[1])\n  });\n\n  if (typeof settings[type + 'Style'] == 'object') Object.entries(settings[type + 'Style']).forEach(d => el.style[d[0]] = d[1]);\n\n  return el;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"setGlobalStyles = (function(style) {\n\n  d3.selectAll('.inputStyles')\n    .data([style])\n    .enter()\n    .append('style')\n      .attr('class', 'inputStyles')\n      .html(themes);\n  \n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"highlightSlider = ((settings, objs) => {\n  settings.lowerAdj = 100 * (settings.lower - objs.settings.min) / (objs.settings.max - objs.settings.min);\n  settings.upperAdj = 100 * (settings.upper - objs.settings.min) / (objs.settings.max - objs.settings.min);\n  \n  if (settings.preventUpdate) objs.settings.preventUpdate = true;\n  \n  if (+objs.slider.value == settings.lower || +objs.slider.value == settings.upper) {\n    objs.div.update(objs.slider.value);\n  };\n  \n  if (+objs.slider.value < settings.lower || +objs.slider.value > settings.upper) {\n    objs.div.update(objs.slider.value);\n\n    objs.slider.style.background = `linear-gradient(90deg,\n      ${settings.colors.normal}   ${settings.lowerAdj}%,\n      ${settings.colors.inactive} ${settings.lowerAdj}%,\n      ${settings.colors.inactive} ${settings.upperAdj}%,\n      ${settings.colors.normal} 0%)`;\n  } else {\n    objs.slider.style.background = `linear-gradient(90deg,\n      ${settings.colors.normal} ${settings.lowerAdj}%,\n      ${settings.colors.active} ${settings.lowerAdj}%,\n      ${settings.colors.active} ${settings.upperAdj}%,\n      ${settings.colors.normal} 0%)`;\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"setSliderBackground = ((settings, objs) => {\n\n  let type = settings.type,\n      color = settings.color,\n      colors = settings.colors,\n      progress = objs.progress,\n      interpolation = settings.interpolation,\n      custom = false;\n\n  if (!interpolation) interpolation = d3.interpolate;\n  else custom = true;\n\n  type == 'normal' ? objs.slider.style.background = color : type == 'double' ? objs.slider.style.background = `linear-gradient(90deg, ${colors[0]} ${progress * 100}%, ${colors[1]} 0%)` : type == 'interpolate' ? objs.slider.style.background = (custom ? interpolation(progress) : interpolation(colors[0], colors[1])(progress)) : type == 'progress' ? (custom ? objs.slider.style.background = `linear-gradient(90deg, ${interpolation(progress)} ${progress * 100}%, ${color || interpolation(0)} 0%)` : objs.slider.style.background = `linear-gradient(90deg, ${interpolation(colors[0], colors[1])(progress)} ${progress * 100}%, ${colors[2] || colors[0]} 0%)`) : 0;\n\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n### CSS`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"themes = (`\n\n  .input-default button, .input-white button, .input-default select, .input-white select {\n\n    outline: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    opacity: 0.9;\n    height: 30px;\n    margin-left: 0px;\n    padding: 5px 10px 5px 10px;\n    background: #EFEFEF;\n    border: 0.5px solid white;\n    border-radius: 5px;\n    color: #262626;\n    font-family: Avenir, Arial;\n    font-size: 12px;\n    font-weight: 600;\n    cursor: pointer;\n\n  }\n\n  .input-white button, .input-white select {\n\n    color: white;\n\n}\n\n  .input-default select, .input-white select {\n\n    padding-right: 29px;\n\n  }\n\n  .input-default .caret, .input-white .caret {\n\n    width: 12px;\n    height: 10px;\n    margin-left: -24px;\n    fill: black;\n    pointer-events: none;\n    opacity: 0.75;\n\n}\n\n  .input-white .caret {\n\n    fill: white;\n\n}\n\n  .input-default input[type = 'range'], .input-default-thin input[type = 'range'], .input-default-round input[type = 'range'], .input-white input[type = 'range'], .input-white-thin input[type = 'range'], .input-white-round input[type = 'range'] {\n\n    appearance: none;\n    -webkit-appearance: none;\n    width: 200px;\n    height: 5px;\n    border-radius: 1px;\n    background: #E5E5E5;\n\n  }\n\n  .input-default input[type = 'range']::-webkit-slider-thumb, .input-white input[type = 'range']::-webkit-slider-thumb {\n\n    appearance: none;\n    -webkit-appearance: none;\n    width: 15px;\n    height: 15px;\n    background: #545454;\n    cursor: pointer;\n    border: none;\n    border-radius: 5px;\n\n  }\n\n  .input-white input[type = 'range']::-webkit-slider-thumb {\n\n    background: #FCFCFC;\n    border: 1px solid #545454;\n\n  }\n\n  .input-default-thin input[type = 'range']::-webkit-slider-thumb, .input-white-thin input[type = 'range']::-webkit-slider-thumb {\n\n    appearance: none;\n    -webkit-appearance: none;\n    width: 7.5px;\n    height: 20px;\n    background: #545454;\n    cursor: pointer;\n    border: none;\n    border-radius: 2.5px;\n\n  }\n\n  .input-white-thin input[type = 'range']::-webkit-slider-thumb {\n\n    background: #FCFCFC;\n    border: 1px solid #545454;\n\n  }\n\n  .input-default-round input[type = 'range']::-webkit-slider-thumb, .input-white-round input[type = 'range']::-webkit-slider-thumb {\n\n    appearance: none;\n    -webkit-appearance: none;\n    width: 15px;\n    height: 15px;\n    background: #545454;\n    cursor: pointer;\n    border: none;\n    border-radius: 7.5px;\n\n  }\n\n  .input-white-round input[type = 'range']::-webkit-slider-thumb {\n\n    background: #FCFCFC;\n    border: 1px solid #545454;\n\n  }\n\n  input[type = 'range']:focus {\n\n    outline: none;\n\n  }\n\n  .output {\n\n    margin-left: 5px;\n    color: #262626;\n    font-family: Courier;\n    font-size: 14px;\n\n  }\n\n  .title {\n\n    margin-bottom: 3.5px;\n    margin-left: 2.5px;\n    color: black;\n    font-family: Avenir, Arial;\n    font-size: 14px;\n    font-weight: 600;\n\n  }\n\n  .desc {\n\n    margin-top: 6px;\n    margin-left: 2.5px;\n    color: #4C4C4C;\n    font-family: Avenir, Arial;\n    font-size: 12px;\n\n  }\n\n`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n### Imports`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"d3 = (require('d3@5'))","pinCode":false}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`<div style=\"color: grey; font: 13px/25.5px var(--sans-serif); text-transform: uppercase;\"><h1 style=\"display: none;\">Word cloud</h1><a href=\"https://d3js.org/\">D3</a> › <a href=\"/@d3/gallery\">Gallery</a></div>\n\n# Word cloud\n\nA demonstration of [d3-cloud](https://github.com/jasondavies/d3-cloud/). Paste into or edit the text below to update the chart. Note: word clouds [may be harmful](https://www.niemanlab.org/2011/10/word-clouds-considered-harmful/).`","pinCode":false,"dname":"0c59b052-a9bc-4aa6-b6ef-071364567a71","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"WordCloud(words, {\n  width,\n  height: 500,\n  invalidation // a promise to stop the simulation when the cell is re-run\n})","pinCode":false,"dname":"e5d7df44-a2ab-40fe-b8c9-f98c90222963","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"howto(\"WordCloud\")","pinCode":false,"dname":"440cf041-50aa-4fb8-8991-f0598cd13a1b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof source = (Inputs.textarea({\n  value: (await FileAttachment(\"dream.txt\").text()).trim(),\n  rows: 20,\n  width\n}))","pinCode":false,"dname":"08a00c85-6da7-467d-bc02-3257d3ca2c6c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`*(Martin Luther King, Jr.: “I Have a Dream”, 1963)*`","pinCode":false,"dname":"56dbd9e1-dc27-4471-b220-983a51650c50","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"WordCloud = (function WordCloud(text, {\n  size = group => group.length, // Given a grouping of words, returns the size factor for that word\n  word = d => d, // Given an item of the data array, returns the word\n  marginTop = 0, // top margin, in pixels\n  marginRight = 0, // right margin, in pixels\n  marginBottom = 0, // bottom margin, in pixels\n  marginLeft = 0, // left margin, in pixels\n  width = 640, // outer width, in pixels\n  height = 400, // outer height, in pixels\n  maxWords = 250, // maximum number of words to extract from the text\n  fontFamily = \"sans-serif\", // font family\n  fontScale = 15, // base font size\n  fill = null, // text color, can be a constant or a function of the word\n  padding = 0, // amount of padding between the words (in pixels)\n  rotate = 0, // a constant or function to rotate the words\n  invalidation // when this promise resolves, stop the simulation\n} = {}) {\n  const words = typeof text === \"string\" ? text.split(/\\W+/g) : Array.from(text);\n  \n  const data = d3.rollups(words, size, w => w)\n    .sort(([, a], [, b]) => d3.descending(a, b))\n    .slice(0, maxWords)\n    .map(([key, size]) => ({text: word(key), size}));\n  \n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, height])\n      .attr(\"width\", width)\n      .attr(\"font-family\", fontFamily)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  const g = svg.append(\"g\").attr(\"transform\", `translate(${marginLeft},${marginTop})`);\n\n  const cloud = d3Cloud()\n      .size([width - marginLeft - marginRight, height - marginTop - marginBottom])\n      .words(data)\n      .padding(padding)\n      .rotate(rotate)\n      .font(fontFamily)\n      .fontSize(d => Math.sqrt(d.size) * fontScale)\n      .on(\"word\", ({size, x, y, rotate, text}) => {\n        g.append(\"text\")\n            .datum(text)\n            .attr(\"font-size\", size)\n            .attr(\"fill\", fill)\n            .attr(\"transform\", `translate(${x},${y}) rotate(${rotate})`)\n            .text(text);\n      });\n\n  cloud.start();\n  invalidation && invalidation.then(() => cloud.stop());\n  return svg.node();\n})","pinCode":false,"dname":"49d43f21-6b00-45d6-b09a-36055ff0752e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Data preparation\n\nThe WordCloud function does not prepare the contents. Pass it a text that will be split against all spaces and punctuation marks, an array of words that will be grouped and counted, or an array of objects with a key and a value.`","pinCode":false,"dname":"c2fa5cd7-07dd-4e4a-84b2-4da3bbe344d9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"words = (source.split(/[\\s.]+/g)\n  .map(w => w.replace(/^[“‘\"\\-—()\\[\\]{}]+/g, \"\"))\n  .map(w => w.replace(/[;:.!?()\\[\\]{},\"'’”\\-—]+$/g, \"\"))\n  .map(w => w.replace(/['’]s$/g, \"\"))\n  .map(w => w.substring(0, 30))\n  .map(w => w.toLowerCase())\n  .filter(w => w && !stopwords.has(w)))","pinCode":false,"dname":"23b7df73-0b99-48af-a115-58779b84d6f7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"words.filter(w => /\\W/.test(w))","pinCode":false,"dname":"e48663cd-941d-4e38-97f7-069a313328f3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"stopwords = (new Set(\"i,me,my,myself,we,us,our,ours,ourselves,you,your,yours,yourself,yourselves,he,him,his,himself,she,her,hers,herself,it,its,itself,they,them,their,theirs,themselves,what,which,who,whom,whose,this,that,these,those,am,is,are,was,were,be,been,being,have,has,had,having,do,does,did,doing,will,would,should,can,could,ought,i'm,you're,he's,she's,it's,we're,they're,i've,you've,we've,they've,i'd,you'd,he'd,she'd,we'd,they'd,i'll,you'll,he'll,she'll,we'll,they'll,isn't,aren't,wasn't,weren't,hasn't,haven't,hadn't,doesn't,don't,didn't,won't,wouldn't,shan't,shouldn't,can't,cannot,couldn't,mustn't,let's,that's,who's,what's,here's,there's,when's,where's,why's,how's,a,an,the,and,but,if,or,because,as,until,while,of,at,by,for,with,about,against,between,into,through,during,before,after,above,below,to,from,up,upon,down,in,out,on,off,over,under,again,further,then,once,here,there,when,where,why,how,all,any,both,each,few,more,most,other,some,such,no,nor,not,only,own,same,so,than,too,very,say,says,said,shall\".split(\",\")))","pinCode":false,"dname":"75fcd5b4-5219-4181-bc0c-bc85a18ddd00","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"WordCloud(\"Hello, World! This is a small cloud for your enjoyment\", {\n  width: 250,\n  height: 100,\n  size: () => .3 + Math.random(),\n  rotate: () => (~~(Math.random() * 6) - 3) * 30\n})","pinCode":false,"dname":"ca054a96-7d7e-47c3-82a1-989a9eb718a8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"d3Cloud = (require(\"d3-cloud@1\"))","pinCode":false,"dname":"743d6022-76b8-4564-bf74-de0209591d4d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { howto }  from './7a9e12f9fb3d8e06'","pinCode":false,"dname":"4f289f99-5e63-420f-911d-6b33dea5fcd3","codeMode":"javascript2"}}}],"version":"2.19.1"}
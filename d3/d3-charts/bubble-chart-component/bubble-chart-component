{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Bubble chart component\n\nBubble charts are non-hierarchical [packed circles](/@d3/pack?collection=@d3/charts). The area of each circle is proportional its value (here, file size). The organic appearance of these diagrams can be intriguing, but also consider a [treemap](/@d3/treemap?collection=@d3/charts) or a humble [bar chart](/@d3/horizontal-bar-chart/2).`","pinCode":false,"dname":"b3f52370-7010-4584-8acf-8cea6c10839c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"key = (Swatches(chart.scales.color))","pinCode":false,"dname":"c8cde1fe-0001-46f6-8c3f-4b202be3ea84","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"chart = (BubbleChart(files, {\n  label: d => [...d.id.split(\".\").pop().split(/(?=[A-Z][a-z])/g), d.value.toLocaleString(\"en\")].join(\"\\n\"),\n  value: d => d.value,\n  group: d => d.id.split(\".\")[1],\n  title: d => `${d.id}\\n${d.value.toLocaleString(\"en\")}`,\n  link: d => `https://github.com/prefuse/Flare/blob/master/flare/src/${d.id.replace(/\\./g, \"/\")}.as`,\n  width: 1152\n}))","pinCode":false,"dname":"48287e9a-b015-46df-be4e-6012c190ba7c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"flare = (FileAttachment(\"flare.csv\").csv({typed: true}))","pinCode":false,"dname":"4b9d04c9-802f-4dac-b6e0-870401d6f42f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"files = (flare.filter(d => d.value !== null))","pinCode":false,"dname":"ff79e74c-a822-4a18-b78c-238cf808af2b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"howto(\"BubbleChart\", {alternatives: `[D3 bubble chart example](/@d3/bubble-chart/2?intent=fork)`})","pinCode":false,"dname":"949ed56b-d656-4d89-b425-3ceae998eab8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"BubbleChart = (function BubbleChart(data, {\n  name = ([x]) => x, // alias for label\n  label = name, // given d in data, returns text to display on the bubble\n  value = ([, y]) => y, // given d in data, returns a quantitative size\n  group, // given d in data, returns a categorical value for color\n  title, // given d in data, returns text to show on hover\n  link, // given a node d, its link (if any)\n  linkTarget = \"_blank\", // the target attribute for links, if any\n  width = 640, // outer width, in pixels\n  height = width, // outer height, in pixels\n  padding = 3, // padding between circles\n  margin = 1, // default margins\n  marginTop = margin, // top margin, in pixels\n  marginRight = margin, // right margin, in pixels\n  marginBottom = margin, // bottom margin, in pixels\n  marginLeft = margin, // left margin, in pixels\n  groups, // array of group names (the domain of the color scale)\n  colors = d3.schemeTableau10, // an array of colors (for groups)\n  fill = \"#ccc\", // a static fill color, if no group channel is specified\n  fillOpacity = 0.7, // the fill opacity of the bubbles\n  stroke, // a static stroke around the bubbles\n  strokeWidth, // the stroke width around the bubbles, if any\n  strokeOpacity, // the stroke opacity around the bubbles, if any\n} = {}) {\n  // Compute the values.\n  const D = d3.map(data, d => d);\n  const V = d3.map(data, value);\n  const G = group == null ? null : d3.map(data, group);\n  const I = d3.range(V.length).filter(i => V[i] > 0);\n\n  // Unique the groups.\n  if (G && groups === undefined) groups = I.map(i => G[i]);\n  groups = G && new d3.InternSet(groups);\n\n  // Construct scales.\n  const color = G && d3.scaleOrdinal(groups, colors);\n\n  // Compute labels and titles.\n  const L = label == null ? null : d3.map(data, label);\n  const T = title === undefined ? L : title == null ? null : d3.map(data, title);\n\n  // Compute layout: create a 1-deep hierarchy, and pack it.\n  const root = d3.pack()\n      .size([width - marginLeft - marginRight, height - marginTop - marginBottom])\n      .padding(padding)\n    (d3.hierarchy({children: I})\n      .sum(i => V[i]));\n\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-marginLeft, -marginTop, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n      .attr(\"fill\", \"currentColor\")\n      .attr(\"font-size\", 10)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"text-anchor\", \"middle\");\n\n  const leaf = svg.selectAll(\"a\")\n    .data(root.leaves())\n    .join(\"a\")\n      .attr(\"xlink:href\", link == null ? null : (d, i) => link(D[d.data], i, data))\n      .attr(\"target\", link == null ? null : linkTarget)\n      .attr(\"transform\", d => `translate(${d.x},${d.y})`);\n\n  leaf.append(\"circle\")\n      .attr(\"stroke\", stroke)\n      .attr(\"stroke-width\", strokeWidth)\n      .attr(\"stroke-opacity\", strokeOpacity)\n      .attr(\"fill\", G ? d => color(G[d.data]) : fill == null ? \"none\" : fill)\n      .attr(\"fill-opacity\", fillOpacity)\n      .attr(\"r\", d => d.r);\n\n  if (T) leaf.append(\"title\")\n      .text(d => T[d.data]);\n\n  if (L) {\n    // A unique identifier for clip paths (to avoid conflicts).\n    const uid = `O-${Math.random().toString(16).slice(2)}`;\n\n    leaf.append(\"clipPath\")\n        .attr(\"id\", d => `${uid}-clip-${d.data}`)\n      .append(\"circle\")\n        .attr(\"r\", d => d.r);\n\n    leaf.append(\"text\")\n        .attr(\"clip-path\", d => `url(${new URL(`#${uid}-clip-${d.data}`, location)})`)\n      .selectAll(\"tspan\")\n      .data(d => `${L[d.data]}`.split(/\\n/g))\n      .join(\"tspan\")\n        .attr(\"x\", 0)\n        .attr(\"y\", (d, i, D) => `${i - D.length / 2 + 0.85}em`)\n        .attr(\"fill-opacity\", (d, i, D) => i === D.length - 1 ? 0.7 : null)\n        .text(d => d);\n  }\n\n  return Object.assign(svg.node(), {scales: {color}});\n})","pinCode":false,"dname":"3d0d9186-4c63-4c9a-a775-a8f9525206f0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { howto }  from './7a9e12f9fb3d8e06'","pinCode":false,"dname":"9ef8579d-35bc-4d47-a3c4-161d53709dcd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { Swatches }  from './a33468b95d0b15b0'","pinCode":false,"dname":"38c65ed8-2859-4c2c-927f-c74d5927c80a","codeMode":"javascript2"}}}],"version":"2.19.1"}
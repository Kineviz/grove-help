{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Tidy tree component\n\nD3’s [tree layout](https://d3js.org/d3-hierarchy/tree) implements the [Reingold–Tilford “tidy” algorithm](http://reingold.co/tidier-drawings.pdf) for constructing hierarchical node-link diagrams, improved to run in linear time by [Buchheim *et al.*](http://dirk.jivas.de/papers/buchheim02improving.pdf) Tidy trees are typically more compact than [cluster dendrograms](/@d3/cluster), which place all leaves at the same level. See also the [radial variant](/@d3/radial-tidy-tree).`","pinCode":false,"dname":"bf4fdded-76e7-47b2-9ea7-9faaa7d16dbc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"chart = (Tree(flare, {\n  label: d => d.name,\n  title: (d, n) => `${n.ancestors().reverse().map(d => d.data.name).join(\".\")}`, // hover text\n  link: (d, n) => `https://github.com/prefuse/Flare/${n.children ? \"tree\" : \"blob\"}/master/flare/src/${n.ancestors().reverse().map(d => d.data.name).join(\"/\")}${n.children ? \"\" : \".as\"}`,\n  width: 1152\n}))","pinCode":false,"dname":"c377c813-0e4c-45e8-83d7-f4a18c54be19","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"flare = (FileAttachment(\"flare.json\").json())","pinCode":false,"dname":"f01540c7-bdd9-4b8e-80e2-1e69f6886776","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"howto(\"Tree\", {alternatives: `[D3 tidy tree](/@d3/tree/2) and [Observable Plot tidy tree](/@observablehq/plot-tree-tidy?intent=fork)`})","pinCode":false,"dname":"1413f319-e025-4517-b578-90ebc4e4b8bf","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Tree = (function Tree(data, { // data is either tabular (array of objects) or hierarchy (nested objects)\n  path, // as an alternative to id and parentId, returns an array identifier, imputing internal nodes\n  id = Array.isArray(data) ? d => d.id : null, // if tabular data, given a d in data, returns a unique identifier (string)\n  parentId = Array.isArray(data) ? d => d.parentId : null, // if tabular data, given a node d, returns its parent’s identifier\n  children, // if hierarchical data, given a d in data, returns its children\n  tree = d3.tree, // layout algorithm (typically d3.tree or d3.cluster)\n  sort, // how to sort nodes prior to layout (e.g., (a, b) => d3.descending(a.height, b.height))\n  label, // given a node d, returns the display name\n  title, // given a node d, returns its hover text\n  link, // given a node d, its link (if any)\n  linkTarget = \"_blank\", // the target attribute for links (if any)\n  width = 640, // outer width, in pixels\n  height, // outer height, in pixels\n  r = 3, // radius of nodes\n  padding = 1, // horizontal padding for first and last column\n  fill = \"#999\", // fill for nodes\n  fillOpacity, // fill opacity for nodes\n  stroke = \"#555\", // stroke for links\n  strokeWidth = 1.5, // stroke width for links\n  strokeOpacity = 0.4, // stroke opacity for links\n  strokeLinejoin, // stroke line join for links\n  strokeLinecap, // stroke line cap for links\n  halo = \"#fff\", // color of label halo \n  haloWidth = 3, // padding around the labels\n  curve = d3.curveBumpX, // curve for the link\n} = {}) {\n\n  // If id and parentId options are specified, or the path option, use d3.stratify\n  // to convert tabular data to a hierarchy; otherwise we assume that the data is\n  // specified as an object {children} with nested objects (a.k.a. the “flare.json”\n  // format), and use d3.hierarchy.\n  const root = path != null ? d3.stratify().path(path)(data)\n      : id != null || parentId != null ? d3.stratify().id(id).parentId(parentId)(data)\n      : d3.hierarchy(data, children);\n\n  // Sort the nodes.\n  if (sort != null) root.sort(sort);\n\n  // Compute labels and titles.\n  const descendants = root.descendants();\n  const L = label == null ? null : descendants.map(d => label(d.data, d));\n\n  // Compute the layout.\n  const dx = 10;\n  const dy = width / (root.height + padding);\n  tree().nodeSize([dx, dy])(root);\n\n  // Center the tree.\n  let x0 = Infinity;\n  let x1 = -x0;\n  root.each(d => {\n    if (d.x > x1) x1 = d.x;\n    if (d.x < x0) x0 = d.x;\n  });\n\n  // Compute the default height.\n  if (height === undefined) height = x1 - x0 + dx * 2;\n\n  // Use the required curve\n  if (typeof curve !== \"function\") throw new Error(`Unsupported curve`);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [-dy * padding / 2, x0 - dx, width, height])\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 10);\n\n  svg.append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", stroke)\n      .attr(\"stroke-opacity\", strokeOpacity)\n      .attr(\"stroke-linecap\", strokeLinecap)\n      .attr(\"stroke-linejoin\", strokeLinejoin)\n      .attr(\"stroke-width\", strokeWidth)\n    .selectAll(\"path\")\n      .data(root.links())\n      .join(\"path\")\n        .attr(\"d\", d3.link(curve)\n            .x(d => d.y)\n            .y(d => d.x));\n\n  const node = svg.append(\"g\")\n    .selectAll(\"a\")\n    .data(root.descendants())\n    .join(\"a\")\n      .attr(\"xlink:href\", link == null ? null : d => link(d.data, d))\n      .attr(\"target\", link == null ? null : linkTarget)\n      .attr(\"transform\", d => `translate(${d.y},${d.x})`);\n\n  node.append(\"circle\")\n      .attr(\"fill\", d => d.children ? stroke : fill)\n      .attr(\"r\", r);\n\n  if (title != null) node.append(\"title\")\n      .text(d => title(d.data, d));\n\n  if (L) node.append(\"text\")\n      .attr(\"dy\", \"0.32em\")\n      .attr(\"x\", d => d.children ? -6 : 6)\n      .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n      .attr(\"paint-order\", \"stroke\")\n      .attr(\"stroke\", halo)\n      .attr(\"stroke-width\", haloWidth)\n      .text((d, i) => L[i]);\n\n  return svg.node();\n})","pinCode":false,"dname":"a141384c-e02a-4a14-a5f5-3fe010d18b41","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { howto }  from './7a9e12f9fb3d8e06'","pinCode":false,"dname":"0473412d-1b3d-47c2-96c2-41a42a80a069","codeMode":"javascript2"}}}],"version":"2.19.1"}
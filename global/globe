{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"viewof mapMode = Inputs.radio([\"Globe\", \"Plane\"], {label: \"Map Mode\", value: \"Globe\"})","pinCode":false,"dname":"47b1bfa7-049c-4a22-aac3-5c8488addcf0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof globeVisible = Inputs.radio([\"Show\", \"Hide\"], {label: \"Globe Visiblity\", value: \"Show\"})\n","pinCode":false,"dname":"2f22a2a0-82dc-4870-82b2-d1dbaa19aa11","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof globeLabelsVisiblity = Inputs.radio([\"Show\", \"Hide\"], {label: \"Globe Labels Visiblity\", value: \"Show\"})","pinCode":false,"dname":"d3110249-d1a6-4683-9ba8-ef2229a710ab","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof globeBorderVisiblity = Inputs.radio([\"Show\", \"Hide\"], {label: \"Globe Border Visiblity\", value: \"Show\"})","pinCode":false,"dname":"1c5d2997-0c9f-42ac-b5f7-b8f6d96e6767","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof rotate = Inputs.radio([\"Yes\", \"No\"], {label: \"Rotate\", value: \"No\"})","pinCode":false,"dname":"aadbf775-24d7-42c6-9b53-0cc521b1f48a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof plot = Inputs.radio([\"Yes\", \"No\"], {label: \"Plot\", value: \"No\"})","pinCode":false,"dname":"1ae64d00-cb61-470b-ac48-a4dea3198be0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof neighberOrderProperty = Inputs.select([\"name\"], {label: \"Neighber Order Property\"})","pinCode":false,"dname":"e4941fb4-29c9-417e-ac7d-0365fd90e3a3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof neighberOrder = Inputs.radio([\"asc\", \"desc\"], {label: \"Neighber Order\", value: \"asc\"})","pinCode":false,"dname":"671508e3-f7b4-4121-9091-e3355d01a852","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof dayNightTransition = Inputs.range([0, 1], {label: \"Night->Day\", step: 0.1,value:0.5})","pinCode":false,"dname":"fa98311d-62f1-4277-acd7-878e9c9feaed","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof rotateSpeed = Inputs.range([0.1, 5], {label: \"Rotate Speed\", step: 0.1,value:0.5})","pinCode":false,"dname":"e4d4cb3a-99d7-48b6-bb6f-39db28d5e7b7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof globeRadius = Inputs.range([1, 6], {label: \"Globe Radius\", step: 0.1,value:1})","pinCode":false,"dname":"06bab9ca-acd2-46c3-9b28-5eb78055e6fb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof nodeDistance = Inputs.range([0.01, 0.5], {label: \"Node distance from surface\", step: 0.01,value:0.05})","pinCode":false,"dname":"4ca4d19b-30a9-41e9-9b16-faafee5eb71c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof neighberOffset = Inputs.range([0.01, 1], {label: \"Neighber Offset\", step: 0.01,value:0.5})","pinCode":false,"dname":"f2961a87-72ca-4633-b0e4-055641362573","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof neighberDistance = Inputs.range([0.01, 0.5], {label: \"Neighber Distance\", step: 0.01,value:0.05})","pinCode":false,"dname":"02b163f2-7d02-406b-99e0-ed7675728850","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  \n    function safeParseFloat(value) {\n    const parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n    }\n  \n   if(mapMode == \"Globe\"){\n     _app.controller.drawing?.worldMap?.hide();\n      globeVisible==\"Show\"?globe.show():globe.hide()\n      globeVisible==\"Show\"?globe.update({radius:globeRadius,showLabels:globeLabelsVisiblity == \"Show\"?true:false,showBorder:globeBorderVisiblity==\"Show\"?true:false,distance:nodeDistance,neighberDistance:neighberDistance,neighberOffset,dayNightTransition,neighberOrder:neighberOrder,neighberOrderProperty:neighberOrderProperty?neighberOrderProperty:\"name\"}):null\n     globe.rotate(rotate==\"Yes\"?true:false,rotateSpeed)\n    globe.projectNodes()\n     \n    if(plot == \"Yes\" && !window.globePlot){\n    \t window.globePlot = globe.plot(null,{duration:10000,plotProps:{Country:\"incident\"},colorScale:\"default\"})\n    }\n     else if(plot == \"Yes\"  && window.globePlot){\n     \twindow.globePlot.show()\n     }\n     else{\n     window.globePlot? window.globePlot.hide():null\n     }\n     \n   }else{\n     _GXR.TaskList.showMap.func();\n     \n     setTimeout(()=>{\n            globe.hide()\n         const geoNodes =gxr.nodes().array.filter(n=>n.data['hasLatLng'])\n                 geoNodes.forEach(n => {\n                let neighbors = n.neighbor\n                const neighborNodes = neighbors.map(n=>gxr.getNode(n))\n                if(neighberOrderProperty){\n                  const orderProperty = neighberOrderProperty;\n                  const sortOrder = neighberOrder;\n                  const sortFunction = (a,b)=> {\n                    const aValue = a.properties[orderProperty];\n                    const bValue = b.properties[orderProperty];\n                    if (typeof aValue === 'string' && typeof bValue === 'string') {\n                      return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n                    } else {\n                      const aNum = safeParseFloat(aValue);\n                      const bNum = safeParseFloat(bValue);\n                      return sortOrder === 'asc' ? aNum - bNum : bNum - aNum;\n                    }\n                  }\n                  neighborNodes.sort(sortFunction);\n                }\n                \n                neighborNodes.forEach((neighborNode,idx)=>{\n                    let position = n.position\n                    let newPoistion = position.clone()\n                    newPoistion.y += neighberOffset + (idx + 1) * neighberDistance          \n                    neighborNode.pinned = true\n                    neighborNode.position=newPoistion\n                })\n\n                })\n   },400)\n     \n   }\n}","pinCode":false,"dname":"e40e8a47-c8f3-4e09-a06e-70fd24a64978","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"globe = await gxr.createGlobe()","pinCode":false,"dname":"9e479ab0-8323-4920-908b-a00f46df49a3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"","pinCode":true,"dname":"f3df4947-f3be-4797-a10e-dcc698f2a063","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"dd1c3122-9825-4b83-93d7-83a3f88f3ea7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"names$csv = FileAttachment(\"global_viz.zip\")","pinCode":false,"dname":"b112890e-7662-4e29-8dd9-5132bcddd83f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n    let file = new File(\n      [await names$csv.blob()],\n      names$csv.name.substring(names$csv.name.lastIndexOf(\"/\") + 1),\n      { type: names$csv.mimeType }\n    );\n    _app.controller.importGraphXR(file)\n}","pinCode":false,"dname":"56581c4c-274f-4fc4-9727-4e64e385d5ed","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { csvPlainFile  } from \"https://grove-help.graphxr.com/1_graphxr/ImportCsvToGraph\"","pinCode":false,"dname":"cd94cb6e-0b0f-40d2-b7de-2106f211ce0a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"","pinCode":true,"dname":"6668ad07-a746-440b-b713-df0cad6b2860","codeMode":"javascript2"}}}],"version":"2.19.1"}
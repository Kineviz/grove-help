{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Debouncing Input`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof input = (html`<input placeholder=\"Type some text here.\">`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Non-debounced input:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"input","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Debounced input:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"debounce(viewof input)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`A function for debouncing input:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"debounce = (function debounce(input, delay = 1000) {\n  return Generators.observe(notify => {\n    let timer = null;\n    let value;\n\n    // On input, check if we recently reported a value.\n    // If we did, do nothing and wait for a delay;\n    // otherwise, report the current value and set a timeout.\n    function inputted() {\n      if (timer !== null) return;\n      notify(value = input.value);\n      timer = setTimeout(delayed, delay);\n    }\n\n    // After a delay, check if the last-reported value is the current value.\n    // If itâ€™s not, report the new value.\n    function delayed() {\n      timer = null;\n      if (value === input.value) return;\n      notify(value = input.value);\n    }\n\n    input.addEventListener(\"input\", inputted), inputted();\n    return () => input.removeEventListener(\"input\", inputted);\n  });\n})","pinCode":false}}}],"version":"2.19.1"}
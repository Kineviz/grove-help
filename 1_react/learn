{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"# LEARN","pinCode":false,"dname":"4eb37c7c-f45e-487e-99be-87868a29400a","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable selectedNodes = gxr.nodes(\"[[selected]]\").array","pinCode":false,"dname":"dbb8f24c-0d99-41c4-8562-69705d927476","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof button = render(({ useSetter }) => {\n  const { Button, Select, Space } = Antd;\n  const randomGraphFunc = () => {\n    gxr\n      .graph()\n      .clear()\n      .generate()\n      .degree()\n      .ego(\n        {\n          properties: { degree: (value) => value >= 3 },\n          depth: 5,\n          mode: \"tree\",\n          orientation: \"down\",\n          edgeLength: 0.5,\n          sortByProperty: \"degree\",\n        },\n        { duration: 1000 }\n      );\n  };\n  const selectAllFunc = (d) => {\n    gxr.nodes().style(\"selected\", true);\n    mutable selectedNodes = gxr.nodes(\"[[selected]]\").array;\n  };\n  useSetter({});\n  const layoutFunc = (value) => {\n    gxr[value]({ nodes: gxr.nodes(\"[[selected]]\").array });\n  };\n  return jsx`<${Space} key='72b97051-74c6-42a3-a2d5-1d41660b8739' direction=\"vertical\">\n     <${Button} onClick=${randomGraphFunc}  >Random Graph<//>\n  \t <${Button} icon=${jsx`<i className=\"fas fa-sync-alt\"></i>`} onClick=${(d) => {\n        mutable selectedNodes = gxr.nodes(\"[[selected]]\").array;\n      }}  >Get Selected Nodes<//>\n  \t <${Button} onClick=${selectAllFunc}  >Select All<//>\n     <div> Layout: <${Select}\n      defaultValue=\"circle\"\n      style=${{ width: 120 }}\n      onChange=${layoutFunc}\n      options=${[\n        { value: \"circle\", label: \"circle\" },\n        { value: \"cube\", label: \"cube\" },\n        { value: \"ego\", label: \"ego\" },\n        { value: \"grid\", label: \"grid\" },\n        { value: \"line\", label: \"line\" },\n      ]}\n    />\n    </div>\n    </${Space}>\n    `;\n})","pinCode":false,"dname":"52b212d6-bd28-4fc4-b308-1493afbb5bea","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof rs = render(({ useSetter }) => {\n  const { Space, Select } = Antd;\n  const [selectNode, setSelectNode] = useState(undefined);\n  useSetter({ selectNode });\n  return jsx`<${Space} key='34efffc9-20e5-4bcf-8e84-9dcc8cecc319' direction=\"vertical\">\n     <div> Select a node: <${Select}\n      defaultValue=${selectedNodes.indexOf(selectNode)}\n      style=${{ width: 120 }}\n      onChange=${(value) => {\n        setSelectNode(selectedNodes[value]);\n      }}\n      options=${_.reduce(\n        selectedNodes,\n        (p, node, i) => {\n          p.push({ value: i, label: `node ${i}` });\n          return p;\n        },\n        [{ value: -1, label: ` ` }]\n      )}\n    />\n    </div>\n    </${Space}>`;\n})","pinCode":false,"dname":"2579fa2e-6262-463b-bc72-b06ca5aceb25","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"rs","pinCode":false,"dname":"a45ebdfc-20f5-4ad4-b9d0-a3adcc5c2fda","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"rows = selectMainDatas(\"Node\")","pinCode":false,"dname":"75617412-228e-48bd-bfe8-e75938a358c6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"editTable = render(({useSetter})=>{\n  const { Form, Input, InputNumber, Popconfirm, Table, Typography } = Antd;\n  const originData = _.map(rows.data,(r,i)=>{\n  \treturn _.assign(r.key?{}:{key:rows.data.keysArr[i]},r)\n  });\n  const EditableCell = ({\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    record,\n    index,\n    children,\n    ...restProps\n  }) => {\n    const inputNode = inputType === 'number' ? jsx`<${InputNumber} />` : jsx`<${Input} />`;\n    return (\n      jsx`<td ...${restProps}>\n        ${editing ? (\n          jsx`<${Form.Item}\n            name=${dataIndex}\n            style=${{\n              margin: 0,\n            }}\n            rules=${[\n              {\n                required: true,\n                message: `Please Input ${title}!`,\n              },\n            ]}\n          >\n            ${inputNode}\n          </${Form.Item}>`\n        ) : (\n          children\n        )}\n      </td>`\n    );\n  };\n  const App = () => {\n    const [form] = Form.useForm();\n    const [data, setData] = useState(originData);\n    const [editingKey, setEditingKey] = useState('');\n    const isEditing = (record) => record.key === editingKey;\n    const edit = (record) => {\n      form.setFieldsValue({\n        name: '',\n        age: '',\n        address: '',\n        ...record,\n      });\n      setEditingKey(record.key);\n    };\n    const cancel = () => {\n      setEditingKey('');\n    };\n    const save = async (key) => {\n      try {\n        const row = await form.validateFields();\n        const newData = [...data];\n        const index = newData.findIndex((item) => key === item.key);\n        debugger\n        if (index > -1) {\n          const item = newData[index];\n//           let node  = gxr.getNode(item.key);\n          let properties = {\n            ...item,\n            ...row,\n          };\n          delete properties.key;\n          gxr.nodes(item.key).properties(properties);\n          newData.splice(index, 1, properties);\n          setData(newData);\n          setEditingKey('');\n        } else {\n          alert(\"can not find the row!\")\n        }\n      } catch (errInfo) {\n        console.log('Validate Failed:', errInfo);\n      }\n    };\n    const columns = [\n      ..._.map(_.cloneDeep(rows.columns),(r)=>{return _.assign({},r,{editable:true})}),\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (_, record) => {\n          const editable = isEditing(record);\n          return editable ? (\n            jsx`<span>\n              <${Typography.Link}\n                onClick=${() => save(record.key)}\n                style=${{\n                  marginRight: 8,\n                }}\n              >\n                Save\n              </${Typography.Link}>\n              <${Popconfirm} title=\"Sure to cancel?\" onConfirm=${cancel}>\n                <a>Cancel</a>\n              </${Popconfirm}>\n            </span>`\n          ) : (\n            jsx`<${Typography.Link} disabled=${editingKey !== ''} onClick=${() => edit(record)}>\n              Edit\n            </${Typography.Link}>`\n          );\n        },\n      },\n    ];\n    const mergedColumns = columns.map((col) => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: (record) => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: isEditing(record),\n        }),\n      };\n    });\n    return (\n      jsx`<${Form} key='643c37a5-1f18-418b-8012-737b4aaeb6e1' form=${form} component=${false}>\n        <${Table}\n          components=${{\n            body: {\n              cell: EditableCell,\n            },\n          }}\n          bordered\n          dataSource=${data}\n          columns=${mergedColumns}\n          rowClassName=\"editable-row\"\n          pagination=${{\n            onChange: cancel,\n          }}\n        />\n      </${Form}>`\n    );\n  };\n  return jsx`<${App} key='990df9b6-bad6-4219-bd2a-a75247c81c6a' />`\n})\n","pinCode":false,"dname":"e631fb0f-72b5-446d-afe9-bb4e1c01e9ff","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"261c1690-efb6-4d1a-bcce-b2aca77f4169","codeMode":"javascript2"}}}],"version":"2.19.1"}
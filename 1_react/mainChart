{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"# Main Chart","pinCode":false,"dname":"959858eb-292d-4307-b401-3d7bcdb3d658","codeMode":"markdown"}}},{"type":"antChart","data":{"chartConfigs":{"956c4728-adac-4444-9d22-644deb0d6e18":{"chartKey":"956c4728-adac-4444-9d22-644deb0d6e18","createTime":1740558205507,"renderType":"Jsx","active":true,"fetchPeriod":0,"plotCode":"","text":"viewof selectCategory = render(({ useSetter }) => {\n  const { Select } = Antd;\n  const [category, setCategory] = useState(categories[0])\n  const handleChange = (value) => {\n    setCategory(value);\n  };\n  useEffect(()=>{\n  \tif(!~categories.indexOf(category)){\n      setCategory(categories[0])\n    }\n  }, categories)\n  useSetter(category);\n  return <Select key='e21d3e1b-717f-4fd3-a3e3-a3898a0000d0'\n                        value={category}\n                        style={{ width: '100%' }}\n                        onChange={handleChange}\n                        options={_.map(categories,(l)=>{\n    return {label:l,\n            value:l\n           }})} />;\n})","selectedCategoryFrom":"","selectedCategory":"","selectedProperties":[],"selectedDb":"","chartData":[],"emptyFills":{},"castColumns":{},"joinColumns":{},"chartColumns":[],"type":"","options":{"title":{"text":"Select Category","size":{"displayConfig":{"type":"Select"},"selector":["h1","h2","h3","h4","h5","h6"],"value":"h6"}},"description":{"text":"Enter markdown here..."},"backgroundColor":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"#fafafa"}}}}},"451ce94d-feb0-4ef9-aa38-74bca3d27fef":{"chartKey":"451ce94d-feb0-4ef9-aa38-74bca3d27fef","createTime":1740582294412,"renderType":"Table","active":true,"fetchPeriod":0,"plotCode":"","text":"","selectedCategoryFrom":"shareData","selectedCategory":"selectInfoDatas","selectedProperties":[],"selectedDb":"","chartData":[],"emptyFills":{},"castColumns":{},"joinColumns":{},"chartColumns":[],"type":"","options":{"title":{"text":"","size":{"displayConfig":{"type":"Select"},"selector":["h1","h2","h3","h4","h5","h6"],"value":"h6"}},"description":{"text":"Table description"},"backgroundColor":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"#fafafa"}}},"transposed":{"LABEL":"Transpose Rows & Columns","displayConfig":{"type":"Boolean"},"value":false},"pageSize":10,"showSorterTooltip":{"LABEL":"Show Sorter Tooltip","displayConfig":{"type":"Boolean"},"value":true}}},"426c539c-d517-4d47-a84c-cc3a72c12e56":{"chartKey":"426c539c-d517-4d47-a84c-cc3a72c12e56","createTime":1740620269792,"renderType":"Markdown","active":true,"fetchPeriod":0,"plotCode":"","text":"###### Total node number of ${selectCategory}\n# ${selectInfoDatas.length}","selectedCategoryFrom":"","selectedCategory":"","selectedProperties":[],"selectedDb":"","chartData":[],"emptyFills":{},"castColumns":{},"joinColumns":{},"chartColumns":[],"type":"","options":{"title":{"text":" ","size":{"displayConfig":{"type":"Select"},"selector":["h1","h2","h3","h4","h5","h6"],"value":"h6"}},"description":{"text":"Enter markdown here..."},"backgroundColor":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"#fafafa"}}}}},"9e98c802-9b7f-4fb6-b425-1ed11632f2e3":{"chartKey":"9e98c802-9b7f-4fb6-b425-1ed11632f2e3","createTime":1740663866505,"renderType":"Jsx","active":true,"fetchPeriod":0,"plotCode":"","text":"render(({ useSetter }) => {\n    const { Space, Button } = Antd;\n  \tconst [selectedFile, setSelectedFile] = useState(null);\n    const handleFileChange = (event) => {\n      setSelectedFile(event.target.files[0]);\n    };\n    return <Space direction=\"vertical\" key=\"34b88aff-fd9a-45a4-93b3-9b8af17fefb8\" className=\"flex flex-col items-center p-4 border-2 border-dashed rounded-lg w-96 mx-auto mt-10\">\n      <input\n        type=\"file\"\n        id=\"fileInput\"\n        className=\"hidden\"\n        onChange={handleFileChange}\n      />\n      <Button onClick={async () => {\n          window.opener._app.controller.importGraphXR(selectedFile);\n        }}> Import GraphXR</Button>\n    </Space>;\n})","selectedCategoryFrom":"","selectedCategory":"","selectedProperties":[],"selectedDb":"","chartData":[],"emptyFills":{},"castColumns":{},"joinColumns":{},"chartColumns":[],"type":"","options":{"title":{"text":"Import Data Into GraphXR","size":{"displayConfig":{"type":"Select"},"selector":["h1","h2","h3","h4","h5","h6"],"value":"h6"}},"description":{"text":"Enter markdown here..."},"backgroundColor":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"#fafafa"}}}}},"6fccfb1d-d9bf-4cbd-86b9-e8ee260d6f2e":{"chartKey":"6fccfb1d-d9bf-4cbd-86b9-e8ee260d6f2e","createTime":1740663901513,"renderType":"Table","active":true,"fetchPeriod":0,"plotCode":"","text":"","selectedCategoryFrom":"shareData","selectedCategory":"categoryTableData","selectedProperties":[],"selectedDb":"","chartData":[],"emptyFills":{},"castColumns":{},"joinColumns":{},"chartColumns":[],"type":"","options":{"title":{"text":"Categories Table","size":{"displayConfig":{"type":"Select"},"selector":["h1","h2","h3","h4","h5","h6"],"value":"h6"}},"description":{"text":"Table description"},"backgroundColor":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"#fafafa"}}},"transposed":{"LABEL":"Transpose Rows & Columns","displayConfig":{"type":"Boolean"},"value":false},"pageSize":10,"showSorterTooltip":{"LABEL":"Show Sorter Tooltip","displayConfig":{"type":"Boolean"},"value":true}}},"8ae6d26b-9025-4f73-89c8-5ac42a3800ce":{"chartKey":"8ae6d26b-9025-4f73-89c8-5ac42a3800ce","createTime":1740667287150,"renderType":"Chart","active":true,"fetchPeriod":0,"plotCode":"","text":"","selectedCategoryFrom":"shareData","selectedCategory":"categoryTableData","selectedProperties":["Category","NodeNum"],"selectedDb":"","chartData":[],"emptyFills":{},"castColumns":{},"joinColumns":{},"chartColumns":[],"type":"Basic Column","options":{"xField":"Category","yField":"NodeNum","title":{"text":"Categories Column Chart","size":{"displayConfig":{"type":"Select"},"selector":["h1","h2","h3","h4","h5","h6"],"value":"h6"}},"description":{"text":"a simple column chart"},"padding":{"displayConfig":{"type":"Padding"},"value":"auto"},"autoFit":true,"renderer":{"displayConfig":{"type":"Select"},"selector":["canvas","svg"],"value":"canvas"},"columnWidthRatio":{"displayConfig":{"type":"Number"},"minV":0.1,"maxV":1,"step":0.1,"value":0.5},"legend":{"displayConfig":{"type":"Remove"},"position":{"displayConfig":{"type":"Select"},"selector":["top","top-left","top-right","left","left-top","left-bottom","right","right-top","right-bottom","bottom","bottom-left","bottom-right"],"value":"top-left"},"flipPage":true,"offsetX":0,"offsetY":0},"label":{"displayConfig":{"type":"Off"},"position":{"displayConfig":{"type":"Select"},"selector":["top","bottom","middle","left","right"],"value":"top"},"offset":0,"offsetX":0,"offsetY":0,"style":{"displayConfig":{"type":"Off"},"fontSize":10,"textAlign":{"displayConfig":{"type":"Select"},"selector":["left","center","right"],"value":"center"},"fill":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"var(--text-color)"}}}}},"xAxis":{"title":{"displayConfig":{"type":"Off"},"text":"Category","autoRotate":true},"label":{"offset":10,"offsetX":0,"offsetY":0,"rotate":{"displayConfig":{"type":"Number"},"minV":0,"maxV":10,"step":0.01,"value":0},"autoRotate":false,"autoHide":true,"style":{"displayConfig":{"type":"Off"},"fontSize":10,"textAlign":{"displayConfig":{"type":"Select"},"selector":["left","center","right"],"value":"center"},"fill":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"var(--text-color)"}}}}},"tickLine":{"displayConfig":{"type":"Off"},"length":5},"grid":{"displayConfig":{"type":"Off"},"line":{"style":{"lineWidth":1}}},"min":{"displayConfig":{"type":"Off","onValue":0}},"tickInterval":{"displayConfig":{"type":"Off","onValue":5}}},"yAxis":{"title":{"displayConfig":{"type":"Off"},"text":"NodeNum","autoRotate":true},"label":{"offset":10,"offsetX":0,"offsetY":0,"rotate":{"displayConfig":{"type":"Number"},"minV":0,"maxV":10,"step":0.01,"value":0},"autoRotate":false,"autoHide":true,"style":{"displayConfig":{"type":"Off"},"fontSize":10,"textAlign":{"displayConfig":{"type":"Select"},"selector":["left","center","right"],"value":"center"},"fill":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"var(--text-color)"}}}}},"tickLine":{"displayConfig":{"type":"Off"},"length":5},"grid":{"displayConfig":{"type":"On"},"line":{"style":{"lineWidth":1}}},"min":{"displayConfig":{"type":"On","onValue":0}},"tickInterval":{"displayConfig":{"type":"Off","onValue":5}}},"color":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"#5B8FF9"}}},"interactions":[{"type":{"displayConfig":{"type":"Select"},"selector":["element-active","element-selected","element-single-selected","element-highlight","element-highlight-by-color","element-highlight-by-x","legend-highlight","axis-label-highlight"],"value":"element-active"}},{"type":{"displayConfig":{"type":"Select"},"selector":["element-active","element-selected","element-single-selected","element-highlight","element-highlight-by-color","element-highlight-by-x","legend-highlight","axis-label-highlight"],"value":"element-selected"}}],"appendPadding":{"displayConfig":{"type":"AppendPadding"},"value":0},"tooltip":{"showContent":true,"shared":false,"customContent":{"displayConfig":{"type":"On","onValue":{"displayConfig":{"type":"JsText"},"value":"(title, data) => {\n                    let datas = _.uniq(_.map(data,(d)=>{\n                        return d.data?.datum?.SOURCE_CHART_DATA || d.data?.SOURCE_CHART_DATA || d.data?.datum || d.data;\n                    }))\n                    let bs = _.map(data, (d) => d.name);\n                    return datas.length && _.reduce(datas, (p,d,i)=>{ p += _.reduce(d, (prev, v, k) => {\n                        if (\"SPECIAL_GRAPHXR_NODE_ID\" !== k && \"SOURCE_CHART_DATA\" !== k) {\n                            if (~bs.indexOf(k)) {\n                                prev += (`<div class=\"d-flex justify-content-between\"><div><b> <span class=\"fas fa-circle f10\" style=\"color:${data[bs.indexOf(k)].color}\"></span>${k}&nbsp;&nbsp;</b></div><div><b>${v}</b></div></div>`)\n                            } else {\n                                prev += (`<div class=\"d-flex justify-content-between\"><div>${k}&nbsp;&nbsp;</div><div>${v}</div></div>`)\n                            }\n                        }\n                        return prev;\n                    }, (i == 0 ? \"\" : \"<hr>\") + (`<div class=\"mb1\"><b> <span class=\"fas fa-circle f10\" style=\"color:${data[i].color}\"></span>${data[i].title}</b></div>`));\n                    return p;\n                    }, \"\")\n                }"}}}},"linkMain":{"selectGraphNode":true,"flyTo":{"displayConfig":{"type":"Select"},"selector":["none","center","node"],"value":"node"}}}},"cc909bb2-ec2e-43f7-9ec0-e1a42592f5dc":{"chartKey":"cc909bb2-ec2e-43f7-9ec0-e1a42592f5dc","createTime":1740667865475,"renderType":"Jsx","active":true,"fetchPeriod":0,"plotCode":"","text":" render(({useSetter})=>{\n  const { Form, Input, InputNumber, Popconfirm, Table, Typography, Space } = Antd;\n  const originData = _.map(selectCategoryInfo.data,(r,i)=>{\n  \treturn _.assign(r.key?{}:{key:selectCategoryInfo.data.keysArr[i]},r)\n  });\n  const EditableCell = ({\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    record,\n    index,\n    children,\n    ...restProps\n  }) => {\n    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n    return (\n      <td {...restProps}>\n        {editing ? (\n          <Form.Item\n            name={dataIndex}\n            style={{\n              margin: 0,\n            }}\n            rules={[\n              {\n                required: true,\n                message: `Please Input ${title}!`,\n              },\n            ]}\n          >\n            {inputNode}\n          </Form.Item>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  };\n  const App = () => {\n    const [form] = Form.useForm();\n    const [data, setData] = useState(originData);\n    const [editingKey, setEditingKey] = useState('');\n    const isEditing = (record) => record.key === editingKey;\n    const edit = (record) => {\n      form.setFieldsValue({\n        name: '',\n        age: '',\n        address: '',\n        ...record,\n      });\n      setEditingKey(record.key);\n    };\n    const cancel = () => {\n      setEditingKey('');\n    };\n    const save = async (key) => {\n      try {\n        const row = await form.validateFields();\n        const newData = [...data];\n        const index = newData.findIndex((item) => key === item.key);\n        debugger\n        if (index > -1) {\n          const item = newData[index];\n//           let node  = gxr.getNode(item.key);\n          let properties = {\n            ...item,\n            ...row,\n          };\n          delete properties.key;\n          gxr.nodes(item.key).properties(properties);\n          newData.splice(index, 1, properties);\n          setData(newData);\n          setEditingKey('');\n        } else {\n          alert(\"can not find the row!\")\n        }\n      } catch (errInfo) {\n        console.log('Validate Failed:', errInfo);\n      }\n    };\n    const columns = [\n      ..._.map(_.cloneDeep(selectCategoryInfo.columns),(r)=>{return _.assign({},r,{editable:true})}),\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (_, record) => {\n          const editable = isEditing(record);\n          return editable ? (\n            <span>\n              <Typography.Link\n                onClick={() => save(record.key)}\n                style={{\n                  marginRight: 8,\n                }}\n              >\n                Save\n              </Typography.Link>\n              <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n                <a>Cancel</a>\n              </Popconfirm>\n            </span>\n          ) : (\n            <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>\n              Edit\n            </Typography.Link>\n          );\n        },\n      },\n    ];\n    const mergedColumns = columns.map((col) => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: (record) => ({\n          record,\n          inputType: col.dataIndex === 'kills' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: isEditing(record),\n        }),\n      };\n    });\n    return (\n      <Form key='6f2a85e8-b9a8-4f34-a098-d7a7659bbf1a' form={form} component={false}>\n        <Space direction=\"vertical\">\n          <h3>Edit {selectCategory} nodes.</h3>\n          <Table\n            components={{\n              body: {\n                cell: EditableCell,\n              },\n            }}\n            bordered\n            dataSource={data}\n            columns={mergedColumns}\n            rowClassName=\"editable-row\"\n            pagination={{\n              onChange: cancel,\n            }}\n            />\n        </Space>\n      </Form>\n    );\n  };\n  return <App key='3ffcd1c2-9938-47a4-85cf-9ca597377801' />\n})","selectedCategoryFrom":"","selectedCategory":"","selectedProperties":[],"selectedDb":"","chartData":[],"emptyFills":{},"castColumns":{},"joinColumns":{},"chartColumns":[],"type":"","options":{"title":{"text":"","size":{"displayConfig":{"type":"Select"},"selector":["h1","h2","h3","h4","h5","h6"],"value":"h6"}},"description":{"text":"Enter markdown here..."},"backgroundColor":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"#fafafa"}}}}}},"layouts":{"lg":[{"w":4,"h":6,"x":0,"y":11,"i":"956c4728-adac-4444-9d22-644deb0d6e18","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":4,"h":12,"x":4,"y":11,"i":"451ce94d-feb0-4ef9-aa38-74bca3d27fef","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":4,"h":6,"x":0,"y":17,"i":"426c539c-d517-4d47-a84c-cc3a72c12e56","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":4,"h":11,"x":0,"y":0,"i":"9e98c802-9b7f-4fb6-b425-1ed11632f2e3","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":4,"h":11,"x":4,"y":0,"i":"6fccfb1d-d9bf-4cbd-86b9-e8ee260d6f2e","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":4,"h":11,"x":8,"y":0,"i":"8ae6d26b-9025-4f73-89c8-5ac42a3800ce","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":4,"h":12,"x":8,"y":11,"i":"cc909bb2-ec2e-43f7-9ec0-e1a42592f5dc","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":3,"h":4,"x":4,"y":23,"i":"add","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":false,"isResizable":false}],"sm":[{"w":3,"h":4,"x":0,"y":0,"i":"956c4728-adac-4444-9d22-644deb0d6e18","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":6,"h":4,"x":0,"y":4,"i":"451ce94d-feb0-4ef9-aa38-74bca3d27fef","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":6,"h":4,"x":0,"y":8,"i":"426c539c-d517-4d47-a84c-cc3a72c12e56","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":6,"h":4,"x":0,"y":12,"i":"9e98c802-9b7f-4fb6-b425-1ed11632f2e3","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":6,"h":4,"x":0,"y":16,"i":"6fccfb1d-d9bf-4cbd-86b9-e8ee260d6f2e","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":6,"h":4,"x":0,"y":20,"i":"8ae6d26b-9025-4f73-89c8-5ac42a3800ce","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":6,"h":4,"x":0,"y":24,"i":"cc909bb2-ec2e-43f7-9ec0-e1a42592f5dc","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":6,"h":4,"x":0,"y":28,"i":"add","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":false,"isResizable":false}],"md":[{"w":3,"h":4,"x":0,"y":0,"i":"451ce94d-feb0-4ef9-aa38-74bca3d27fef","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":3,"h":4,"x":6,"y":0,"i":"426c539c-d517-4d47-a84c-cc3a72c12e56","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":3,"h":4,"x":0,"y":4,"i":"9e98c802-9b7f-4fb6-b425-1ed11632f2e3","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":3,"h":4,"x":3,"y":0,"i":"6fccfb1d-d9bf-4cbd-86b9-e8ee260d6f2e","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":3,"h":4,"x":3,"y":4,"i":"8ae6d26b-9025-4f73-89c8-5ac42a3800ce","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":3,"h":4,"x":6,"y":4,"i":"cc909bb2-ec2e-43f7-9ec0-e1a42592f5dc","minW":2,"minH":3,"isResizable":true,"isDraggable":true}],"xs":[{"w":4,"h":4,"x":0,"y":0,"i":"451ce94d-feb0-4ef9-aa38-74bca3d27fef","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":4,"h":4,"x":0,"y":8,"i":"426c539c-d517-4d47-a84c-cc3a72c12e56","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":4,"h":4,"x":0,"y":12,"i":"9e98c802-9b7f-4fb6-b425-1ed11632f2e3","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":4,"h":4,"x":0,"y":16,"i":"6fccfb1d-d9bf-4cbd-86b9-e8ee260d6f2e","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":4,"h":4,"x":0,"y":20,"i":"8ae6d26b-9025-4f73-89c8-5ac42a3800ce","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":4,"h":4,"x":0,"y":24,"i":"cc909bb2-ec2e-43f7-9ec0-e1a42592f5dc","minW":2,"minH":3,"isResizable":true,"isDraggable":true}],"xxs":[{"w":2,"h":4,"x":0,"y":0,"i":"451ce94d-feb0-4ef9-aa38-74bca3d27fef","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":2,"h":4,"x":0,"y":8,"i":"426c539c-d517-4d47-a84c-cc3a72c12e56","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":2,"h":4,"x":0,"y":12,"i":"9e98c802-9b7f-4fb6-b425-1ed11632f2e3","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":2,"h":4,"x":0,"y":16,"i":"6fccfb1d-d9bf-4cbd-86b9-e8ee260d6f2e","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":2,"h":4,"x":0,"y":20,"i":"8ae6d26b-9025-4f73-89c8-5ac42a3800ce","minW":2,"minH":3,"isResizable":true,"isDraggable":true},{"w":2,"h":4,"x":0,"y":24,"i":"cc909bb2-ec2e-43f7-9ec0-e1a42592f5dc","minW":2,"minH":3,"isResizable":true,"isDraggable":true}]},"dname":"89943344-96dd-4beb-8a33-ea447be91574"}},{"type":"codeTool","data":{"codeData":{"value":"#### Draw Chart for ${selectCategory}","pinCode":false,"dname":"e078df2f-526a-4ec2-b1a1-3bd05af3ed4b","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    const { Space, Button } = Antd;\n    const [scrollSize, setScrollSize] = useState(2);\n  \tuseEffect(()=>{\n      setScrollSize(2)\n    },chartTypeArr)\n  \tif(!chartTypeArr || !chartTypeArr.length){\n      return <div>No Charts.</div> \n    }\n    let count = 0;\n    const typesByCategoryTmp = _.reduce(typesByCategory, (prev, curr, key) => {\n      if (count <  scrollSize) {\n        prev[key] =  scrollSize - count < curr.length ? curr.slice(0,  scrollSize - count) : curr;\n        count += prev[key].length;\n      }\n      return prev;\n    }, {})\n    return <Space key='f66c6d04-b48f-4630-b1a5-735d07c0a4ee' direction=\"vertical\">\n      {_.map(typesByCategoryTmp, (cTypes, category) => {\n        return <div key={category}>\n          <h3>{category.substring(category.indexOf(\"-\") + 1).trim().camelPeakToBlankSplit()}</h3>\n          <div className=\"d-flex align-content-center flex-wrap\">\n            {_.map(cTypes, (chartType, index) => {\n              const chartConfig = getChartConfig(chartType);\n              return <DrawChartComp key={index} className={\"\"} chartConfig={chartConfig} chartData={chartData} allDatas={selectInfoDatas} />\n            })}\n          </div>\n        </div>\n      })}\n      {!!chartTypeArr.length && chartTypeArr.length > scrollSize ? \n        <Button size='small' onClick={() => {\n              if (chartTypeArr && chartTypeArr.length < scrollSize) {\n                console.log(\"i am bottom!\");\n                return;\n              }\n              setScrollSize( scrollSize + 2 )\n          }} > More results  </Button> : <Button readonly> I am bottom!</Button>}\n    </Space>;\n})","pinCode":false,"dname":"3e4de453-af31-4a40-9ff4-1a2182326694","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"DrawChartObj = ({});","pinCode":false,"dname":"48e4342c-a48c-45ba-b419-5786064c19a4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"categoryMap = {\n  return _.reduce(categories,(p,category,index)=>{\n    p[category] = selectMainDatas(category)\n    return p;\n  },{}) \n}","pinCode":false,"dname":"952d3c28-d351-4a1c-be93-2d0ec0948243","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"categoryTableData = _.reduce(categoryMap,(p,v,k)=>{\n  p.push({Category:k, NodeNum:v.data.length});\n  return p;\n},[])","pinCode":false,"dname":"86f3f83c-5c04-4a25-9db0-5597aaec8624","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"categories = listMainCategories();","pinCode":false,"dname":"8117886b-14c9-48b5-9d7f-f1d364e78b06","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"selectCategoryInfo = selectMainDatas(selectCategory);","pinCode":false,"dname":"f1431dc3-299c-40a1-8945-086871fc9a68","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"selectInfoDatas = selectCategoryInfo.data","pinCode":false,"dname":"e05bbff9-f87f-43c7-8f60-c6fc4d47b0be","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"chartData = chartDataFunc(selectInfoDatas, selectCategoryInfo.properties)","pinCode":false,"dname":"b3957738-a63a-443f-986c-db322607fb72","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"chartTypeArr = {\n  const { properties, columns, data } = selectCategoryInfo;\n  if(selectCategoryInfo.properties.length < 2){\n  \treturn checkChartTypes(chartDataFunc(selectInfoDatas, selectCategoryInfo.properties), true)\n  }\n  let ret = [];\n  if(selectCategoryInfo.properties.length >= 3){\n    let sections = getCombinations(selectCategoryInfo.properties, 3);\n    _.reduce(sections, (p, section, index)=>{\n      let chartTypes = checkChartTypes(chartDataFunc(selectInfoDatas, section), true)\n      p.push(...chartTypes);\n      return p;\n    },ret)\n  }\n  let sections = getCombinations(selectCategoryInfo.properties, 2);\n  return _.filter(_.reduce(sections, (p, section, index)=>{\n  \tlet chartTypes = checkChartTypes(chartDataFunc(selectInfoDatas, section), true)\n    p.push(...chartTypes);\n    return p;\n  },ret),(a)=> !isTimelineType ( a.type));\n}","pinCode":false,"dname":"965c053c-5427-40a7-b977-1c6454a13475","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"typesByCategory = _.reduce(chartTypeArr, (prev, chartType, index) => {\n            let family = (ChartTypesDesc[chartType.type.replace(/^Transpose\\s/, \"\")] || {}).Family || \"Others\";\n            if (!prev[family]) {\n                prev[family] = [];\n            }\n            prev[family].push(chartType)\n            return prev;\n        }, {});","pinCode":false,"dname":"12cc65e9-f7e5-41c7-9774-edaafc9a2797","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"DEFAULT_WIDTH = 560","pinCode":false,"dname":"7a65b85e-48c0-4f36-aeb8-9b660f8c9ca5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"DEFAULT_HEIGHT = 376","pinCode":false,"dname":"0dc51306-181f-46b1-8b14-3887de61b3cd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"MAX_SIZE = 10000","pinCode":false,"dname":"d22a7efe-f5e4-4622-9f02-6cfcd2269e8a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"DrawChartComp = component(({ chartData, allDatas, chartConfig, className }) => {\n    const { Space } = Antd;\n  \tconst clazz = chartConfig.type.replace(/\\s/g, '-');\n  \tconst domRef = React.createRef();\n  \tconst warningRef = React.createRef();\n    const scale  = 0.7;\n    const [chart,setChart] = useState(undefined);\n    useEffect(()=>{\n      return ()=>{\n        debugger\n      }\n    })\n    useEffect(()=>{\n      if(chart){\n        chart.destroy();\n      }\n      const container = domRef.current;\n      if (container && chartConfig.constructorFunc) {\n        container.innerHTML = \"\";\n        let exOptionsTmp = _.assign(\n          _.cloneDeep(chartConfig.options),\n          {\n            width: DEFAULT_WIDTH * scale,\n            height: DEFAULT_HEIGHT * scale,\n            data: extractDatas(allDatas, _.reduce(_.values(_.pick(chartConfig.options, _.keys(FIELDS))), (p, curr) => {\n              (curr instanceof Array) ? p.push(...curr) : p.push(curr);\n              return p\n            }, []))\n          }\n        );\n        needSortByField(exOptionsTmp.data, chartConfig.type, chartConfig.options);\n        let exOptions = extOps(exOptionsTmp, exOptionsTmp);\n        exOptions.data.keysArr = exOptionsTmp.data.keysArr;\n        if (exOptions.data.length > MAX_SIZE) {\n          container.innerHTML = `<div class=\"d-flex align-items-center\" style=\"width: ${DEFAULT_WIDTH * scale}px; height: ${DEFAULT_HEIGHT * scale}px\"> \n                        Too many data(length more than ${MAX_SIZE}), can not display right now!\n                    </div>`\n          setChart(undefined);\n        } else {\n//           exOptions.theme = this.darkMode ? \"dark\" : \"default\";\n          let minus = chartData.length - exOptions.data.length;\n          if (exOptions.transposeFields && exOptions.transposeFields.length > 0) {\n            transposeData(chartConfig.type, exOptions);\n          }\n          /** */\n          let ct = new chartConfig.constructorFunc(container, exOptions);\n          ct.render();\n          setChart(ct)\n          if (chartConfig.type !== ChartTypes['Liquid']) {\n            warningRef.current && (warningRef.current.innerHTML = minus ? `${minus} rows ignore for having one or more empty cells` : \"\");\n          }\n        }\n      }else{\n        setChart(undefined)\n      }\n    },[domRef.current])\n    return <div className={`draw-chart ${className ? className : \"\"}`}\n            style={{\n                width: DEFAULT_WIDTH * scale,\n                // maxWidth: \"calc(100vw - 106px)\",\n                // overflowX: \"auto\",\n            }}>\n            <h6>{chartConfig.options.title.text}\n            </h6>\n            <div ref={domRef}\n                style={{\n                    width: DEFAULT_WIDTH * scale, height: DEFAULT_HEIGHT * scale, overflowY: \"auto\",\n                }}\n                className={`draw-chart-type ${clazz}`} ></div >\n            <div className=\"text-warning\" ref={warningRef}></div>\n        </div >;\n})","pinCode":false,"dname":"82ee97bd-c474-412a-8968-4336e5ee8a0b","codeMode":"jsx","pos":1549,"loc":{"line":72,"column":7},"raisedAt":1550}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"249e31c8-d6d2-4410-8e45-3ff3f91f07dc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { chartDataFunc, checkChartTypes, isTimelineType, extractDatas, ChartTypes   } from \"1_react/util/chartUtil\"","pinCode":false,"dname":"b7530da1-0826-4c00-995f-c39a11a2ffcb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { getDefaultOptionsByType, FIELDS, needSortByField, extOps, getChartConfig, ChartTypesDesc } from '1_react/util/chartConfigUtils'","pinCode":false,"dname":"cf8f25b7-0eba-4f96-a5d9-ef7cb41da37f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { getCombinations } from '1_react/util/mathUtils'","pinCode":false,"dname":"56cc9bb2-28b8-4c75-8686-b59496e405f1","codeMode":"javascript2"}}}],"version":"2.19.1"}
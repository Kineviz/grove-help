{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"_BLANKS = [undefined, '', null];","pinCode":false,"dname":"d416b894-d37b-4e91-8df1-97a716436f70","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"_BLANKS_STRINGS = [\"undefined\", '', \"null\"]","pinCode":false,"dname":"d3ddc810-b49b-4a68-9fcc-cdc7718f361f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"nanOrBlank = function (v) {\n  return ~_BLANKS.indexOf(v) || (v).toString() === 'NaN';\n}","pinCode":false,"dname":"43531124-9508-46fd-b09b-5b09aa3e85c7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"stringifyNanOrBlank = function (v) {\n  if (~_BLANKS.indexOf(v)) {\n    return _BLANKS_STRINGS[_BLANKS.indexOf(v)];\n  } else if ((v).toString() === 'NaN') {\n    return 'NaN'\n  } else {\n    return v;\n  }\n}","pinCode":false,"dname":"ce96c8d3-cdb6-4a13-ac43-3d3eb3028b08","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  const { Button, Space } = Antd;\n  const [step_number, setStep_number] = useState(1);\n  const update_step_number = (d) => {\n    alert(ref && ref.current);\n  };\n  const ref = useRef(null);\n  useEffect(() => {\n    showObject(penguins, (ref && ref.current) || undefined);\n    return function cleanup() {\n      console.log(\"cleanup\");\n    };\n  }, []);\n  useSetter({ step_number });\n  return jsx`<div ...${{ref}} key='08e3b2ae-e073-4374-b781-ae60fa4281ce'></div> `;\n})","pinCode":false,"dname":"4c5c6334-0c64-449e-857a-a486cfb0fc1a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"showObject = {\n  const MAX_DISPLAY = 20;\n  const showObject = function (\n    object = {},\n    parent = document.body,\n    startIndex = 0,\n    show = false\n  ) {\n    const keyValueTemplate = document.getElementById(\"keyValue\");\n    if (!object || typeof object !== \"object\") {\n      // Use a template since the structure is somewhat complex.\n      const element = document.importNode(keyValueTemplate.content, true);\n      element.querySelector(\".key\").textContent = \"Not Object!\";\n      parent.appendChild(element);\n      return;\n    }\n    const showFunc = (value, key) => {\n      if (value && typeof value === \"object\") {\n        // Since this structure is really simple, just create the elements.\n        const element = document.createElement(\"details\");\n        const summary = element.appendChild(document.createElement(\"summary\"));\n        summary.textContent = key;\n        if (show) {\n          element.setAttribute(\"open\", \"true\");\n          showObject(value, element);\n        } else {\n          element.addEventListener(\n            \"toggle\",\n            () => {\n              showObject(value, element);\n            },\n            { once: true }\n          );\n        }\n        parent.appendChild(element);\n      } else {\n        // Use a template since the structure is somewhat complex.\n        const element = document.importNode(keyValueTemplate.content, true);\n        element.querySelector(\".key\").textContent = key;\n        let view;\n        switch (typeof value) {\n          case \"string\":\n            view = `<span class=\"text-dark\">\"${value}\"</span>`;\n            break;\n          case \"number\":\n            view = `<span class=\"text-primary\">${value}</span>`;\n            break;\n          case \"boolean\":\n            view = `<span class=\"text-success\">${value}</span>`;\n            break;\n          case \"undefined\":\n            view = `<span class=\"text-danger\">${value}</span>`;\n            break;\n          default:\n            view = `<span class=\"text-muted\">${value}</span>`;\n            break;\n        }\n        element.querySelector(\".value\").innerHTML = view;\n        // element.querySelector('.type').textContent = typeof value;\n        parent.appendChild(element);\n      }\n    };\n    if (object instanceof Array) {\n      if (startIndex + MAX_DISPLAY < object.length) {\n        _.each(\n          object.slice(startIndex, startIndex + MAX_DISPLAY),\n          (value, index) => {\n            showFunc(value, index + startIndex);\n          }\n        );\n        const element = document.createElement(\"details\");\n        const summary = element.appendChild(document.createElement(\"summary\"));\n        summary.textContent = \"... more\";\n        element.addEventListener(\n          \"toggle\",\n          (e) => {\n            parent.removeChild(e.target);\n            showObject(object, parent, startIndex + MAX_DISPLAY);\n          },\n          { once: true }\n        );\n        parent.appendChild(element);\n      } else {\n        _.each(object.slice(startIndex), (value, index) => {\n          showFunc(value, index + startIndex);\n        });\n      }\n    } else {\n      _.each(object, (v, k) => {\n        showFunc(v, k);\n      });\n    }\n  };\n  return showObject\n}","pinCode":false,"dname":"f8af1499-6fa4-4550-84c5-e1c6faa45e61","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment, useRef } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"293db09f-59ae-470f-8b0a-9634f13567d0","codeMode":"javascript2"}}}],"version":"2.19.1"}
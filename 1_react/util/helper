{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"_BLANKS = [undefined, '', null];","pinCode":false,"dname":"d416b894-d37b-4e91-8df1-97a716436f70","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"_BLANKS_STRINGS = [\"undefined\", '', \"null\"]","pinCode":false,"dname":"d3ddc810-b49b-4a68-9fcc-cdc7718f361f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"nanOrBlank = function (v) {\n  return ~_BLANKS.indexOf(v) || (v).toString() === 'NaN';\n}","pinCode":false,"dname":"43531124-9508-46fd-b09b-5b09aa3e85c7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"stringifyNanOrBlank = function (v) {\n  if (~_BLANKS.indexOf(v)) {\n    return _BLANKS_STRINGS[_BLANKS.indexOf(v)];\n  } else if ((v).toString() === 'NaN') {\n    return 'NaN'\n  } else {\n    return v;\n  }\n}","pinCode":false,"dname":"ce96c8d3-cdb6-4a13-ac43-3d3eb3028b08","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  const { Button, Space } = Antd;\n  const [step_number, setStep_number] = useState(1);\n  const update_step_number = (d) => {\n    alert(ref && ref.current);\n  };\n  const ref = useRef(null);\n  useEffect(() => {\n    showObject(penguins, (ref && ref.current) || undefined);\n    return function cleanup() {\n      console.log(\"cleanup\");\n    };\n  }, []);\n  useSetter({ step_number });\n  return jsx`<div ...${{ref}} key='08e3b2ae-e073-4374-b781-ae60fa4281ce'></div> `;\n})","pinCode":false,"dname":"4c5c6334-0c64-449e-857a-a486cfb0fc1a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"RenderObject = component(({ obj }) => {\n  const ref = useRef(null);\n  useEffect(() => {\n    showObject(obj || penguins, (ref && ref.current) || undefined, 0, false);\n    return function cleanup() {};\n  }, []);\n  return jsx`<div ...${{ ref }}></div> `;\n})","pinCode":false,"dname":"efd0db51-8825-42c5-bd5c-2d9719a964c4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    const { Button } = Antd;\n    const [step_number, setStep_number] = useState(1);\n    const update_step_number = (d) => setStep_number(step_number+1);\n    useSetter({ step_number });\n    return jsx`<${RenderObject} key='f558d091-eef6-4c18-8a2e-99383c5ed9e7' onClick=${update_step_number}  >Click Me<//> `;\n})","pinCode":false,"dname":"f2301a26-26bd-4773-bbaa-9ed8e7395587","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"showObject = {\n  const MAX_DISPLAY = 20;\n  const showObject = function (\n    object = {},\n    parent = document.body,\n    startIndex = 0,\n    show = false\n  ) {\n    const keyValueTemplate = document.getElementById(\"keyValue\");\n    if (!object || typeof object !== \"object\") {\n      // Use a template since the structure is somewhat complex.\n      const element = document.importNode(keyValueTemplate.content, true);\n      element.querySelector(\".key\").textContent = \"Not Object!\";\n      parent.appendChild(element);\n      return;\n    }\n    const showFunc = (value, key) => {\n      if (value && typeof value === \"object\") {\n        // Since this structure is really simple, just create the elements.\n        const element = document.createElement(\"details\");\n        const summary = element.appendChild(document.createElement(\"summary\"));\n        summary.textContent = key;\n        if (show) {\n          element.setAttribute(\"open\", \"true\");\n          showObject(value, element);\n        } else {\n          element.addEventListener(\n            \"toggle\",\n            () => {\n              showObject(value, element);\n            },\n            { once: true }\n          );\n        }\n        parent.appendChild(element);\n      } else {\n        // Use a template since the structure is somewhat complex.\n        const element = document.importNode(keyValueTemplate.content, true);\n        element.querySelector(\".key\").textContent = key;\n        let view;\n        switch (typeof value) {\n          case \"string\":\n            view = `<span class=\"text-dark\">\"${value}\"</span>`;\n            break;\n          case \"number\":\n            view = `<span class=\"text-primary\">${value}</span>`;\n            break;\n          case \"boolean\":\n            view = `<span class=\"text-success\">${value}</span>`;\n            break;\n          case \"undefined\":\n            view = `<span class=\"text-danger\">${value}</span>`;\n            break;\n          default:\n            view = `<span class=\"text-muted\">${value}</span>`;\n            break;\n        }\n        element.querySelector(\".value\").innerHTML = view;\n        // element.querySelector('.type').textContent = typeof value;\n        parent.appendChild(element);\n      }\n    };\n    if (object instanceof Array) {\n      if (startIndex + MAX_DISPLAY < object.length) {\n        _.each(\n          object.slice(startIndex, startIndex + MAX_DISPLAY),\n          (value, index) => {\n            showFunc(value, index + startIndex);\n          }\n        );\n        const element = document.createElement(\"details\");\n        const summary = element.appendChild(document.createElement(\"summary\"));\n        summary.textContent = \"... more\";\n        element.addEventListener(\n          \"toggle\",\n          (e) => {\n            parent.removeChild(e.target);\n            showObject(object, parent, startIndex + MAX_DISPLAY);\n          },\n          { once: true }\n        );\n        parent.appendChild(element);\n      } else {\n        _.each(object.slice(startIndex), (value, index) => {\n          showFunc(value, index + startIndex);\n        });\n      }\n    } else {\n      _.each(object, (v, k) => {\n        showFunc(v, k);\n      });\n    }\n  };\n  return showObject\n}","pinCode":false,"dname":"f8af1499-6fa4-4550-84c5-e1c6faa45e61","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"CodeMode = ({\n  javascript2: \"javascript2\",\n  markdown: \"markdown\",\n  htmlmixed: \"htmlmixed\",\n  javascript: \"javascript\",\n  sql: \"sql\",\n  tex: \"tex\",\n  jsx: \"jsx\",\n  python: \"python\",\n})","pinCode":false,"dname":"21b66be4-6a77-4a7e-9aa2-a205f2b86f8c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"RenderType = ({\n  Code: \"Code\",\n  Markdown: \"Markdown\",\n  Python: \"Python\",\n  IFrame: \"IFrame\",\n  RawJSON: \"RawJSON\",\n  Table: \"Table\",\n  Chart: \"Chart\",\n  SingleValue: \"SingleValue\",\n  ParameterSelect: \"ParameterSelect\",\n  Graph: \"Graph\",\n  Map: \"Map\",\n  GaugeChart: \"GaugeChart\",\n  SunburstChart: \"SunburstChart\",\n  CirclePacking: \"CirclePacking\",\n  Treemap: \"Treemap\",\n  SankeyChart: \"SankeyChart\",\n  ChoroplethMap: \"ChoroplethMap\",\n  AreaMap: \"AreaMap\",\n  Radar: \"Radar\",\n})","pinCode":false,"dname":"659b0841-dc1c-4ec2-9b49-2ba147a41baf","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"function getCodeModePlaceholder(codeMode) {\n  if (codeMode) {\n    return `Type ${codeMode.firstUpperCase()}, then Shift-Enter.`;\n  } else {\n    return \"Type Text, then Shift-Enter.\";\n  }\n}","pinCode":true,"dname":"e7626bb2-d0b8-4649-a9b6-c9a48dbf34f1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"RawJSONComp = component(({ result, renderType, onChange, onBlur, run, className, onFocus, onDropDown })=> {\n  const { ChevronDownIcon } = AntdIcons;\n    let value;\n    let options;\n    if (renderType === RenderType.IFrame) {\n        value = result;\n        options = { mode: CodeMode.htmlmixed, placeholder: \"Type Http Addrress.\" }\n    } else if (renderType === CodeMode.sql) {\n        value = result;\n        options = { mode: CodeMode.sql, placeholder: getCodeModePlaceholder(CodeMode.sql) }\n    } else if (renderType === RenderType.Code) {\n        value = result;\n        options = { mode: CodeMode.javascript2, placeholder: getCodeModePlaceholder(CodeMode.javascript2) }\n    } else if (renderType === RenderType.Markdown) {\n        value = result;\n        options = { mode: CodeMode.markdown, placeholder: getCodeModePlaceholder(CodeMode.markdown) }\n    } else if (renderType === RenderType.Python) {\n        value = result;\n        options = { mode: CodeMode.python, placeholder: getCodeModePlaceholder(CodeMode.python) }\n    } else if (renderType === RenderType.RawJSON) {\n        value = result;\n        options = { mode: { name: CodeMode.javascript, json: true }, placeholder: \"Type JSON.\" };\n    } else {\n        return jsx`<div>not support {renderType} now.</div>`\n    }\n    const [cmvalue, setCmvalue] = useState(value);\n    useEffect(() => {\n        setCmvalue(value);\n    }, [value]);\n    let ccm;\n    return jsx`<div className='code-edit-wrapper'>\n        <div className=\"code-edit-wrapper-icons d-flex align-items-center\">\n            ${!!onDropDown && jsx`<${ChevronDownIcon} className=\"text-primary\" onClick=${onDropDown} />`}\n        </div>\n        <${Controlled} className=${`code-edit-cm ${className || \"\"}`}\n            editorDidMount=${(cm, value, cb) => {\n                ccm = cm;\n            }}\n            onFocus=${(cm) => {\n                onFocus && onFocus(cm);\n            }}\n            value=${cmvalue}\n            onBeforeChange=${onChange || ((cm, data, value) => {\n                setCmvalue(value);\n            })}\n            onKeyUp=${(cm, e) => {\n                keyupHint(window.currentEditor, cm, e);\n            }}\n            onCursorActivity=${(cm) => { cursorActivityFunc.call(cm, cm) }}\n            onBlur=${(cm, e) => { onBlur && onBlur(cm); }}\n            options=${_.assign({\n                theme: window.editor.getSettings().getTheme(),\n                lineNumbers: true,\n                lineWrapping: true,\n                // viewportMargin: Infinity,\n                // styleSelectedText: true,\n                // matchBrackets: false,\n                // styleActiveLine: false,\n                // nonEmpty: false,\n                foldGutter: true,\n                // placeholder: \"\",\n                gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n                readOnly: false,\n                extraKeys: assembling([...COMMON_KEYS,\n                {\n                    key: \"Esc\", value: (cm) => {\n                        if (cm.getOption(\"fullScreen\")) cm.setOption(\"fullScreen\", false);\n                    }\n                }, {\n                    key: linkKeys(cell_shortcuts_keys[\"Force Run Current Cell\"]), value: (cm) => {\n                        run && run();\n                    }\n                }, {\n                    key: linkKeys(cell_shortcuts_keys[\"Run Current Cell\"]), value: (cm) => {\n                        run && run();\n                    }\n                }, {\n                    key: linkKeys(code_editor_keys[\"Show Editor LineNumbers\"]), value: (cm) => {\n                        cm.setOption(\"lineNumbers\", !cm.getOption(\"lineNumbers\"));\n                    }\n                }, {\n                    key: linkKeys(code_editor_keys[\"Fold Code\"]), value: function (cm) { cm.foldCode(cm.getCursor()); },\n                }])\n            }, options)}\n        />\n    </div>`\n})","pinCode":true,"dname":"048d8f45-71de-433e-964f-7210fca74e36","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"cell_shortcuts_keys[\"Force Run Current Cell\"]","pinCode":true,"dname":"c2d00f9c-998c-400a-a710-47137b881e8c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":" COMMON_KEYS = [{\n  key: linkKeys(code_editor_keys[\"Fold Code\"]),\n  value: function (cm) {\n    cm.foldCode(cm.getCursor());\n  },\n}, {\n  key: linkKeys(code_editor_keys[\"Comment Lines\"]),\n  value: \"toggleComment\",\n}, {\n  key: linkKeys(code_editor_keys[\"Auto-complete\"]),\n  value: \"autocomplete\",\n}, {\n  key: linkKeys(code_editor_keys[\"Full Screen\"]),\n  value: (cm) => {\n    cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n  },\n}, {\n  key: linkKeys(code_editor_keys[\"Auto-indent\"]),\n  value: \"shiftTabAndUnindentMarkdownList\",\n}, {\n  key: linkKeys(code_editor_keys['Find Current']),\n  value: \"findPersistent\"\n},\n]","pinCode":true,"dname":"4c06263f-963c-49fd-b20a-1d7357d5131f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"assembling = function (objs) {\n  return _.reduce(\n    objs,\n    (prev, curr) => {\n      const { key, value } = curr;\n      prev[key] = value;\n      return prev;\n    },\n    {}\n  );\n}","pinCode":false,"dname":"a43f5867-0633-4f45-a0db-879f53912d98","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"cursorActivityFunc = function (cm) {\n  if (!this.ranges) {\n    this.ranges = [];\n  }\n  for (let i = 0; i < this.ranges.length; i++) {\n    this.ranges[i].clear();\n  }\n  this.ranges.splice(0, this.ranges.length);\n  if (!cm.somethingSelected()) {\n    let A1 = cm.getCursor().line;\n    let A2 = cm.getCursor().ch;\n    let tmp;\n    let arr = /([<\\(\\[\\{])|([\\}\\]\\)>])|(\\W)/g.exec(\n      cm.getRange({ line: A1, ch: A2 }, { line: A1, ch: A2 + 1 })\n    );\n    if (\n      (arr === null || !(arr[1] || arr[2])) &&\n      A2 > 0 &&\n      (tmp = /([<\\(\\[\\{])|([\\}\\]\\)>])|(\\W)/g.exec(\n        cm.getRange({ line: A1, ch: A2 - 1 }, { line: A1, ch: A2 })\n      )) &&\n      (tmp[1] || tmp[2])\n    ) {\n      A2 = A2 - 1;\n      arr = tmp;\n    }\n    if (arr !== null) {\n      if (arr[1]) {\n        let obj = { \"<\": \">\", \"(\": \")\", \"[\": \"]\", \"{\": \"}\" };\n        let reg = new RegExp(`(\\\\${arr[1]})|(\\\\${obj[arr[1]]})`);\n        let cursor = cm.getSearchCursor(reg, { line: A1, ch: A2 + 1 });\n        let cache = 0;\n        while (cursor.findNext()) {\n          let k = cm.getRange(cursor.from(), cursor.to());\n          if (k === arr[1]) {\n            cache++;\n          } else if (cache === 0) {\n            this.ranges[this.ranges.length] = cm.markText(\n              cursor.from(),\n              cursor.to(),\n              { className: \"highlight\", addToHistory: false }\n            );\n            break;\n          } else {\n            cache--;\n          }\n        }\n      } else if (arr[2]) {\n        let obj = { \">\": \"<\", \")\": \"(\", \"]\": \"[\", \"}\": \"{\" };\n        let reg = new RegExp(`(\\\\${arr[2]})|(\\\\${obj[arr[2]]})`);\n        let cursor = cm.getSearchCursor(reg);\n        let caches = [];\n        while (cursor.findNext()) {\n          if (cursor.from().line >= A1 && cursor.from().ch >= A2) {\n            break;\n          }\n          caches.push({ from: cursor.from(), to: cursor.to() });\n        }\n        let cache = 0;\n        for (let i = caches.length - 1; i >= 0; i--) {\n          let cursor = caches[i];\n          let k = cm.getRange(cursor.from, cursor.to);\n          if (k === arr[2]) {\n            cache++;\n          } else if (cache === 0) {\n            this.ranges[this.ranges.length] = cm.markText(\n              cursor.from,\n              cursor.to,\n              { className: \"highlight\", addToHistory: false }\n            );\n            break;\n          } else {\n            cache--;\n          }\n        }\n      } else if (arr[3]) {\n        return;\n      }\n      this.ranges[this.ranges.length] = cm.markText(\n        { line: A1, ch: A2 },\n        { line: A1, ch: A2 + 1 },\n        { className: \"highlight\", addToHistory: false }\n      );\n      return;\n    }\n  }\n  /**\n     * \n     * @param {CodeMirror.Editor} cm \n     */  let func = function (cm) {\n    let A1 = cm.getCursor().line;\n    let A2 = cm.getCursor().ch;\n    let wordRange = cm.findWordAt({ line: A1, ch: A2 });\n    let B1 = wordRange.anchor.ch;\n    let B2 = wordRange.head.ch;\n    let text = cm.getRange({ line: A1, ch: B1 }, { line: A1, ch: B2 });\n    return text.trim();\n  };\n  let text = cm.getSelection() || func(cm);\n  if (!text) {\n    return;\n  }\n  let cursor = cm.getSearchCursor(text);\n  let isLetter = /^\\w+$/g.test(text);\n  while (cursor.findNext()) {\n    let className = \"highlight\";\n    if (isLetter) {\n      let wordRange = cm.findWordAt(cursor.from());\n      if (text === cm.getRange(wordRange.anchor, wordRange.head)) {\n        className = \"highlight-success\";\n      }\n    }\n    this.ranges[this.ranges.length] = cm.markText(cursor.from(), cursor.to(), {\n      className: className,\n      addToHistory: false,\n    });\n  }\n}","pinCode":false,"dname":"cf5fc4df-1e79-4835-b3c1-4aa01fd4ac55","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"code_editor_keys = keyMap.code_editor_keys.keys","pinCode":false,"dname":"c4b005e3-ad0e-47b6-a056-b40bd5acdce7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"cell_shortcuts_keys = keyMap.cell_shortcuts_keys.keys","pinCode":false,"dname":"100103a4-f541-4a9e-b294-5220fed23274","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment, useRef } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"293db09f-59ae-470f-8b0a-9634f13567d0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {keyMap, linkKeys} from \"https://grove-help.graphxr.com/keyboard-shortcuts/shortcutKey\"","pinCode":false,"dname":"d70761f6-0091-4f4b-b9d3-98094d0db9ee","codeMode":"javascript2"}}}],"version":"2.19.1"}
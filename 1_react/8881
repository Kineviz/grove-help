{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"form_2","pinCode":false,"dname":"90b8c60b-f68b-4067-b962-ddf571a1eb0c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof form_2 = render(({ useSetter }) => {\n    const { Button, Checkbox, Form, Input } = Antd;\n    const [ remember, setRemember ] = useState(true);\n    const [ username, setUsername ] = useState(\"\");\n    const [ password, setPassword ] = useState(\"\");\n    const onFinish = (values) => {\n      console.log('Success:', values);\n    };\n    const onFinishFailed = (errorInfo) => {\n      console.log('Failed:', errorInfo);\n    };\n    useSetter({remember,password,username});\n    return jsx`<${Form} key='5f4f0d98-46fc-4b5a-a214-2abc1b669d9e'\n        name=\"basic\"\n        labelCol=${{\n          span: 8,\n        }}\n        wrapperCol=${{\n          span: 16,\n        }}\n        initialValues=${{\n            remember: remember,\n            username: username,\n            password: password,\n        }}\n        onFinish=${onFinish}\n        onFinishFailed=${onFinishFailed}\n        autoComplete=\"off\"\n      >\n        <${Form.Item}\n          label=\"Username\"\n          name=\"username\"\n          rules=${[\n            {\n              required: true,\n              message: 'Please input your username!',\n            },\n          ]}\n        >\n          <${Input} onChange=${(e)=>{  setUsername(e.target.value); }} />\n        <//>\n  \n        <${Form.Item}\n          label=\"Password\"\n          name=\"password\"\n          rules=${[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n        >\n          <${Input.Password} onChange=${(e)=>{  setPassword(e.target.value) }} />\n        <//>\n  \n        <${Form.Item}\n          name=\"remember\"\n          valuePropName=\"checked\"\n          wrapperCol=${{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <${Checkbox} onChange=${(e)=>{ setRemember(e.target.checked) }}>Remember me<//>\n        <//>\n  \n        <${Form.Item}\n          wrapperCol=${{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <${Button} type=\"primary\" htmlType=\"submit\">\n            Submit\n          <//>\n        <//>\n      <//>`\n  })","pinCode":false,"dname":"84ecdd8b-7b4c-453d-8f90-b92b9203383d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof autoComplete_1 = render(({ useSetter }) => {\n    const { AutoComplete } = Antd;\n    const mockVal = (str, repeat = 1) => ({\n      value: str.repeat(repeat),\n    });\n    const [value, setValue] = useState('');\n    const [options, setOptions] = useState([]);\n    const onSearch = (searchText) => {\n      setOptions(\n        !searchText ? [] : [mockVal(searchText), mockVal(searchText, 2), mockVal(searchText, 3)],\n      );\n    };\n    const onSelect = (data) => {\n      console.log('onSelect', data);\n    };\n    const onChange = (data) => {\n      setValue(data);\n    };\n    useSetter({value});\n    return jsx`<${Fragment} key='4b8e6339-083c-4b4a-bd3f-5f3ece33631d'>\n          <${AutoComplete}\n            options=${options}\n            style=${{\n              width: 200,\n            }}\n            onSelect=${onSelect}\n            onSearch=${onSearch}\n            placeholder=\"input here\"\n          />\n          <br />\n          <br />\n          <${AutoComplete}\n            value=${value}\n            options=${options}\n            style=${{\n              width: 200,\n            }}\n            onSelect=${onSelect}\n            onSearch=${onSearch}\n            onChange=${onChange}\n            placeholder=\"control mode\"\n          />\n        <//>`\n    })","pinCode":false,"dname":"a4e872ee-452d-4e2f-b2b2-d6bc55dc9106","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof dropdown_1 = render(({ useSetter }) => {\n    const { DownOutlined, SmileOutlined } = AntdIcons;\n    const { Dropdown, Menu, Space } = Antd;\n    const Item = Menu.Item;\n    const menu =  jsx`<${Menu}>\n        <${Item}>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\">\n            1st menu item\n          </a>\n        <//>\n        <${Item} disabled icon=${jsx`<${SmileOutlined}><//>`}>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\">\n            2nd menu item (disabled)\n          </a>\n        <//>\n        <${Item} disabled>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.luohanacademy.com\">\n            3rd menu item (disabled)\n          </a>\n        <//>\n        <${Item} danger>a danger item<//>\n      <//>`;\n      return jsx`<${Dropdown} key='d80287aa-5a5f-46a7-a837-4c4ef02c16ca' overlay=${menu}>\n        <a onClick=${(e) => e.preventDefault()}>\n          <${Space}>\n            Hover me\n            <${DownOutlined}><//>\n          <//>\n        </a>\n      <//>`\n    });","pinCode":false,"dname":"f71b4e41-bdfd-48f0-a07e-ad6a7ac6e1fe","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof pagination_1 = render(({ useSetter }) => {\n    const { Pagination } = Antd;\n    const onShowSizeChange = (current, pageSize) => {\n      console.log(current, pageSize);\n    };\n    return  jsx`<${Fragment} key='6d7f4461-7ec1-4f49-b008-73413b85c100'>\n        <${Pagination}\n          showSizeChanger\n          onShowSizeChange=${onShowSizeChange}\n          defaultCurrent=${3}\n          total=${500}\n        />\n        <br />\n        <${Pagination}\n          showSizeChanger\n          onShowSizeChange=${onShowSizeChange}\n          defaultCurrent=${3}\n          total=${500}\n          disabled\n        />\n      <//>`\n    })","pinCode":false,"dname":"1c68026f-e29f-4dbc-a375-ebc064267c16","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof form_1 = render(({ useSetter }) => {\n    const { Button, Checkbox, Form, Input } = Antd;\n    const onFinish = (values) => {\n      console.log('Success:', values);\n    };\n    const onFinishFailed = (errorInfo) => {\n      console.log('Failed:', errorInfo);\n    };\n    return jsx`<${Form} key='ef46bfcc-0c42-4458-a302-1da9af39c2bc'\n        name=\"basic\"\n        labelCol=${{\n          span: 8,\n        }}\n        wrapperCol=${{\n          span: 16,\n        }}\n        initialValues=${{\n          remember: true,\n        }}\n        onFinish=${onFinish}\n        onFinishFailed=${onFinishFailed}\n        autoComplete=\"off\"\n      >\n        <${Form.Item}\n          label=\"Username\"\n          name=\"username\"\n          rules=${[\n            {\n              required: true,\n              message: 'Please input your username!',\n            },\n          ]}\n        >\n          <${Input} />\n        <//>\n  \n        <${Form.Item}\n          label=\"Password\"\n          name=\"password\"\n          rules=${[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n        >\n          <${Input.Password} />\n        <//>\n  \n        <${Form.Item}\n          name=\"remember\"\n          valuePropName=\"checked\"\n          wrapperCol=${{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <${Checkbox}>Remember me<//>\n        <//>\n  \n        <${Form.Item}\n          wrapperCol=${{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <${Button} type=\"primary\" htmlType=\"submit\">\n            Submit\n          <//>\n        <//>\n      <//>`\n  })","pinCode":false,"dname":"746c5794-4923-4481-ae90-284b5c9359f9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"autoComplete","pinCode":false,"dname":"a3e88fcf-1b96-4042-a80c-8f6db30c3bdb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof autoComplete = render(({ useSetter }) => {\n    const { AutoComplete } = Antd;\n    const mockVal = (str, repeat = 1) => ({\n      value: str.repeat(repeat),\n    });\n    const [value, setValue] = useState('');\n    const [options, setOptions] = useState([]);\n    const onSearch = (searchText) => {\n      setOptions(\n        !searchText ? [] : [mockVal(searchText), mockVal(searchText, 2), mockVal(searchText, 3)],\n      );\n    };\n    const onSelect = (data) => {\n      console.log('onSelect', data);\n    };\n    const onChange = (data) => {\n      setValue(data);\n    };\n   useSetter({value})\n    return jsx`<${Fragment} key='69c34e19-3bf7-4bcc-b0ff-4f1f32ce7907'>\n          <${AutoComplete}\n            options=${options}\n            style=${{\n              width: 200,\n            }}\n            onSelect=${onSelect}\n            onSearch=${onSearch}\n            placeholder=\"input here\"\n          />\n          <br />\n          <br />\n          <${AutoComplete}\n            value=${value}\n            options=${options}\n            style=${{\n              width: 200,\n            }}\n            onSelect=${onSelect}\n            onSearch=${onSearch}\n            onChange=${onChange}\n            placeholder=\"control mode\"\n          />\n        <//>`\n    })","pinCode":false,"dname":"d23e903c-03ef-4f51-bb39-1458f56f3537","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof steps_1 = render(({ useSetter }) => {\n    const [step_number, setStep_number] = useState(1);\n    const Steps = Antd.Steps;\n    const Step = Steps.Step;\n    const update_step_number = (d) => (setStep_number(d));\n    useSetter({ step_number });\n    return jsx`<div key='8db2ffb7-4a3c-4428-ac05-bb1076589995'>\n      <${Steps} current='${step_number}' onChange=${update_step_number}>\n      <${Step} title=\"Finished\" description=\"This is a description.\" />\n      <${Step} title=\"In Progress\" subTitle=\"Left 00:00:08\" description=\"This is a description.\" />\n      <${Step} title=\"Waiting\" description=\"This is a description.\" />\n     <//>\n    <//>`;\n  })","pinCode":false,"dname":"78c55618-cd5e-42b0-b5d8-90a342c10845","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof menu = render(({ useSetter }) => {\n    const { Menu } = Antd;\n    const { MailOutlined, AppstoreOutlined, SettingOutlined } = AntdIcons;\n    return  jsx`<${Menu} key='0685fa07-be89-4c87-8cdf-1e5b09f670bf' mode=\"horizontal\" defaultSelectedKeys={['mail']}>\n        <${Menu.Item} key=\"mail\" icon=${jsx`<${MailOutlined} />`}>\n          Navigation One\n        <//>\n        <${Menu.SubMenu} key=\"SubMenu\" title=\"Navigation Two - Submenu\" icon=${jsx`<${SettingOutlined} />`}>\n          <${Menu.Item} key=\"two\" icon=${jsx`<${AppstoreOutlined} />`}>\n            Navigation Two\n          <//>\n          <${Menu.Item} key=\"three\" icon=${jsx`<${AppstoreOutlined} />`}>\n            Navigation Three\n          <//>\n          <${Menu.ItemGroup} title=\"Item Group\">\n            <${Menu.Item} key=\"four\" icon=${jsx`<${AppstoreOutlined} />`}>\n              Navigation Four\n            <//>\n            <${Menu.Item} key=\"five\" icon=${jsx`<${AppstoreOutlined} />`}>\n              Navigation Five\n            <//>\n          <//>\n        <//>\n      <//>`;\n    });","pinCode":false,"dname":"6ddbd4d2-dab2-41de-957b-2d68782662ba","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"button_2","pinCode":false,"dname":"18c23e6a-6543-4762-8d87-dfab3ebc68e1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof button_2 = render(({ useSetter }) => {\n    const [step_number, setStep_number] = useState(1);\n    const Button = Antd.Button;\n    const update_step_number = (d) => setStep_number(step_number+1);\n    useSetter({ step_number });\n    return jsx`<${Button} key='789cdf07-032c-442d-acec-0997bc2a8d27' onClick=${update_step_number}  >Click Me<//> `;\n})","pinCode":false,"dname":"13dcc18a-5a67-43ab-8fd9-b34376a66016","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof button_1 = render(({ useSetter }) => {\n    const [step_number, setStep_number] = useState(1);\n    const Button = Antd.Button;\n    const update_step_number = (d) => setStep_number(step_number+1);\n    useSetter({ step_number });\n    return jsx`<${Button} key='8b7d70e1-d07e-4c61-b08e-1564ccbaf36d' onClick=${update_step_number}  >Click Me<//> `;\n})","pinCode":false,"dname":"7f953f57-edbf-4d8a-9ffd-141c6e08cc29","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"form","pinCode":false,"dname":"4282f820-2ec4-4d3a-a50a-4cbaf55a69bb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof form = render(({ useSetter }) => {\n    const { Button, Checkbox, Form, Input } = Antd;\n    const [ remember, setRemember ] = useState(true);\n    const [ username, setUsername ] = useState(\"\");\n    const [ password, setPassword ] = useState(\"\");\n    const onFinish = (values) => {\n      console.log('Success:', values);\n    };\n    const onFinishFailed = (errorInfo) => {\n      console.log('Failed:', errorInfo);\n    };\n    useSetter({remember,password,username});\n    return jsx`<${Form} key='39b7f344-932a-49ce-88ff-1e6e5b3554ed'\n        name=\"basic\"\n        labelCol=${{\n          span: 8,\n        }}\n        wrapperCol=${{\n          span: 16,\n        }}\n        initialValues=${{\n          remember: remember,\n          username: username,\n          password: password,\n        }}\n        onFinish=${onFinish}\n        onFinishFailed=${onFinishFailed}\n        autoComplete=\"off\"\n      >\n        <${Form.Item}\n          label=\"Username\"\n          name=\"username\"\n          rules=${[\n            {\n              required: true,\n              message: 'Please input your username!',\n            },\n          ]}\n        >\n          <${Input} onChange=${(e)=>{  setUsername(e.target.value) }} />\n        <//>\n  \n        <${Form.Item}\n          label=\"Password\"\n          name=\"password\"\n          rules=${[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n        >\n          <${Input.Password}  onChange=${(e)=>{  setPassword(e.target.value) }} />\n        <//>\n  \n        <${Form.Item}\n          name=\"remember\"\n          valuePropName=\"checked\"\n          wrapperCol=${{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <${Checkbox}  onChange=${(e)=>{ setRemember(e.target.checked) }}>Remember me<//>\n        <//>\n  \n        <${Form.Item}\n          wrapperCol=${{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <${Button} type=\"primary\" htmlType=\"submit\">\n            Submit\n          <//>\n        <//>\n      <//>`\n  })","pinCode":false,"dname":"689123ae-59f4-4f53-adab-96bf4721a83b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof steps = render(({ useSetter }) => {\n    const [step_number, setStep_number] = useState(1);\n    const Steps = Antd.Steps;\n    const Step = Steps.Step;\n    const update_step_number = (d) => (setStep_number(d));\n    useSetter({ step_number });\n    return jsx`<div key='892f952b-5ba4-47d2-9c4e-5695ddd6462d'>\n      <${Steps} current='${step_number}' onChange=${update_step_number}>\n      <${Step} title=\"Finished\" description=\"This is a description.\" />\n      <${Step} title=\"In Progress\" subTitle=\"Left 00:00:08\" description=\"This is a description.\" />\n      <${Step} title=\"Waiting\" description=\"This is a description.\" />\n     <//>\n    <//>`;\n  })","pinCode":false,"dname":"7b63196a-d025-446b-a62b-147fe8a5e058","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof pagination = render(({ useSetter }) => {\n    const { Pagination } = Antd;\n    const onShowSizeChange = (current, pageSize) => {\n      console.log(current, pageSize);\n    };\n    return  jsx`<${Fragment} key='ba2e5992-136c-4dfe-94f7-23576d014b88'>\n        <${Pagination}\n          showSizeChanger\n          onShowSizeChange=${onShowSizeChange}\n          defaultCurrent=${3}\n          total=${500}\n        />\n        <br />\n        <${Pagination}\n          showSizeChanger\n          onShowSizeChange=${onShowSizeChange}\n          defaultCurrent=${3}\n          total=${500}\n          disabled\n        />\n      <//>`\n    })","pinCode":false,"dname":"dbc0bcac-e235-412f-a533-d7a59b99a1ed","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof dropdown = render(({ useSetter }) => {\n    const { DownOutlined, SmileOutlined } = AntdIcons;\n    const { Dropdown, Menu, Space } = Antd;\n    const Item = Menu.Item;\n    const menu =  jsx`<${Menu}>\n        <${Item}>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\">\n            1st menu item\n          </a>\n        <//>\n        <${Item} disabled icon=${jsx`<${SmileOutlined}><//>`}>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\">\n            2nd menu item (disabled)\n          </a>\n        <//>\n        <${Item} disabled>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.luohanacademy.com\">\n            3rd menu item (disabled)\n          </a>\n        <//>\n        <${Item} danger>a danger item<//>\n      <//>`;\n      return jsx`<${Dropdown} key='7e8bdd6b-c18b-454a-bd0a-841f7520d641' overlay=${menu}>\n        <a onClick=${(e) => e.preventDefault()}>\n          <${Space}>\n            Hover me\n            <${DownOutlined}><//>\n          <//>\n        </a>\n      <//>`\n    });","pinCode":false,"dname":"c5bf8811-5d71-4093-a51b-84913c20a6d3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof button = render(({ useSetter }) => {\n    const [step_number, setStep_number] = useState(1);\n    const Button = Antd.Button;\n    const update_step_number = (d) => setStep_number(step_number+1);\n    useSetter({ step_number });\n    return jsx`<${Button} key='e4e0bcfe-5b3c-4ee6-9dcc-7606099832ea' onClick=${update_step_number}  >Click Me<//> `;\n})","pinCode":false,"dname":"e81331cc-84d9-4f74-aabd-ad86c2cd1ac7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com//react/react\"","pinCode":false,"dname":"d9c7322b-8a37-43d8-8689-ed870bd1b435","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`# Untitled`","pinCode":false,"dname":"75176295-c32b-4c0a-8703-9c25fb7a6f7d","codeMode":"javascript2"}}}],"version":"2.19.1"}
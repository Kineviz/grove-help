{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Self-hosted database proxies\n\nGrove’s hosted ${Link(\"databases/databases\",\"database clients\")} rely on an HTTPS-to-database proxy, which allows your browser to securely run SQL queries against databases that are accessible from the public internet.\n\nBut if your database isn’t accessible from the public internet (say, because you’re running it on your personal computer, or on a private network, or within a VPN) — or if you simply don’t wish to share any database credentials with Grove — that won’t work.\n\nSo we also provide a small, [open-source](https://github.com/LiXingA/grove-database-proxy) Node.js database proxy, that you can run yourself. By connecting directly from your browser to the proxy, your private notebooks can access databases on private networks or local computers, that traffic never goes over the public internet, and you don’t need to trust Grove with any database credentials.`","pinCode":false,"dname":"ea41a443-3257-48a0-b5ab-1ec18ba0ab67","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Setup`","pinCode":false,"dname":"1007c6e0-41a1-4143-b893-3f015f5d3eb8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Install \\`grove-database-proxy\\` with Yarn:\n\n${codeblock(`\nyarn \n`)}\n${codeblock(`\nyarn dev\n`)}\n\nOn startup, the proxy will open a page [http://localhost:2901/](http://localhost:2901/) in browser .\n\n<figure style=\"max-width: 470px; text-align: center;\">\n<img src=\"${await FileAttachment(\"grove-database-proxy.png\").url()}\"/>\n<figcaption>After startup, Open the admin page</figcaption></figure>\n\nClick the **New Database** button will open to your database settings page, and offer to configure a new a self-hosted database proxy. \n\n<figure style=\"max-width: 470px; text-align: center;\">\n<img src=\"${await FileAttachment(\"mysql-configuration.png\").url()}\"/>\n<figcaption>Setting a proxy to a local MySQL database</figcaption></figure>`","pinCode":false,"dname":"46699d66-8c23-4eed-bcad-a3ce5e547ed8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Usage\n\nTo boot up the proxy:\n\n${codeblock(`\nnode bin/grove-database-proxy start\n`)}\n\nHere’s the full list of commands:\n\n- \\`start <name> [ssl options]\\` Start a database proxy server\n- \\`add <name>\\` Add a new database proxy configuration\n- \\`remove <name>\\` Remove an existing database proxy configuration\n- \\`reset <name>\\` Reset the shared secret for an existing database proxy configuration\n- \\`list\\` List all configured database proxies\n`","pinCode":false,"dname":"df82a193-4286-4cd2-83b2-56b685c47fbe","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Querying\nOnce your database proxy is up and running, you can create a database client connected to it by calling \\`DatabaseClient(\"name\")\\` in a private notebook.\n\n${Link(\"tutorial/databases/databases\",\"For more information on querying with Database Clients, see the introductory notebook.\")}`","pinCode":false,"dname":"b1320bb1-fbf8-4610-a89b-5c2b7ab820c0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Configuration file\nYour database credentials and secret key for any configured local proxies are stored on your machine in \\`./config.json\\`. If you restart the database proxy, it will read previous configuration from this file.\n\nIf you want to reset everything, delete this file.\n\nIf you want to remove just a single database proxy configuration, run:\n\n${codeblock(`\ngrove-database-proxy remove <name>\n`)}\n\n\\u{200b}\n`","pinCode":false,"dname":"03ce0642-f3f0-4b60-96c8-cb6e3c311647","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof codeblock = {\n  const css = html`<style>\n    .codeblock {\n      margin-left: 2ex;\n    }\n    .codeblock-prefix:before {\n      content: attr(data-prefix);\n    }\n  </style>`\n  css.value = (content, prefix = '$ ') =>\n    html`\n      <pre class=\"codeblock\"><code>${prefix\n        ? content.trim().split('\\n').map(line => html`\n            <span class=\"codeblock-prefix\" data-prefix=\"${prefix}\"></span>${DOM.text(line + '\\n')}\n          `)\n        : DOM.text(content.trim())}</code></pre>\n    `\n\n  return css\n}","pinCode":false,"dname":"260d9f30-acf8-4568-bb86-f71e339cee7c","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Exercise: Dog pictures\n\n${signinNote}\n\nIn the last tutorial, we built a sandwich calculator and learned about the basics of cells in Grove notebooks. This time weâ€™re going to learn about Groveâ€™s unique approach to asynchronous code, and import from another notebook to build a dog picture browser.\n\n### Steps\n\n1. <a href='#step-1-fetch-a-dog-picture'>Fetch a dog picture</a>\n3. <a href='#step-2-show-that-dog-picture'>Show that dog picture</a>\n4. <a href='#step-3-fetch-a-list-and-explore-the-data'>Fetch a list and explore the data</a>\n6. <a href='#step-4-import-from-another-notebook'>Import from another notebook</a>\n6. <a href='#step-5-organize-your-notebook'>Organize your notebook</a>\n6. <a href='#step-6-customize-the-dogs'>Customize the dogs</a>`","pinCode":false,"dname":"938077ce-bd9c-488b-8537-79b18a3f4a3a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step1 = (md`---\n\n## Step 1: Fetch a dog picture\n\nWeâ€™ll be using [dog.ceo](https://dog.ceo/) for this example, an API that lets you find free dog pictures. As a web API, itâ€™s a service that responds to web requests with a standard format, in this case JSON. We can use the standard [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) API to request each dog picture.\n\n\\`\\`\\`js\ndog = (await fetch(\\`https://dog.ceo/api/breeds/image/random\\`)).json()\n\\`\\`\\``)","pinCode":false,"dname":"dc3b6d52-9f90-41ca-9fb4-93ff58c0b460","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-2/1\")","pinCode":false,"dname":"74e0947f-762f-4d4f-adaf-984a11d927b4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step2 = (md`---\n\n## Step 2: Show that dog picture\n\nOkay, so now weâ€™ve got an object of the APIâ€™s response, from which we can get the dog image. Letâ€™s grab that dog image and display it in an img tag, using the built-in html [tagged template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals).\n\n\\`\\`\\`js\nhtml\\`<img src='$\\{dog.message}' />\\`\n\\`\\`\\`\n`)","pinCode":false,"dname":"369beceb-3242-46be-972a-fd809678e12d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-2/2\")","pinCode":false,"dname":"314c46cb-8edd-4330-a8d3-15fb93065459","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step3 = (md`---\n\n## Step 3: Fetch a list and explore the data\n\nNext up, letâ€™s make it easy to select a specific breed of dog. dog.ceo has an API that [lists all the available breeds](https://dog.ceo/dog-api/documentation/). Getting the list of dog breeds is just like fetching a dog image: weâ€™ll also use the fetch() method, await, and .json().\n\n\\`\\`\\`js\nbreeds = (await fetch(\\`https://dog.ceo/api/breeds/list/all\\`)).json()\n\\`\\`\\`\n\nThis is a good time to check out Groveâ€™s built-in Inspector. Whenever you see some data with a ${caret}, you can click on it and explore its items.`)","pinCode":false,"dname":"b956ffd5-f0ee-4dcf-89be-43121cbdcfe1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-2/3\")","pinCode":false,"dname":"08a79dc5-1276-4505-ae98-dbfd72759e8d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step4 = (md`---\n\n## Step 4: Import from another notebook\n\nJust like the slider we added in the last tutorial, weâ€™ll be adding an input and using viewof to get its value. We could build the select box from scratch, but thereâ€™s already a notebook that has lots of input types ready to go: Jeremyâ€™s [Inputs notebook](https://beta.observablehq.com/@jashkenas/inputs).\n\nSo letâ€™s import the 'select' input type from that notebook and use it to show dog breeds.\n\n\\`\\`\\`js\nimport {select} from \"@jashkenas/inputs\"\n\\`\\`\\`\n\nThen, create a new cell and use this new select method, combined with the fetched breeds, to add a picker.\n\n\\`\\`\\`js\nviewof breed = select(Object.keys(breeds.message))\n\\`\\`\\`\n`)","pinCode":false,"dname":"8af88f54-4c72-451b-a7d6-9b09ff1c9e97","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-2/4\")","pinCode":false,"dname":"5715d3a5-7402-4806-a873-cbc2e656434a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step5 = (md`---\n\n## Step 5: Organize your notebook\n\nWeâ€™ve been writing this notebook cell-by-cell, but to make it presentable, the most important cells should go at the top. So letâ€™s reorder the cells, moving our new dog picker to the top. You can do this with the buttons on the right of the cell, or if you click on your user icon in the top-right and click â€˜Helpâ€™, you can access a list of keyboard shortcuts that include moving cells around.\n`)","pinCode":false,"dname":"3ce867f2-ed68-4119-8eb2-d6326d7a46e0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-2/5\")","pinCode":false,"dname":"9998e272-911b-4017-b7dc-fada48f467d0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step6 = (md`---\n\n## Step 6: Customize the dogs\n\nNow, letâ€™s add that user-selectable breed option into the dog image request cell. Find the dog cell, and update its code to use the [by breed](https://dog.ceo/dog-api/documentation/breed) endpoint.\n\n\\`\\`\\`js\ndog = (await fetch(\\`https://dog.ceo/api/breed/$\\{breed}/images/random\\`)).json()\n\\`\\`\\`\n`)","pinCode":false,"dname":"3dc53853-d275-44fa-8872-6ac00ef2093b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-2/6\")","pinCode":false,"dname":"ee2c1dfe-61ac-40d4-83f4-fa75b49f4f55","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Review\n\n- Using import, you can grab cells from other notebooks to reuse in your own\n- Observable is made to work well with asynchronous code, like the Promises returned by fetch(). You can use await with those Promises to perform multiple asynchronous steps in the same cell.\n- We can use viewof with many different types of inputs to make notebooks interactive, like we did in this one using viewof with a list of types of dogs.\n- You can click on ${caret} output data in Observable to view its details.\n\n## Further reading\n\n- [Introduction to Promises](/@observablehq/introduction-to-promises)\n- [Introduction to Imports](/@observablehq/introduction-to-imports)\n\n## Getting extra help\n\nHaving trouble with this tutorial? Weâ€™re happy to assist you: post in the [Observable user forum](https://talk.observablehq.com/) and we can help out.\n\n## In the next tutorial\n\nNext up, weâ€™ll learn how to [include a JavaScript library in a notebook, and create a visualization. Letâ€™s go ðŸ‘‰](/@observablehq/tutorial-3-visualizing-data)`","pinCode":false,"dname":"11b8661b-3f66-4957-b5e3-c5bbd0937267","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"seriesNavigation(2)","pinCode":false,"dname":"7d948251-54d6-4b6e-b299-ce20ddfc3c40","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Appendix`","pinCode":false,"dname":"44211f7b-9d56-4a67-a9ff-afcefda21345","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { key,caret,video_old as video,signinNote,seriesNavigation }  from '../hands-on-tutorial-utilities'","pinCode":false,"dname":"b65ce8df-6c96-4293-a488-38463fa9428c","codeMode":"javascript2"}}},{"type":"paragraph","data":{"text":"<i>Observablehq. Marshall (2020, Aug 8). Observable: The User Manual. Observable.&nbsp;https://observablehq.com/</i>"}}],"version":"2.19.1"}
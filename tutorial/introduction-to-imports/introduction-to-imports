{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Introduction to Imports\n\nGrove lets you quickly reuse code by importing named cells from other notebooks.\n`","pinCode":false,"dname":"b994f1a7-ede7-46b0-a164-943830fd86f8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Example of Importing a Function`","pinCode":false,"dname":"7a1b17e8-fc67-4d48-9506-6e0d2236cd2a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Let’s say you saw Mike Bostock's notebook of ${Link(\"introduction-to-imports/color-ramp\",\"color scales\")} used to visualize quantitative data. That notebook defines a \\`ramp\\` function that returns a canvas for a given \\`color\\` function, where the \\`color\\` function returns a color for a given ${tex`t \\in [0,1]`} from left to right. To create the dreaded angry rainbow yourself, import and call \\`ramp\\`:`","pinCode":false,"dname":"6fb8668c-5272-448f-b9e4-b301d544a17b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { ramp }  from './color-ramp'","pinCode":false,"dname":"d283112a-dfb6-4595-9957-a354adba473e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"ramp(t => `hsl(${t * 360}, 100%, 50%)`)","pinCode":false,"dname":"51e195a8-995f-4e56-987b-abcb4c53b666","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`**Note**: For the source of the \\`import\\` statement, use the Grove path and notebook name; that is:\n\n\\`from\\` _path_/_notebookName_\n\nYou can get these from the URL of the notebook from which you are importing.`","pinCode":false,"dname":"8356009f-1e57-47be-a357-5ea8cb125929","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Why Import vs. Copy-Paste?`","pinCode":false,"dname":"406753bb-39da-445d-96b9-81fd7346b71c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You could instead copy-paste the \\`ramp\\` function from that notebook into this one—it’s only a few lines of code. But imports have a few advantages.\n`","pinCode":false,"dname":"1726a9ef-95db-4a7a-9a3e-ba6104e1601e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Cell Dependencies`","pinCode":false,"dname":"3be82d5f-93da-4fe1-98ac-23ed48052737","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`First, the cell you want to reuse may depend on other cells. If you copy-paste, you have to copy-paste those other cells too, and make sure that they don’t conflict with existing cells in your notebook. If you import, the dependencies are loaded automatically, so you don’t have to think about it.\n\nFor example, consider a notebook on an interrupted Sinu–Mollweide map projection that requires the D3 and TopoJSON libraries, along with geometry representing the Earth’s landmasses. You can import the map and display it without worrying about how the sausage is made.`","pinCode":false,"dname":"9b022e04-5aef-4444-8516-5902663c7050","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { map }  from './interrupted-sinu-mollweide'","pinCode":false,"dname":"ab64d7f1-35c1-4b7a-a83e-cb4da23a8d52","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"map","pinCode":false,"dname":"a0ec45dd-4397-403d-8770-ad06a5ca2676","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Re-used Code Stays Up-to-Date`","pinCode":false,"dname":"4b0f944a-3338-4fa1-b7d5-c02c60f3bda0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Second, by importing, it’s easier to keep the reused code up-to-date. Imports target the latest published version, so if Mike improves his map notebook, the new map will automatically appear here.\n\n(The risk of importing the latest version is that your notebook may break if the imported notebook changes in a non-backwards-compatible way. Observable also supports versioned imports; however, version numbers aren’t currently exposed in the user interface, so for now you must specify the version manually. In the future, imports will be pinned to the latest published version at the time you write the import statement, and can be re-pinned on-demand.)`","pinCode":false,"dname":"574d8d03-8812-449a-a15d-65a82afbeb78","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### \"Rewrite\" Code Using \\`import\\` - \\`with\\``","pinCode":false,"dname":"8e314b8f-cd6f-432c-8cc7-14649627006f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Third, and most excitingly, Observable imports let you inject dependencies using \\`import\\`-\\`with\\`! This lets you “rewrite” imported code as you might do when copy-pasting, without the problems of code duplication.\n\nConsider Mike Bostock's D3 treemap notebook that visualizes the Flare dataset. To reuse this treemap implementation to visualize a different dataset, inject a new definition of \\`data\\` in the \\`with\\` clause on import:`","pinCode":false,"dname":"406a53d7-8692-4903-80f6-517e83c6381f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { chart as treemap } with { treemap_data as data } from './treemap'","pinCode":false,"dname":"f54fb90f-d86d-4844-9c08-3fc50797265f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"treemap","pinCode":false,"dname":"fa93e171-93bd-4da3-97b3-95408aa97f2f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"treemap_data = (FileAttachment(\"d3.json\").json())","pinCode":false,"dname":"bd81f99a-0dc7-4731-b371-540de71a6457","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`As long as the new data conforms to the same shape as the old data (here, a tree of objects with *children* and *value* properties), you can reuse the existing code without copy-paste and the terrible challenge of designing a reusable chart abstraction!`","pinCode":false,"dname":"99ed2a78-b03f-4654-8267-8f74493be8c3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Adding Dynamic Definitions to Previously Static Code`","pinCode":false,"dname":"7eb62cdd-c220-4744-a8fe-ee610ca4874f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`\nBest of all, because [Observable is reactive](/@observablehq/how-observable-runs), you can even inject dynamic definitions into code that was previously static!\n\nFor example, below is a histogram of a synthetic beta distribution using ${tex`\\alpha`} and ${tex`\\beta`} values that are controlled by sliders. Whenever ${tex`\\alpha`} or ${tex`\\beta`} change, Observable automatically updates the histogram—even though the implementation is reused from a static histogram of unemployment rates.`","pinCode":false,"dname":"2ff25cbd-2749-4548-abcc-b2f7b0081b0c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { chart as histogram } with { histogram_data as data } from './histogram'","pinCode":false,"dname":"5bf39454-293b-4a9d-9a62-e152434875db","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof alphabeta = {\n  const form = html`<form style=\"font: 12px var(--sans-serif);\">\n  <label style=\"display: block;\">\n    <input name=a type=range min=0 max=5 step=0.01 style=\"width:180px;\">\n    ${tex`\\alpha`} = <output name=oa></output>\n  </label>\n  <label style=\"display: block;\">\n    <input name=b type=range min=0 max=5 step=0.01 style=\"width:180px;\">\n    ${tex`\\beta`} = <output name=ob></output>\n  </label>\n</form>`;\n  form.oninput = () => {\n    form.value = [form.a.valueAsNumber, form.b.valueAsNumber];\n    form.oa.value = form.a.valueAsNumber;\n    form.ob.value = form.b.valueAsNumber;\n  };\n  form.oninput();\n  return form;\n}","pinCode":false,"dname":"746ef108-751d-4dc1-b561-77bf2412c256","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"histogram","pinCode":false,"dname":"2065c4bc-cfb4-462e-9188-439b15b0ccd0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"histogram_data = (new Array(10000).fill().map(() => randb(...alphabeta)))","pinCode":false,"dname":"1789f304-bb43-42c1-8e23-e4eae8ee87de","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Nuances When Using Imports`","pinCode":false,"dname":"cf8898fa-f9de-4fbe-9e36-88266c5ab361","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Here are a few additional nuances of imports:\n\n- Like [ES imports](http://exploringjs.com/es6/ch_modules.html), Observable imports are live bindings. If you import a value that changes over time ([a generator cell](/@mbostock/generator-cells-functions-and-objects)), such as a countdown to a certain date in the future, the imported value will change over time, too.`","pinCode":false,"dname":"1b70034c-2ae9-477d-a1ae-d4736ab2e463","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { interval }  from './time-util'","pinCode":false,"dname":"8e55bd01-04fb-400a-b482-bdd51417fdcb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"interval","pinCode":false,"dname":"3e46c1ee-7b21-4683-ba2f-a49d9724301c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`\n- You can only import named cells, and you must name each cell you want to import explicitly. No anonymous cells allowed; if a notebook uses side effects, as is sometimes common with anonymous cells, you must name and import the cells with side effects, too. (See [Naming Cells](#howToNameCells) for a refresher on naming cells.)\n\n- Imported cells are lazily evaluated: if you import a cell but you don’t reference it anywhere, the code won’t run. Try uncommenting the cell below and then hit Shift-Enter. Notice that the generator *i* begins at zero—it doesn’t start until referenced.`","pinCode":false,"dname":"07f3634e-5020-48a9-ba6e-1bb1e2a4e2f5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { i }  from './generator-cells-functions-and-objects'","pinCode":false,"dname":"8f60aba4-6209-4390-9c8c-54b988e7082a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`\n- Also like ES imports, only the cells you import are available (*bound*) in the local notebook, even if those cells depend on other cells. Those dependent cells are *run*—they’re just not exposed in the scope of the local notebook.\n\n- You can use circular imports, but only if you don’t use the *with* clause when importing. Import-with effectively creates a local copy of the imported module with your overrides, so a circular import-with would create an infinitely recursive module, a bit like seeing your reflection in a mirrored room.\n\n- You can import the same notebook multiple times and references will resolve exactly. (Note, however, that the versions of the imported notebooks must also match, or they are considered different notebooks.)`","pinCode":false,"dname":"0f375728-7825-472c-97dd-983fbe55bf58","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { map as map2 }  from './interrupted-sinu-mollweide'","pinCode":false,"dname":"a26ed306-749e-4dc6-b89e-b14abda69a38","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"map === map2","pinCode":false,"dname":"99d11f5d-f817-47b2-b433-d4059392a004","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Import Visualizer for Debugging`","pinCode":false,"dname":"88333272-d9ba-46ea-88f1-21079468c7ba","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you find yourself using lots of imports in your notebooks, you might find our ${Link(\"./notebook-import-visualizer\",\"import visualizer\")} helpful for debugging. For example, here are the imports used by this notebook. *So meta!*`","pinCode":false,"dname":"ae01dc8c-98d4-4f82-a949-3aa52b2009e6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"graph","pinCode":false,"dname":"5a900d58-0ef9-412b-8534-42f57c29c81a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"shared = (md`### Public, Unlisted, and Private imports\n\nThe examples so far have imported from publicly shared notebooks. But you can import from unlisted notebooks, too:`)","pinCode":false,"dname":"adb10231-4d0b-4ac4-9da1-0025b4d87bac","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { functionFromUnlistedNotebook }  from './unlisted-imports'","pinCode":false,"dname":"c631b8dc-4f7a-4d67-a97f-7ddef1ec0c3d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"functionFromUnlistedNotebook","pinCode":false,"dname":"bda7dc9c-368f-4464-ac53-f2415d6c5b4a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can even import from private notebooks; however, if you publish a notebook that imports a private notebook, the imported private notebook won’t be accessible to your readers, which may prevent your notebook from functioning as intended. Don’t forget to share or publish your imports before you publish.\n\nLastly, imports aren’t intended to replace libraries (like [lodash](https://lodash.com) or [D3](https://d3js.org)); if you want to design, build and support a reusable library, go for it and publish to npm! But if you want a lightweight way to reuse code across notebooks without resorting to copy-paste, reach for import.\n\n---`","pinCode":false,"dname":"bf151bcd-e71f-4ba5-ae13-17eb1e2f4061","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"howToNameCells = (md `## Naming Cells`)","pinCode":false,"dname":"fbd36c2b-351b-442f-ab72-07137c91ce76","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can assign a name to a JavaScript cell in one of the four following ways:`","pinCode":false,"dname":"32c6994d-7903-48b1-906f-71bda0dcc071","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Naming a cell expression:`","pinCode":false,"dname":"cb655c1b-cc36-4fa2-9c73-70d4863b01e8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"expressionName = (8)","pinCode":false,"dname":"7e8d2a8c-c833-46de-982e-1c79cb7d1d96","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Naming a block:`","pinCode":false,"dname":"607ef6ad-c8e5-422b-ac33-0021638b7957","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"blockName = { return 80; }","pinCode":false,"dname":"8c9fdc6e-3318-4ef1-81de-7744f84c07ae","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Naming a function declaration:`","pinCode":false,"dname":"344b6caa-a912-4a4b-9b5c-becc4ed7af44","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"functionName = (function functionName() {return 800;})","pinCode":false,"dname":"2d9b68eb-fb77-42db-bf2a-6d545cefa0ed","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Naming a class:`","pinCode":false,"dname":"b382c35a-aaa7-45a2-a3fc-c1474306b1ce","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"className = (class className {})","pinCode":false,"dname":"ccbb87f4-c226-4b5f-b50c-3ed5fad5f892","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`See the title of this section for an example of how to name a Markdown cell.`","pinCode":false,"dname":"334ca5a5-9449-4daf-a96a-055f8beefda8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Appendix`","pinCode":false,"dname":"381aad5c-eafc-4646-837c-2dd0d5b8ce08","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"url = (\"https://api.observablehq.com/@observablehq/introduction-to-imports.js?v=3\")","pinCode":false,"dname":"33703397-bd87-455d-9053-7a152a9c6b30","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"orient = (\"LR\")","pinCode":false,"dname":"ea6c469d-d702-49f5-9446-6c858804c49f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { graphic as graph } with { url, orient } from './notebook-import-visualizer'","pinCode":false,"dname":"31d0c738-0d7b-4db1-add3-1d9413ed43f5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"randb = (function randb(alpha, beta) {\n  const u = randg(alpha);\n  return u / (u + randg(beta));\n})","pinCode":false,"dname":"24253b20-6f6d-4ff5-963c-82867cedd76b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"randg = (function randg(shape) {\n  let oalph = shape, a1, a2, u, v, x, mat;\n  if (!shape) shape = 1;\n  if (shape < 1) shape += 1;\n  a1 = shape - 1 / 3;\n  a2 = 1 / Math.sqrt(9 * a1);\n  do {\n    do {\n      x = randn();\n      v = 1 + a2 * x;\n    } while (v <= 0);\n    v = v * v * v;\n    u = Math.random();\n  } while (\n    u > 1 - 0.331 * Math.pow(x, 4) &&\n    Math.log(u) > 0.5 * x * x + a1 * (1 - v + Math.log(v))\n  );\n  if (shape === oalph) return a1 * v; // alpha > 1\n  do u = Math.random(); while (u === 0); // alpha < 1\n  return Math.pow(u, 1 / oalph) * a1 * v;\n})","pinCode":false,"dname":"0864e6fd-994c-4859-9f7f-b3cf30b616d4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"randn = (function randn() {\n  let u, v, x, y, q;\n  do {\n    u = Math.random();\n    v = 1.7156 * (Math.random() - 0.5);\n    x = u - 0.449871;\n    y = Math.abs(v) + 0.386595;\n    q = x * x + y * (0.19600 * y - 0.25472 * x);\n  } while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));\n  return v / u;\n})","pinCode":false,"dname":"118bf8f9-b708-4887-80e3-59e2e25d616d","codeMode":"javascript2"}}}],"version":"2.19.1"}
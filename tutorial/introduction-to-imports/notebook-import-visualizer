{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Notebook Import Visualizer\n\nUse this notebook to visualize the notebooks a notebook imports, transitively. Paste a link to your notebook into the textbox below.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof url = {\n  const form = html`<form style=\"display: flex; min-height: 33px; align-items: center;\">\n  <label style=\"display: flex; width: 100%; max-width: 640px;\">\n    <input name=\"text\" style=\"width: 100%;\" placeholder=\"Paste a notebook URL here\">\n    <button style=\"flex-grow: 0; margin-left: 0.5em;\">Submit</button>\n  </label>\n</form>`;\n  const {text} = form;\n  form.value = text.value = moduleUrl(new URL(location).searchParams.get(\"id\") || \"@yurivish/quarantine-now\");\n  text.addEventListener(\"input\", event => {\n    event.stopPropagation();\n  });\n  text.addEventListener(\"paste\", async event => {\n    await Promises.delay(50);\n    text.form.dispatchEvent(new CustomEvent(\"submit\", {cancelable: true}));\n  });\n  form.addEventListener(\"submit\", event => {\n    form.value = text.value = moduleUrl(text.value);\n    form.dispatchEvent(new CustomEvent(\"input\"));\n    event.preventDefault();\n  });\n  return form;\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof orient = (html`<select>\n<option value=LR>left-to-right\n<option value=RL>right-to-left\n<option value=TB selected>top-to-bottom\n<option value=BT>bottom-to-top\n</select>`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"graphic = (dot`digraph \"\" {\n  node [fontname=\"var(--sans-serif)\" fontsize=\"12\"];\n  edge [fontname=\"var(--sans-serif)\" fontsize=\"12\"];\n  rankdir = ${orient};\n  \"${displayName(url)}\" [style=\"filled\" fillcolor=\"#F5F5F5\"]\n  ${Array.from(new Set(imports.flat())).concat(url)\n    .filter(notebookUrl)\n    .map(module => `\"${displayName(module)}\" [href=\"${notebookUrl(module)}\" target=\"_blank\"]`)\n    .join(\"\\n\")}\n  ${imports.map(([source, target]) => `\"${displayName(source)}\" -> \"${displayName(target)}\"`).join(\"\\n\")}\n}`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`TODO:\n* Highlight import-with relationships\n* Document using an API key to visualize private notebooks\n* Show the imported symbols`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Appendix`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"imports = (fetchAllImports(url))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"fetchAllImports = (async function* fetchAllImports(url) {\n  const urls = new Set([url]);\n  const importsByUrl = new Map();\n  const imports = [];\n  yield imports;\n  for (const url of urls) {\n    const urlImports = await fetchImports(url);\n    for (const importUrl of urlImports) {\n      urls.add(importUrl);\n      imports.push([url, importUrl]);\n      yield imports;\n    }\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"fetchImports = (async function fetchImports(url) {\n  const response = await fetch(url);\n  if (!response.ok) throw new Error(`unable to fetch ${url}`);\n  const text = await response.text();\n  return parseImports(text);\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"parseImports = (function parseImports(text) {\n  const program = acorn.parse(text, {\n    ecmaVersion: 11,\n    sourceType: \"module\"\n  });\n  return program.body\n    .filter(node => node.type === \"ImportDeclaration\")\n    .map(node => new URL(node.source.value, url) + \"\");\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"displayName = (function displayName(name) {\n  let v = name, m;\n  if (m = /^https:\\/\\/api\\.observablehq\\.com\\/d\\/([0-9a-f]{16}(?:@[0-9]+)?)\\.js(?:\\?|$)/i.exec(v)\n      || /^https:\\/\\/api\\.observablehq\\.com\\/(@[0-9a-z_-]+\\/[0-9a-z_-]+(?:\\/[0-9]+)?(?:@[0-9]+)?)\\.js(?:\\?|$)/i.exec(v)\n     ) {\n    return m[1];\n  }\n  return name;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"notebookUrl = (function notebookUrl(name) {\n  let v = name, m;\n  if (m = /^https:\\/\\/api\\.observablehq\\.com\\/(d\\/[0-9a-f]{16}(?:@[0-9]+)?)\\.js(?:\\?|$)/i.exec(v)\n      || /^https:\\/\\/api\\.observablehq\\.com\\/(@[0-9a-z_-]+\\/[0-9a-z_-]+(?:\\/[0-9]+)?(?:@[0-9]+)?)\\.js(?:\\?|$)/i.exec(v)\n     ) {\n    return `https:\\/\\/observablehq\\.com/${m[1]}`;\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"moduleUrl = (function moduleUrl(specifier) {\n  let v = specifier, m;\n  if (m = /^([0-9a-f]{16}(?:@[0-9]+)?)$/i.exec(v)) {\n    return `https://api.observablehq.com/d/${m[1]}.js?v=3`;\n  }\n  if (m = /^(@[0-9a-z_-]+\\/[0-9a-z_-]+(?:\\/[0-9]+)?(?:@[0-9]+)?)$/i.exec(v)\n      || /^https:\\/\\/(?:beta\\.)?observablehq\\.com\\/d\\/([0-9a-f]{16}(?:@[0-9]+)?)(?:\\?|$)/i.exec(v)\n      || /^https:\\/\\/(?:beta\\.)?observablehq\\.com\\/(@[0-9a-z_-]+\\/[0-9a-z_-]+(?:\\/[0-9]+)?(?:@[0-9]+)?)(?:\\?|$)/i.exec(v)\n      || /^https:\\/\\/api\\.observablehq\\.com\\/d\\/([0-9a-f]{16}(?:@[0-9]+)?)\\.tgz\\?v=3$/i.exec(v)\n      || /^https:\\/\\/api\\.observablehq\\.com\\/(@[0-9a-z_-]+\\/[0-9a-z_-]+(?:\\/[0-9]+)?(?:@[0-9]+)?)\\.tgz\\?v=3$/i.exec(v)\n     ) {\n    return `https://api.observablehq.com/${m[1]}.js?v=3`;\n  }\n  return specifier;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"acorn = (require(\"acorn@7\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"dot = (require(\"@observablehq/graphviz@0.2\"))","pinCode":false}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Histogram\n\nA histogram visualizes a one-dimensional distribution by grouping continuous values into discrete bins. This example shows the unemployment rate of U.S. counties as of August 2016. Data: [Bureau of Labor Statistics](http://www.bls.gov/lau/#tables)`","pinCode":false,"dname":"961ae1df-6ec9-42a4-a9bc-97382d5cd6ac","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"chart = (Histogram(unemployment, {\n  value: d => d.rate,\n  label: \"Unemployment rate (%) →\",\n  width,\n  height: 500,\n  color: \"steelblue\"\n}))","pinCode":false,"dname":"643616b2-0dc6-4af6-a964-cd5892b93ec7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"unemployment = (FileAttachment(\"unemployment-x.csv\").csv({typed: true}))","pinCode":false,"dname":"98c44f32-189c-4f4c-941a-64a3cf6156db","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"howto(\"Histogram\")","pinCode":false,"dname":"bbcb7ade-1ca6-46c8-b584-f1a19e156b07","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"altplot(`Plot.rectY(unemployment, Plot.binX({y: \"count\"}, {x: \"rate\"})).plot()`)","pinCode":false,"dname":"843ccbda-e323-4f72-916d-063125e4eab8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Histogram = (function Histogram(data, {\n  value = d => d, // convenience alias for x\n  domain, // convenience alias for xDomain\n  label, // convenience alias for xLabel\n  format, // convenience alias for xFormat\n  type = d3.scaleLinear, // convenience alias for xType\n  x = value, // given d in data, returns the (quantitative) x-value\n  y = () => 1, // given d in data, returns the (quantitative) weight\n  thresholds = 40, // approximate number of bins to generate, or threshold function\n  marginTop = 20, // top margin, in pixels\n  marginRight = 30, // right margin, in pixels\n  marginBottom = 30, // bottom margin, in pixels\n  marginLeft = 40, // left margin, in pixels\n  width = 640, // outer width of chart, in pixels\n  height = 400, // outer height of chart, in pixels\n  insetLeft = 0.5, // inset left edge of bar\n  insetRight = 0.5, // inset right edge of bar\n  xType = type, // type of x-scale\n  xDomain = domain, // [xmin, xmax]\n  xRange = [marginLeft, width - marginRight], // [left, right]\n  xLabel = label, // a label for the x-axis\n  xFormat = format, // a format specifier string for the x-axis\n  yType = d3.scaleLinear, // type of y-scale\n  yDomain, // [ymin, ymax]\n  yRange = [height - marginBottom, marginTop], // [bottom, top]\n  yLabel = \"↑ Frequency\", // a label for the y-axis\n  yFormat, // a format specifier string for the y-axis\n  color = \"currentColor\" // bar fill color\n} = {}) {\n  // Compute values.\n  const X = d3.map(data, x);\n  const Y = d3.map(data, y);\n  const I = d3.range(X.length);\n\n  // Compute bins.\n  const bins = d3.bin().thresholds(thresholds).value(i => X[i])(I);\n\n  // Compute default domains.\n  if (xDomain === undefined) xDomain = [bins[0].x0, bins[bins.length - 1].x1];\n  if (yDomain === undefined) yDomain = [0, d3.max(bins, I => d3.sum(I, i => Y[i]))];\n\n  // Construct scales and axes.\n  const xScale = xType(xDomain, xRange);\n  const yScale = yType(yDomain, yRange);\n  const xAxis = d3.axisBottom(xScale).ticks(width / 80, xFormat).tickSizeOuter(0);\n  const yAxis = d3.axisLeft(yScale).ticks(height / 40, yFormat);\n  yFormat = yScale.tickFormat(100, yFormat);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [0, 0, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(${marginLeft},0)`)\n      .call(yAxis)\n      .call(g => g.select(\".domain\").remove())\n      .call(g => g.selectAll(\".tick line\").clone()\n          .attr(\"x2\", width - marginLeft - marginRight)\n          .attr(\"stroke-opacity\", 0.1))\n      .call(g => g.append(\"text\")\n          .attr(\"x\", -marginLeft)\n          .attr(\"y\", 10)\n          .attr(\"fill\", \"currentColor\")\n          .attr(\"text-anchor\", \"start\")\n          .text(yLabel));\n\n  svg.append(\"g\")\n      .attr(\"fill\", color)\n    .selectAll(\"rect\")\n    .data(bins)\n    .join(\"rect\")\n      .attr(\"x\", d => xScale(d.x0) + insetLeft)\n      .attr(\"width\", d => Math.max(0, xScale(d.x1) - xScale(d.x0) - insetLeft - insetLeft))\n      .attr(\"y\", d => yScale(d3.sum(d, i => Y[i])))\n      .attr(\"height\", d => yScale(0) - yScale(d3.sum(d, i => Y[i])))\n    .append(\"title\")\n      .text((d, i) => [`${d.x0} ≤ x < ${d.x1}`, yFormat(d3.sum(d, i => Y[i]))].join(\"\\n\"));\n\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(0,${height - marginBottom})`)\n      .call(xAxis)\n      .call(g => g.append(\"text\")\n          .attr(\"x\", width - marginRight)\n          .attr(\"y\", 27)\n          .attr(\"fill\", \"currentColor\")\n          .attr(\"text-anchor\", \"end\")\n          .text(xLabel));\n\n  return svg.node();\n})","pinCode":false,"dname":"b89e80f7-1219-4ea7-86b6-633367082536","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { howto,altplot }  from 'groves-not-javascript/example-components'","pinCode":false,"dname":"74d5410f-237a-4a29-916d-ba29cf9a5409","codeMode":"javascript2"}}}],"version":"2.19.1"}
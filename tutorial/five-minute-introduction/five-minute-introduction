{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Five-Minute Introduction\n\nWelcome! This notebook gives a quick overview of Grove. For a more technical introduction, see ${Link(\"../groves-not-javascript/groves-not-javascript\",\"grove's not javascript\")}. \n\nAn Grove notebook consists of cells. Each cell is a snippet of JavaScript. You can see (and edit!) the code for any cell by clicking the icon button <i class=\"icon fas fa-chevron-right \" title=\"Edit cell\"></i> or clicking the menu <svg viewBox=\"0 0 8 14\" fill=\"currentColor\" stroke=\"none\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"8\" height=\"14\"><circle r=\"1.5\" cx=\"4\" cy=\"2\"></circle><circle r=\"1.5\" cx=\"4\" cy=\"7\"></circle><circle r=\"1.5\" cx=\"4\" cy=\"12\"></circle></svg> to dropdown and select <i class=\"fas fa-pen\"></i> in the left margin.`","pinCode":false,"dname":"4c17cc77-0ef4-4b65-8994-6c0d6d697e02","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"2 * 3 * 7","pinCode":false,"dname":"0afa44ff-f186-493a-83c7-0c5faa5e6dba","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  let sum = 0;\n  for (let i = 0; i <= 100; ++i) {\n    sum += i;\n  }\n  return sum;\n}","pinCode":false,"dname":"a2ebf180-2ba1-4d3d-a4d9-60fb98be8095","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Cells can have names. This allows a cell’s value to be referenced by other cells.`","pinCode":false,"dname":"4cb57fd4-e906-4be7-818a-153ec64feba7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"color = (\"red\")","pinCode":false,"dname":"58a1ef3f-90b1-4c1c-8878-2c241902b0f8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"`My favorite color is ${color}.`","pinCode":false,"dname":"a1ce9e92-b3f0-43be-9a0d-731ddcf18327","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`A cell referencing another cell is re-evaluated automatically when the referenced value changes. Try editing the definition of *color* above and shift-return to re-evaluate.\n\nCells can generate DOM (HTML, SVG, Canvas, WebGL, *etc.*). You can use the standard DOM API like *document*.createElement, or use the built-in *html* tagged template literal:`","pinCode":false,"dname":"a3234470-4334-46b1-a297-e25d185fb225","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<span style=\"background:yellow;\">\n  My favorite language is <i>HTML</i>.\n</span>`","pinCode":false,"dname":"5d471d13-26ca-4be0-a2a6-7e08aed6762a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`There’s a Markdown tagged template literal, too. (This notebook is written in Markdown.)`","pinCode":false,"dname":"14001cda-8967-4225-a663-bce68ec4d340","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`My favorite language is *Markdown*.`","pinCode":false,"dname":"e8955c97-13b6-4591-9b2a-28f1a492625e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`DOM can be made reactive simply by referring to other cells. The next cell refers to *color*. (Try editing the definition of *color* above.)`","pinCode":false,"dname":"0fc540e8-bcde-4a7f-8e44-d0fe0f99ccaa","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`My favorite color is <i style=\"background:${color};\">${color}</i>.`","pinCode":false,"dname":"8a01a376-0092-440f-a14a-e6607042f341","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Sometimes you need to load data from a remote server, or compute something expensive in a web worker. For that, cells can be defined asynchronously using [promises](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Using_promises):`","pinCode":false,"dname":"8ef9c512-bcb0-49f9-81b9-155c0e2bc54e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"status = (new Promise(resolve => {\n  setTimeout(() => {\n    resolve({resolved: new Date});\n  }, 2000);\n}))","pinCode":false,"dname":"143a925b-182b-4cd3-83bf-14c2b7ee6a70","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`A cell that refers to a promise cell sees the value when it is resolved; this implicit await means that referencing cells don’t care whether the value is synchronous or not. Edit the *status* cell above to see the cell below update after two seconds.`","pinCode":false,"dname":"010b61d9-fcb1-4d4b-b070-ce3d4f5a4183","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"status","pinCode":false,"dname":"b8db9bd6-c049-443a-a28d-062d36d25fae","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Promises are also useful for loading libraries from npm. Below, \\`require\\` returns a promise that resolves to the d3-fetch library:`","pinCode":false,"dname":"de210a74-3c77-4672-bc24-d8ee9b9abb72","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"d3 = (require(\"d3-fetch@1\"))","pinCode":false,"dname":"d7395959-afb5-49da-ab0b-64b453a2d955","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you prefer, you can use async and await explicitly:`","pinCode":false,"dname":"519adfda-20bf-4506-b190-cfad709ccabd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"countries = ((await d3.tsv(\"https://cdn.jsdelivr.net/npm/world-atlas@1/world/110m.tsv\"))\n    .sort((a, b) => b.pop_est - a.pop_est) // Sort by descending estimated population.\n    .slice(0, 10))","pinCode":false,"dname":"3468244b-f9ed-48b5-93bd-80b816ef7597","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Cells can be defined as [generators](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generators); a value is yielded up to sixty times a second.`","pinCode":false,"dname":"fb18e309-7220-48c3-974a-d004b49aa9f5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"i = {\n  let i = 0;\n  while (true) {\n    yield ++i;\n  }\n}","pinCode":false,"dname":"20f83124-4cad-47bd-b156-07bdbd1a576c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"`The current value of i is ${i}.`","pinCode":false,"dname":"074dba3d-b081-4f1a-bb87-73aaee219ea5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Any cell that refers to a generator cell sees its current value; the referencing cell is re-evaluated whenever the generator yields a new value. As you might guess, a generator can yield promises for [async iteration](https://github.com/tc39/proposal-async-iteration); referencing cells see the current resolved value.`","pinCode":false,"dname":"c37f3027-0c1f-4e98-9849-2ddc590e04cd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"date = {\n  while (true) {\n    yield new Promise(resolve => {\n      setTimeout(() => resolve(new Date), 1000);\n    });\n  }\n}","pinCode":false,"dname":"3306a6f5-fa44-486b-9147-334d7f56f8e1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Combining these primitives—promises, generators and DOM—you can build custom user interfaces. Here’s a slider and a generator that yields the slider’s value:`","pinCode":false,"dname":"ef0f8324-fc58-4045-92d3-de3d9e6512e7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"slider = (html`<input type=range>`)","pinCode":false,"dname":"3e862f12-4aa6-458e-968d-68b80cee1253","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"sliderValue = (Generators.input(slider))","pinCode":false,"dname":"ccd439d1-ea1b-4a83-8886-7e50d29f59d1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Generators.input returns a generator that yields promises. The promise resolves whenever the associated input element emits an input event. You don’t need to implement that generator by hand, though. There’s a builtin viewof operator which exposes the current value of a given input element:`","pinCode":false,"dname":"470958ec-fe82-460d-9ba3-d7defd46fe75","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof value = (html`<input type=range>`)","pinCode":false,"dname":"cc67a3a3-d92a-46f1-8753-550b8a8ec1d7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"value","pinCode":false,"dname":"a7127d40-4ac7-41b3-b333-4a58ec46e674","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can import cells from other notebooks. To demonstrate how custom user interfaces can expose arbitrary values to other cells, here’s a brushable scatterplot of cars showing the inverse relationship between horsepower and fuel efficiency.`","pinCode":false,"dname":"cf6c8989-dcd0-4a28-b8d5-3d5a8436d8d0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { viewof selection as cars }  from './brushable-scatterplot'","pinCode":false,"dname":"40228b56-f81b-459c-951c-44794b1febb8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof cars","pinCode":false,"dname":"80e195ba-1ed8-40db-a7e9-70c3a25adb13","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"cars","pinCode":false,"dname":"52ed95c3-7f78-45c2-88b9-d4c4aafa0692","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`${Array.from(new Set(cars.map(c => c.name)))\n    .sort()\n    .map(c => `* <a target=\"_blank\" href=\"https://google.com/search?tbm=isch&q=${escape(c)}\">${c}</a>`)\n    .join(\"\\n\")}`","pinCode":false,"dname":"ced32a3c-8f37-4880-b300-73f21c6860e5","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Variable Speed Generator\n\nThis notebook demonstrates how to define a dynamic variable—here the rotation angle of a cheery message—whose value is affected *indirectly* by the user interface. The slider below controls the rotational velocity: sliding to the left will cause the text to rotate counterclockwise rather than clockwise.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const size = Math.min(640, width);\n  let context;\n  if (this) {\n    context = this.getContext(\"2d\");\n    context.clearRect(0, 0, size, size);\n  } else {\n    context = DOM.context2d(size, size)\n    context.font = \"96px Helvetica\";\n    context.textAlign = \"center\";\n    context.canvas.style.margin = \"auto\";\n    context.canvas.style.display = \"block\";\n  }\n  context.save();\n  context.translate(size / 2, size / 2);\n  context.rotate(angle);\n  context.fillText(\"Hello, world!\", 0, 0);\n  context.restore();\n  return context.canvas;\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"angle","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof angle = {\n  const form = html`<form><input name=velocity type=range value=0.001 min=-0.01 max=0.01 step=any>`;\n\n  // Update the value every animation frame.\n  let then = 0, frame = requestAnimationFrame(function loop(now) {\n    form.value += (now - then) * form.velocity.valueAsNumber;\n    form.dispatchEvent(new CustomEvent(\"input\"));\n    then = now, frame = requestAnimationFrame(loop);\n  });\n\n  // Break the loop on invalidation.\n  invalidation.then(() => cancelAnimationFrame(frame));\n\n  // Set the initial value.\n  form.value = 0;\n  return form;\n}","pinCode":false}}}],"version":"2.19.1"}
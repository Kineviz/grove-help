{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"# Cypher Editor","pinCode":false,"dname":"d2c6296c-e396-468b-8223-a38ddaa5a01a","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof cpEditor = render(({ useSetter }) => {\n  const [value,setValue] = useState(\"MATCH (n)-[r]->(m) RETURN *\")\n  useSetter({});\n  return jsx`<${CypherEditor} key=\"a91c3143-0b84-48a6-9d1b-397ee3a5cf20\" className=\"limit-height\"  value=${value}  onValueChange=${(value) => {\n  \tsetValue(value);\n  }} />`;\n})","pinCode":false,"dname":"78d0621b-52c6-4a2c-9fb0-785f3adf46a5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"showHint = Codemirror.showHint;","pinCode":false,"dname":"59aa9b02-8973-4af7-a124-1e69b492d073","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"  Dropdown  = Antd.Dropdown;","pinCode":false,"dname":"519c7469-1274-410a-9f52-ffc7fe501039","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Menu = Antd.Menu","pinCode":false,"dname":"9e2915f9-777b-4a1a-b1c1-7069e06ce9b8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"CypherEditor = class extends React.Component {\n  constructor(props) {\n    super(props);\n    const { run } = this.props;\n    this.state = {\n      isFocused: false,\n      items: props.items || [\n        {\n          value: `MATCH (n)-[r]->(m) RETURN *`,\n          label: \"It's the entire graph!\",\n        },\n        {\n          value: `MATCH (p:Person)--(m:Movie)\n  RETURN p.name as Person, COUNT(m) as Movies \n  ORDER BY Movies DESC`,\n          label: \"Template\",\n        },\n        {\n          value: `MATCH (n)-[r]-(m) RETURN * LIMIT 100`,\n          label: \"MATCH (n)-[r]-(m) RETURN * LIMIT 100\",\n        },\n      ],\n    };\n    this.options = {\n      lineNumbers: true,\n      mode: \"cypher\",\n      theme: window.editor.getSettings().getTheme(),\n      placeholder: \"Type Cypher, then Shift-Enter.\",\n      gutters: [\"cypher-hints\"],\n      lineWrapping: true,\n      readOnly: props.readOnly,\n      autofocus: true,\n      smartIndent: false,\n      lineNumberFormatter: this.lineNumberFormatter,\n      lint: true,\n      extraKeys: assembling([\n        ...COMMON_KEYS,\n        {\n          key: linkKeys(cell_shortcuts_keys[\"Force Run Current Cell\"]),\n          value: (cm) => {\n            run && run();\n          },\n        },\n        {\n          key: linkKeys(cell_shortcuts_keys[\"Run Current Cell\"]),\n          value: (cm) => {\n            run && run();\n          },\n        },\n        {\n          key: linkKeys(code_editor_keys[\"Show Editor LineNumbers\"]),\n          value: (cm) => {\n            cm.setOption(\"lineNumbers\", !cm.getOption(\"lineNumbers\"));\n          },\n        },\n        {\n          key: linkKeys(code_editor_keys[\"Fold Code\"]),\n          value: function (cm) {\n            cm.foldCode(cm.getCursor());\n          },\n        },\n      ]),\n      hintOptions: {\n        completeSingle: false,\n        closeOnUnfocus: false,\n        alignWithWord: true,\n        async: true,\n      },\n      autoCloseBrackets: { explode: \"\" },\n      ...(this.props.options || {}),\n    };\n    this.schema = this.props.autoCompleteSchema;\n    this.themeElement = document.createElement(\"div\");\n  }\n  normalizeLineEndings(str) {\n    if (!str) return str;\n    return str.replace(/\\r\\n|\\r/g, \"\\n\");\n  }\n  lineNumberFormatter(line) {\n    if (!this.codeMirror || this.codeMirror.lineCount() === 1) {\n      return \"$\";\n    } else {\n      return line;\n    }\n  }\n  getCodeMirrorInstance() {\n    return Codemirror;\n  }\n  componentDidMount() {\n    const textareaNode = this.editorReference;\n    const { editor, editorSupport } = cypherCodemirror.createCypherEditor(\n      textareaNode,\n      this.options\n    );\n    /**@type{Codemirror.Editor} */    this.codeMirror = editor;\n    this.codeMirror.on(\"keyup\", this.codemirrorKeyup.bind(this));\n    this.codeMirror.on(\"change\", this.codemirrorValueChanged.bind(this));\n    this.codeMirror.on(\"focus\", () => this.focusChanged(true));\n    this.codeMirror.on(\"blur\", () => this.focusChanged(false));\n    this.codeMirror.on(\"scroll\", this.scrollChanged.bind(this));\n    this.codeMirror.setValue(this.props.value);\n    this.editorSupport = editorSupport;\n    this.editorSupport.setSchema(this.schema);\n    if (this.props.initialPosition) {\n      this.goToPosition(this.props.initialPosition);\n    }\n    actions.inspector(this.themeElement, [actions.types.THEME], (theme) => {\n      this.setTheme(theme);\n    });\n  }\n  componentWillUnmount() {\n    actions.deleteCache(this.themeElement);\n  }\n  setTheme(theme) {\n    this.codeMirror && this.codeMirror.setOption(\"theme\", theme);\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      if (this.codeMirror && this.codeMirror.getValue() !== nextProps.value) {\n        this.codeMirror.setValue(nextProps.value);\n      }\n    }\n  }\n  goToPosition(position) {\n    for (let i = 0; i < position.line; i++) {\n      this.codeMirror.execCommand(\"goLineDown\");\n    }\n    for (let i = 0; i <= position.column; i++) {\n      this.codeMirror.execCommand(\"goCharRight\");\n    }\n  }\n  getCodeMirror() {\n    return this.codeMirror;\n  }\n  focus() {\n    if (this.codeMirror) {\n      this.codeMirror.focus();\n    }\n  }\n  focusChanged(focused) {\n    let state = { isFocused: focused };\n    this.setState(state);\n    this.props.onFocusChange && this.props.onFocusChange(focused);\n  }\n  scrollChanged(cm) {\n    this.props.onScroll && this.props.onScroll(cm.getScrollInfo());\n  }\n  codemirrorValueChanged(doc, change) {\n    if (this.props.onValueChange && change.origin !== \"setValue\") {\n      this.props.onValueChange(doc.getValue(), change);\n    }\n  }\n  codemirrorKeyup(cm, e) {\n    if (!(e.ctrlKey || e.metaKey) && !e.altKey && /^[a-z$._]$/gi.test(e.key)) {\n      showHint(cm, Codemirror.hint.cypher);\n    }\n  }\n  render() {\n    const { items } = this.state;\n    const editorClassNames = classNames(\n      \"ReactCodeMirror\",\n      { \"ReactCodeMirror--focused\": this.state.isFocused },\n      this.props.className\n    );\n    return jsx`<div className=\"code-edit-wrapper\">\n        <div className=\"code-edit-wrapper-icons d-flex align-items-center\">\n          <${Dropdown} placement=\"bottomCenter\" trigger=${[\n      \"click\",\n    ]} overlay=${jsx`<${Menu} className=\"data-html2canvas-ignore import-export-menu normal-icon\" \n          onClick=${(info) => {\n            let item = items[info.key];\n            this.codeMirror.setValue(item.value);\n            if (this.props.onValueChange) {\n              this.props.onValueChange(this.codeMirror.getValue());\n            }\n          }}>\n            ${_.map(items, (item, index) => {\n              return jsx`<${Menu.Item} key=${index}>${item.label}</${Menu.Item}>`;\n            })}\n          </${Menu}>`} >\n            <div>template</div>\n          </${Dropdown}>\n        </div>\n        <div\n          className=${editorClassNames}\n          ref=${(ref) => (this.editorReference = ref)}\n        ></div>\n      </div>`;\n  }\n}","pinCode":false,"dname":"e4600cce-6439-4c00-a884-c1cd65fd9156","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"ChevronDownIcon = component(({ fill, ...propsa }) => {\n    const { Space } = Antd;\n  \tconst  Icon  = AntdIcons;\n    return jsx`<${Icon} component=${ChevronDownSvg} className=${`${fill ? \"\" : \"anticon-muted\"}`} ...${propsa} />`;\n})  ","pinCode":false,"dname":"adcb8e27-51cc-4790-8e1b-532cee593f99","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"ChevronDownSvg = () => {return jsx`<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\"><path d=\"M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z\" /></svg>`\n }","pinCode":false,"dname":"b7b13948-18dc-4a29-a864-8ef289287617","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"assembling = function (objs) {\n  return _.reduce(objs, (prev, curr) => {\n    const { key, value } = curr;\n    prev[key] = value;\n    return prev;\n  }, {})\n}","pinCode":false,"dname":"059683a9-2a92-4780-91f9-588cbd60d91a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"COMMON_KEYS = [{\n  key: linkKeys(code_editor_keys[\"Fold Code\"]),\n  value: function (cm) {\n    cm.foldCode(cm.getCursor());\n  },\n}, {\n  key: linkKeys(code_editor_keys[\"Comment Lines\"]),\n  value: \"toggleComment\",\n}, {\n  key: linkKeys(code_editor_keys[\"Auto-complete\"]),\n  value: \"autocomplete\",\n}, {\n  key: linkKeys(code_editor_keys[\"Full Screen\"]),\n  value: (cm) => {\n    cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n  },\n}, {\n  key: linkKeys(code_editor_keys[\"Auto-indent\"]),\n  value: \"shiftTabAndUnindentMarkdownList\",\n}, {\n  key: linkKeys(code_editor_keys['Find Current']),\n  value: \"findPersistent\"\n},\n]","pinCode":false,"dname":"97235d31-f69b-4a0a-b06a-123d9c71f8be","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"code_editor_keys = keyMap.code_editor_keys.keys","pinCode":false,"dname":"e475cbb2-bb92-45b7-9ded-f4c208c70591","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"cell_shortcuts_keys = keyMap.cell_shortcuts_keys.keys","pinCode":false,"dname":"3ec4aea6-70af-4680-83d8-c9c533f70cc7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Codemirror = require(\"codemirror@5\")","pinCode":false,"dname":"e9f967e8-7694-4b4e-988c-ad284c97bdf3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"classNames = require(\"classnames\");","pinCode":false,"dname":"c296cbbe-2db2-49b1-a865-1b955e57ec3b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"cypherCodemirror = require(\"cypher-codemirror\")","pinCode":false,"dname":"f48b382b-6f5a-426e-9e6d-2584606a00bb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {linkKeys, keyMap} from '%projects/userGuideProjectId/keyboard-shortcuts/shortcutKey'","pinCode":false,"dname":"fe14ec73-39a9-411a-9030-8310ad470915","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"e47d3d74-3f97-485b-a549-4868ee95a8ec","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"title = (md`# Introducing Visual Dataflow`)","pinCode":false,"dname":"c899c478-7ba4-4d1f-aaea-06cdd3e30e9d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"classicVsNextVisualDataflow","pinCode":false,"dname":"a8a4a7e2-fa5e-4934-acb1-84447c616723","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`When I tried to write my first notebook in Observable, I was intrigued and confused. I knew there was some “magic” going on: things automatically updated when other things changed. The trouble was, which things and which things? I expected some things to automatically update and they didn’t. And I expected other things to stick around like normal, but instead they got wiped away by automatic updates I hadn’t expected. I was fighting the grain of the tool. It took a while to figure out what was going on; only then did Observable become my favorite coding environment.\n\n“Magic” is touted proudly on our homepage (_“Observable is the magic notebook for exploring data and thinking with code”_), but it can also be a pejorative term. We want Observable to be “magic” as in, like, remarkably effective; we don’t want it to be obscure! So, when I started working here in January, I was glad to find this issue already atop our priorities for the new year. We had to make the way code runs self-evident. You can see the first pieces of that now with what we call **Visual Dataflow**. \n\nA notebook is made of cells; those cells can be named; those names can be referenced as variables. When a cell yields a new value, anything that references its name will be re-evaluated. That makes those variables “reactive”, different from normal JavaScript variables. But they used to look the same. Now, we are explicitly showing reactive connections, both in the code editor and in a new minimap.\n\nIf your screen is wide enough, we can demonstrate with this notebook itself. ${!widescreen ? \"(It looks like it’s not, but there are plenty of screenshots below.)\" : \"\"} Let’s define a cell that increments once a second and name it \\`counter\\`:`","pinCode":false,"dname":"e0298f62-72c1-4b1c-b03a-123423810c14","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"counter = {\n  let i = 0;\n  while (true) {\n    await Promises.delay(1000);\n    yield i++;\n  }\n}","pinCode":false,"dname":"8b8f5ee8-4fb0-47e8-bd10-924238387145","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`${await aside(FileAttachment(\"counter-sentence-unfocused.gif\"))}Now look over at the upper right corner ↗ of this page. The little gray dots are the minimap. Mouse over it to expand names, and look for our \\`counter\\`. There it is! The third dot from the top is labeled \\`counter\\`. That represents the third cell in the notebook, the code above. It’s blinking, subtly, each time it runs.\n\nWe can take advantage of reactivity by referencing our \\`counter\\` in another cell:`","pinCode":false,"dname":"7dafcfb4-5b20-4a38-92df-e6a0e63b3037","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"sentence = (`${counter * 1000} milliseconds since you loaded the page.`)","pinCode":false,"dname":"c3c6b697-02f7-42d4-b501-51b3697900d5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`In that code, see how \\`counter\\` has that special blue underline? That means it’s a reference to another cell. If \\`counter\\` changes, the whole cell above will automatically re-evaluate, as you can see by the flash of gray in the left margin and in the minimap every second. The blue-underline cell references can take you to their definitions: press ${key((mac ? `⌘cmd` : `ctrl`) + \" j\")} while the cursor is in the name, or hold ${key(mac ? `⌥opt` : `alt`)} and double-click it.\n\n${await aside(FileAttachment(\"counter-sentence-focused.gif\"))}When your cursor is in the \\`counter\\` cell, look again at the minimap. The circle labeled \\`counter\\` is now highlighted; more importantly, its connections are highlighted. There is a line going out of \\`counter\\` and into \\`sentence\\` like a wire. Data flows from left to right.\n\nWe emphasize left-to-right in the minimap to highlight that data does _not_ necessarily flow top to bottom in a notebook. A definition can easily be below a reference to it; cells will run the same way no matter what order you arrange them in the notebook. This is unlike most programming environments — except for spreadsheets, where reactivity is so natural that nobody talks about it.`","pinCode":false,"dname":"088a1a4e-797a-44de-85c8-8ce20801663e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`To illustrate: the slider below currently has a value of **${slider}**; as you move it, the data flows into _this_ cell, even though it’s _above_ the slider. But if you select either this cell or the slider cell, you can see in the minimap that data is still flowing _left to right_.`","pinCode":false,"dname":"6bbe69dd-e3d4-45b5-aceb-b7e9cb01b7f3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof slider = (html`<input type=\"range\" min=0 max=10 step=1>`)","pinCode":false,"dname":"dcdfd304-60d3-442a-9e16-37da21d7664b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`${await aside(FileAttachment(\"slider-x.gif\"))}This is most satisfying and clarifying when you’re writing the code yourself. Un-comment the reference in the next line and run the cell to see the reference get highlighted and the wire plugged in:`","pinCode":false,"dname":"c866986c-36a9-42e3-862a-990fe8838a96","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"x = (2)","pinCode":false,"dname":"8773bcb7-8327-4646-a517-62cd0926f489","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`The design of the minimap is deliberately restrained: it only lights up when you express the intent to edit by focusing a cell, and it only highlights the directly connected cells. It can’t show you the entire dependency graph at once, although [Mike](https://observablehq.com/@observablehq/notebook-visualizer) and [Tom](https://observablehq.com/@observablehq/notebook-visualizer-elk-edition) have notebooks that can. It’s also not a table of contents of headings in your document, although Mike has a [notebook for that, too](https://observablehq.com/@mbostock/toc). We’re still thinking about that sort of thing, and we have notebooks full of ideas. But first, we wanted something unobtrusive enough that it can sit ambiently in the corner — where a new user can see it without toggling any hidden option, and an experienced user can ignore it in their peripheral vision.`","pinCode":false,"dname":"e1a352dd-0e16-47db-9b29-ed3187b7402b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Though sometimes subtle, the minimap can tell you a lot:\n\n\n</div>\n`","pinCode":false,"dname":"27e50fde-b678-4103-9aef-033878f01bc7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"gifs = (gallery([\n  [\n    FileAttachment(\"Screen Shot 2020-04-10 at 2.47.51 AM.png\"),\n    md`The cell \\`scale\\` is focused; it refers to \\`data\\`, and \\`chart\\` refers to it`\n  ],\n  [\n    FileAttachment(\"rearrange.gif\"),\n    md`Reordering cells does not change inputs or outputs`\n  ],\n  [\n    FileAttachment(\"Screen Shot 2020-03-24 at 12.22.16 AM.png\"),\n    md`This import is used three times in this notebook`\n  ],\n  [\n    FileAttachment(\"Screen Shot 2020-03-24 at 12.40.17 AM.png\"),\n    md`\\`barChart\\` is focused and indirectly depends on \\`data\\``\n  ],\n  [\n    FileAttachment(\"Screen Shot 2020-03-24 at 12.39.51 AM@1.png\"),\n    md`\\`data\\` is focused and indirectly affects \\`barChart\\``\n  ],\n  [\n    FileAttachment(\"Screen Shot 2020-03-24 at 12.23.51 AM.png\"),\n    md`There is a circular definition error`\n  ],\n  [\n    FileAttachment(\"counter-indirect@1.gif\"),\n    md`Every cell to the right re-runs when \\`counter\\` runs`\n  ],\n  [\n    FileAttachment(\"keyframe-chart-update.gif\"),\n    md`This cell is calling \\`chart.update\\` but _won’t_ re-run \\`chart\\``\n  ],\n  [\n    FileAttachment(\"Screen Shot 2020-04-09 at 2.00.52 AM.png\"),\n    md`Cells without names or references appear smaller`\n  ],\n  [\n    FileAttachment(\"Screen Shot 2020-04-09 at 2.08.52 AM.png\"),\n    md`When comparing a fork, changes are marked`\n  ],\n  [\n    FileAttachment(\"visual-mode v2.gif\"),\n    md`Select, move, pin, and delete multiple cells with [keyboard shortcuts](https://observablehq.com/@observablehq/cell-shortcuts)`\n  ],\n  [\n    FileAttachment(\"opt-tab.gif\"),\n    md`You can switch cells with ${key(mac ? \"⌥opt ⇥tab\" : \"alt shift down\")} and ${key(mac ? \"⌥opt ⇧shift ⇥tab\" : \"alt shift up\")}`\n  ]\n]))","pinCode":false,"dname":"7c13d4a0-df05-465f-bb77-c2aaaa17f452","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`This is the result of a design process that involved every person at Observable. [Mike](https://observablehq.com/@mbostock) laid out the challenge and prototyped several ways of wiring cells together; [Toph](https://observablehq.com/@tophtucker) replied with a minimap idea; [Sydney](https://observablehq.com/@sydneypalumbo) focused the design and made it fast; [Dunstan](https://observablehq.com/@dunstan) found the ways it broke; [Jeremy](https://observablehq.com/@jashkenas) made it all work with the compiler. Others gave feedback in design reviews and at our last meetup. Along the way we refined some of our guiding principles, and dropped others. We tried to make it fast, clear, and stable — not comprehensive.\n\nNow we need your help. This work is supposed to help first-time users understand how their code is running, and to help you understand a complex notebook you’re seeing for the first time. If I’d had it when I started using Observable, I think I’d have figured a few things out a lot faster. But you can test that better than we ever could. So look at a [tricky notebook](https://observablehq.com/@d3/bar-chart-race-explained), start [one of your own](https://observablehq.com/new), and join the [forum](https://talk.observablehq.com/t/visual-dataflow/2976).\n\n---`","pinCode":false,"dname":"13c66cdf-40af-47f4-9b0a-e97ba2248b08","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"appendix = (md`## Appendix`)","pinCode":false,"dname":"20949345-6282-4d96-aea1-49ac7678f7f5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mac = (/Mac|iPhone/.test(navigator.platform))","pinCode":false,"dname":"4dab174d-ada3-44dd-a261-705d5ac5169f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"widescreen = (width >= 954)","pinCode":false,"dname":"4e3c8726-e3c5-4e78-9b8b-1da5c2baf931","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"key = (keys => html`${keys.split(\" \").map(key => `<span style=\"\n  font-family: -apple-system, BlinkMacSystemFont, 'avenir next', avenir,\n    helvetica, 'helvetica neue', ubuntu, roboto, noto, 'segoe ui', arial,\n    sans-serif;\n  font-size: 14px;\n  font-weight: 500;\n  box-shadow: 0 0 0 1px #dedede, 1px 1px 0 1px #e8e8e8;\n  margin: 0 4px;\n  min-width: 6px;\n  padding-left: 4px;\n  padding-right: 4px;\n  text-align: center;\n  white-space: nowrap;\n  border-radius: .25rem;\">${key}</span>`).join(\"\")}`)","pinCode":false,"dname":"9b1215b2-58d7-4365-bc98-a769024daba5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"aside = (async file => html`<img src=\"${await file.url()}\" style=\"\n  border: 1px solid #c4c4c4;\n  border-radius: 50%;\n  float: right;\n  width: 100px;\">`)","pinCode":false,"dname":"389bc276-0584-4dd9-a496-b557212ed016","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"gallery = (async items => html`<div style=\"display: flex; flex-wrap: wrap;\">\n  ${await Promise.all(items.map(async ([file, caption]) => html`<div style=\"flex: 200px 0 0; text-align: center; padding: 1em;\">\n    <img src=\"${await file.url()}\" style=\"\n      display: block;\n      margin: 0 auto;\n      border: 1px solid #c4c4c4;\n      border-radius: 50%; \n      width: 120px;\"/>\n    ${caption}\n  </div>`))}\n</div>`)","pinCode":false,"dname":"3ca0130d-bfa9-4d09-a35d-e796a033a831","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { classicVsNextVisualDataflow }  from 'introducing-visual-dataflow/classic-vs-next-infobox'","pinCode":false,"dname":"dd44db9d-65d5-4888-ae6f-51a42f10e2ac","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Introduction to HTML\n\nIn the [Introduction to Code](/@observablehq/introduction-to-code), we looked at cells that return data structures such as numbers, strings, arrays and objects. But what if we want text that includes some dynamic or reactive elements? For example, a sentence that displays a different random number each time it is clicked, or that shows the current time?\n`","pinCode":false,"dname":"28c8ac99-8401-4e05-a436-ca058ffd3960","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Tasks such as this involve the Document Object Model, or DOM for short. The DOM represents the structure of a Web page in memory, and provides an interface to that Web page so that the Web page elements can be manipulated by a scripting language such as JavaScript (and thus by Observable).`","pinCode":false,"dname":"e48daf05-c058-439c-8312-3b3a4ebe374f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md `\n|||Note on the DOM |\n| --- |--- | --- |\n|||A full explanation of the Document Object Model is beyond the scope of this document. To learn more about the DOM and the DOM API, see the MDN pages [Introduction to the DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction) and [Document Object Model (DOM)](https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model).|\n`","pinCode":false,"dname":"2f3b4655-7a05-4f84-8e48-70e99fc786df","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`For example, the following cell uses the W3C DOM API directly to create a *paragraph* element:`","pinCode":false,"dname":"e35ba9cf-b464-4bff-af38-6d3184fcd0bc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const p = document.createElement(\"p\");\n  p.appendChild(document.createTextNode(\"I am a \"));\n  p.appendChild(document.createElement(\"i\")).appendChild(document.createTextNode(\"paragraph\"));\n  p.appendChild(document.createTextNode(\" element, created using the W3C DOM API.\"));\n  return p;\n}","pinCode":false,"dname":"0020e63e-9352-460a-8bc6-0a40b45077b5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can see from this example that the W3C DOM API is quite verbose. Observable offers several alternatives to the DOM API when it comes to paragraph elements.`","pinCode":false,"dname":"ac5673d9-b556-4f9b-ac2b-9b0ca4ceaa4f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`**Creating elements using the HTML [tagged template literal](http://exploringjs.com/es6/ch_template-literals.html#_tagged-template-literals)**. This returns a DOM element, which is displayed as is:`","pinCode":false,"dname":"7c96af06-4500-4d85-b6d6-0ffd8f3d1470","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<p>I am a <i>paragraph</i> element, created using Observable's HTML tagged template literal!</p>`","pinCode":false,"dname":"4a045406-a841-4fbe-8708-04ece85ca5cc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`**Creating elements with Markdown in a JavaScript cell**:`","pinCode":false,"dname":"37b0a48b-712e-4f34-beea-5314a5839f3e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`I, too, am a *paragraph* element, created using Markdown in a JavaScript cell.`","pinCode":false,"dname":"bc5b3da2-04f6-445c-84e1-a7fd2702c5cb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`**Creating elements using the Markdown [cell mode](https://observablehq.com/@observablehq/cell-modes)**:`","pinCode":false,"dname":"9f1e8310-8128-4952-be89-04157ad6c2b4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`I am a *paragraph* element created using the Markdown cell mode (note the different icon in the left margin of the shaded cell).`","pinCode":false,"dname":"7c25c4a6-39ca-416c-9bb9-e0b582c3323c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`(Markdown supports a variety of styles and structural elements, such as lists and tables. See the [Markdown quick reference](https://observablehq.com/@observablehq/markdown-quick-reference) for more.) \n`","pinCode":false,"dname":"63270e9e-729c-42ff-a445-1ad332f3ff68","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Writing Dynamic Expressions in Markdown and HTML\nCreating Markdown and HTML cells as shown earlier allows you to make the cells **dynamic**: you can embed expressions \\\\\\`\\${…}\\\\\\` that are not fixed but are evaluated when the cells are evaluated. For example, the following example shows a sentence that uses an embedded expression to call \\`Math.random()\\` to generate a random number each time the cell's Play button is clicked.`","pinCode":false,"dname":"50fa1a14-e49a-4d63-91bd-d9d6fd2a618b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`My favorite number is ${Math.random() * 100 | 0}.`","pinCode":false,"dname":"bd4b1105-14a1-4445-9898-b379d7958fb2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`A similar example:`","pinCode":false,"dname":"3f334519-e110-4888-9d28-cef1fa2c59c6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Lee ate ${Math.random() * 100 | 0} doughnut(s) and now regrets it.`","pinCode":false,"dname":"4a607e0a-ca63-4875-b4b7-4c7da1e6d2a9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`And of course, the cells can be **reactive**, too! The \\`now\\` built-in from the Observable [standard library](/@observablehq/standard-library) is a reactive variable whose value is the current time. So, embedding a reference to \\`now\\` causes the Markdown to re-evaluate continuously:`","pinCode":false,"dname":"43769a8f-0bf2-462a-8faf-a62c3874b6bb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`The current time is ${new Date(now).toLocaleTimeString()}.`","pinCode":false,"dname":"5d188c9d-ccaf-4990-802c-8dc9dd05e878","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Embedding Charts`","pinCode":false,"dname":"1dae2e4f-03d0-49a7-933e-bf5fb9234e13","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Embedded expressions can also be DOM nodes, which means you can embed dynamic content, such as little charts in SVG or mathematical notation in LaTeX, within Markdown.`","pinCode":false,"dname":"def103b1-b678-4c86-b81a-f892d4919104","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`I like Markdown for prose, but ${tex`\\KaTeX`} for math.`","pinCode":false,"dname":"4b3653a2-554a-4c13-823c-6d05e734ddc5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`A sparkline ${sparkline([0, 8, 3, 2, 6, 5, 1])} is a chart inline with prose.`","pinCode":false,"dname":"dd58599e-ffe0-4905-a2bd-38d95ae306ab","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"sparkline = (function sparkline(values, width = 64, height = 17) {\n  const x = d3.scaleLinear().domain([0, values.length - 1]).range([0.5, width - 0.5]);\n  const y = d3.scaleLinear().domain(d3.extent(values)).range([height - 0.5, 0.5]);\n  const context = DOM.context2d(width, height);\n  const line = d3.line().x((d, i) => x(i)).y(y).context(context);\n  context.beginPath(), line(values), context.stroke();\n  return context.canvas;\n})","pinCode":false,"dname":"dccdb44d-0c2c-4857-9184-c197f1077f0b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can manipulate DOM generated from Markdown with JavaScript, to mix dynamic and static content. The text below cycles through D3’s rainbow scheme.`","pinCode":false,"dname":"92a2519d-4a93-44ce-b714-68f0a2529443","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const p = md`Less-angry rainbows are the *best* rainbows.`;\n  p.style.color = d3.interpolateRainbow(now / 3000);\n  return p;\n}","pinCode":false,"dname":"e034817a-def8-4857-a407-08d2c8663352","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Creating Dynamic Content with Canvas`","pinCode":false,"dname":"2fc173c0-3563-4f4f-bd9f-1be6d51a1499","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Another common type of dynamic content is Canvas. The standard library method \\`DOM.context2d\\` returns a \\`CanvasRenderingContext2D\\` of the specified width and height (and automatic scaling for high-resolution displays). Draw to the context, and then return the canvas to display it.`","pinCode":false,"dname":"b4bbc36e-d92d-4727-a9b4-ce711fa2b96e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const context = DOM.context2d(128, 128);\n  for (let radius = 8; radius < 128; radius += 8) {\n    context.beginPath();\n    context.arc(0, 0, radius, 0, 2 * Math.PI);\n    context.stroke();\n  }\n  return context.canvas;\n}","pinCode":false,"dname":"db3cda55-3bee-45d6-8041-c5f511a9cad5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Or, use the HTML tagged template literal and an SVG element:`","pinCode":false,"dname":"31ce6a8a-89c4-4358-81cf-f7298aac0efb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<svg width=\"128\" height=\"128\" fill=\"none\" stroke=\"black\">${\n  d3.range(8, 128, 8).map(radius => `<circle r=\"${radius}\"></circle>`)\n}</svg>`","pinCode":false,"dname":"882441f8-2fb6-4235-b988-2d877019718a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Using Helper Libraries to Create Dynamic Content`","pinCode":false,"dname":"3cdd3756-8d92-4588-adc3-64c8cbedaeda","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Often you’ll use a helper library such as [D3](https://d3js.org) to generate dynamic content. Third-party libraries are covered in more detail in [Standard Library](https://observablehq.com/@observablehq/stdlib?collection=@observablehq/libraries) and [Recommended Libraries](https://observablehq.com/@observablehq/recommended-libraries?collection=@observablehq/libraries), but here’s a quick example generating colorful concentric circles in SVG.`","pinCode":false,"dname":"13f7f7e9-9e86-4714-b293-c6393cdbff1b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"d3 = (require(\"d3@5\"))","pinCode":false,"dname":"5ecfab94-e63b-4425-a8ef-2758bb84f1b8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  // Create a square <svg> 128px by 128px.\n  const svg = d3.create(\"svg\").attr(\"width\", 128).attr(\"height\", 128);\n\n  // Compute various radii 128, 120, 112, 104 etc.\n  const radii = d3.range(128, 0, -8);\n  \n  // Create a sequential color scale (dark for small radii, bright for large).\n  const color = d3.scaleSequential(d3.interpolateViridis).domain([0, 128]);\n  \n  // Use D3’s data join to create circles.\n  const circle = svg\n    .selectAll(\"circle\")\n    .data(radii)\n    .join(\"circle\")\n      .attr(\"fill\", radius => color(radius))\n      .attr(\"r\", radius => radius);\n  \n  return svg.node();\n}","pinCode":false,"dname":"418ee564-5d11-458d-928c-3cc97058ddd6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Or, more succinctly as a single expression:`","pinCode":false,"dname":"e369afb5-2ada-4f9f-8584-8d0e9f1570f5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"d3.create(\"svg\")\n    .attr(\"width\", 128)\n    .attr(\"height\", 128)\n  .call(svg => svg.selectAll(\"circle\")\n    .data(d3.range(128, 0, -8))\n    .join(\"circle\")\n      .attr(\"fill\", d3.scaleSequential(d3.interpolateViridis).domain([0, 128]))\n      .attr(\"r\", d => d))\n  .node()","pinCode":false,"dname":"ea0325fa-8556-457e-a04b-00e9c3d7ec1a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Using Template Literals`","pinCode":false,"dname":"b233e0fb-6e15-457d-a07f-e17e9bc3ec4d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`If your DOM is defined purely as a function of data—that is, if you don’t need D3’s data join to update and exit nodes, and instead you just create the DOM from scratch every time—then usually it’s simpler to stick with template literals. There’s an \\`svg\\` tagged template literal in the standard library that is useful for composing SVG fragments.`","pinCode":false,"dname":"562413a4-bc9e-48ef-bf2b-adf71afcf766","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const fill = d3.scaleSequential(d3.interpolateViridis).domain([0, 128]);\n  return html`<svg width=\"128\" height=\"128\">${\n  d3.range(128, 0, -8).map(r => svg`<circle r=\"${r}\" fill=\"${fill(r)}\"></circle>`)\n}</svg>`;\n}","pinCode":false,"dname":"a97b8f57-3642-464e-aace-0c46a3515a76","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Writing Math Formulae with ${tex`\\KaTeX`}`","pinCode":false,"dname":"bf04d84d-3cd4-4062-82ee-b7d8e62667c2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`For the mathematically inclined, you can write ${tex`\\KaTeX`}, either inline or as blocks:`","pinCode":false,"dname":"482d330f-722e-4090-b4e5-eee21b7d1254","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"tex`E = mc^2`","pinCode":false,"dname":"fc954319-4906-491e-8c6d-c62942d4d073","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"tex.block`\\Delta E^*_{00} = \\sqrt{\n  \\Big(\\frac{\\Delta L'}{k_LS_L}\\Big)^2 +\n  \\Big(\\frac{\\Delta C'}{k_CS_C}\\Big)^2 +\n  \\Big(\\frac{\\Delta H'}{k_HS_H}\\Big)^2 +\n  R_T\n  \\frac{\\Delta C'}{k_CS_C}\n  \\frac{\\Delta H'}{k_HS_H}\n}`","pinCode":false,"dname":"0b0d616a-94af-4032-bba7-2c172c3fadf6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`As with any cell, you can give a cell that returns a DOM element a name:`","pinCode":false,"dname":"b8a12818-c589-41fe-88e5-ea2c485b4117","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"slider = (html`<input type=range>`)","pinCode":false,"dname":"7f08df65-89f1-421e-976c-8e35b8e6014d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`And you can read properties of a DOM element defined in another cell:`","pinCode":false,"dname":"b238605d-315d-4e1a-a100-2b1bfe630b18","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"slider.type","pinCode":false,"dname":"bc653b9f-e39f-43a7-bd48-6e5ecebe97ea","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"slider.value","pinCode":false,"dname":"8e4c1f18-2c67-48c9-b751-2d6764896965","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`But note that properties of a DOM element are *not* automatically reactive: a cell that references *slider*.value won’t be re-evaluated automatically when the slider changes. DOM elements are mutable, so be careful when referencing an element defined in another cell, and you should usually avoid mutating elements defined in other cells.\n\nTo react to an input element’s changing value, use \\`viewof\\`:`","pinCode":false,"dname":"121a7af1-7e30-4011-927a-c3dc2b7db959","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof value = (html`<input type=range>`)","pinCode":false,"dname":"f776cd1c-774c-412a-a51b-7675b5b199b7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"value","pinCode":false,"dname":"2050f75f-406e-43f4-bca1-3ab2fc469750","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`For more information about \\`viewof\\`, see [Introduction to Views](https://observablehq.com/@observablehq/introduction-to-views).`","pinCode":false,"dname":"ac991748-2adf-40ed-8953-e6db52042b1f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Changing Styles Globally with CSS`","pinCode":false,"dname":"0454bd33-dd62-419e-96ff-6ecb6e965d9d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Cells share the same iframe, so you can use CSS to change styles globally.`","pinCode":false,"dname":"8f009a56-da53-4ead-8ad7-41a2c0f60fa0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<style> .highlight { background: yellow; } </style>`","pinCode":false,"dname":"0b8e5f7e-3e6f-432b-a07c-7cc8b752ec71","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<p class=\"highlight\">I am a highlighted paragraph.</p>`","pinCode":false,"dname":"86640fe8-1ffc-444e-94c1-75491de26076","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Use caution when applying global styles: if a style affects a cell’s height, the runtime may not notice unless the affected cell is re-evaluated. For example, if you edit the *highlight* cell above to have a font-size of 128px, the highlighted paragraph immediately gets bigger but the following cells aren’t repositioned. Likewise, avoid [floats](https://developer.mozilla.org/docs/Learn/CSS/CSS_layout/Floats) or remember to clear them! (You can explicitly tell the runtime to recompute cell heights by dispatching a *load* event, but it shouldn’t be necessary in most cases.)`","pinCode":false,"dname":"f2e78e16-1ac1-4601-be4c-751049db663c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Accessing DOM Elements Displayed Elsewhere`","pinCode":false,"dname":"5d9db4fa-fa8d-41e0-882c-b71c4d8be583","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`A cell can return a DOM element that’s already being displayed somewhere else on the page. In this case, the value inspector is used, rather than showing the element inline.`","pinCode":false,"dname":"360e1735-36ee-443d-8a74-c64dd1b69134","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"slider","pinCode":false,"dname":"e2a6cd6a-7e28-4a59-9075-be6dbeedd49b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`While this only gives a cursory overview of the type of content you can use in Observable, hopefully it gives a sense of the panoply of options afforded by the modern Web.`","pinCode":false,"dname":"bbd9c475-ffc6-4fc0-a4c6-c96a35ad7b77","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Nonlinear Slider\n\n<p style=\"background: #fffced; box-sizing: border-box; padding: 10px 20px;\">***Update Feb. 2021:*** *Observable now provides a [**Range input**](/@observablehq/input-range) with a configurable transform! This notebook will remain for history, but I recommend upgrading to [Observable Inputs](/@observablehq/inputs).*</p>\n\nInspired by Matthew Conlenâ€™s [Idyll post](https://mathisonian.github.io/idyll/nonlinear-sliders/).`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"transform = {\n  const transform = x => x * x; // from nonlinear to linear\n  transform.invert = x => Math.sqrt(x); // from linear to nonlinear\n  return transform;\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`As two linked sliders, one nonlinear and the other linear:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof x = {\n  const form = html`<form>\n  <div><input name=s type=range min=0 max=1 step=any> ${tex`\\sqrt{x}`}</div>\n  <div><input name=l type=range min=0 max=1 step=any> ${tex`x`}</div>\n</form>`;\n  form.s.value = transform.invert(form.value = form.l.value = 0.5);\n  form.s.oninput = () => form.l.value = form.value = transform(form.s.valueAsNumber);\n  form.l.oninput = () => form.s.value = transform.invert(form.value = form.l.valueAsNumber);\n  return form;\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"x","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`As a standlone nonlinear slider:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof y = {\n  const form = html`<form><input name=i min=0 max=1 step=any type=range>`\n  form.i.value = transform.invert(form.value = 0.5);\n  form.i.oninput = () => form.value = transform(form.i.valueAsNumber);\n  return form;\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"y","pinCode":false}}}],"version":"2.19.1"}
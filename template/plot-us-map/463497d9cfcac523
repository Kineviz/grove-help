{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# U.S. Geographic Data\n## Commonly used contextual data for geographic visualizations.\nAn attempt to catalogue and prepare a number of useful datasets that are commonly used for mapping data visualizations of the United States. The goal is to be able to easily import or download relevant datasets as well as trace their provenance back to the source.\n\nIn many cases it will be useful to processes data and cache it as a file attachment for performance reasons. We will always link back to the source of the data as well as capture as much of the processing code in this notebook as possible.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`**Visual Table of Contents**\n\n\n${visualtoc([\n  {\n    label: 'Counties',\n    link: '#counties',\n    src: await FileAttachment(\"countyExample.png\").url(),\n  },\n  {\n    label: 'States',\n    link: '#states',\n    src: await FileAttachment(\"stateExample.png\").url(),\n  },\n  {\n    label: 'Nation',\n    link: '#nation',\n    src: await FileAttachment(\"nationExample.png\").url(),\n  },\n  {\n    label: 'County Population',\n    link: '#census-api-population',\n    src: await FileAttachment(\"countyPopulationExample@1.png\").url(),\n  },\n  {\n    label: 'Census Demographics',\n    link: '#census-api-acs-demographics',\n    src: await FileAttachment(\"countyACSExample@1.png\").url(),\n  },\n  {\n    label: 'Cumulative COVID-19 Cases',\n    link: '#cumulative-covid-19-cases',\n    src: await FileAttachment(\"cumulativeCovidExample@1.png\").url(),\n  },\n  {\n    label: 'Cities',\n    link: '#u-s-cities',\n    src: await FileAttachment(\"cityExample.png\").url(),\n  },\n \n])}\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Geographic Boundaries`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### U.S. Atlas\nThe [us-atlas npm package](https://www.npmjs.com/package/us-atlas) provides a convenient redistribution of the [Census Bureau’s cartographic boundary shapefiles, 2017 edition](http://www.census.gov/) as TopoJSON. \n\n\\`\\`\\`js\nimport {us} from \"@observablehq/us-county-datasets\"\n\\`\\`\\`\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Plot.plot({\n  projection: \"albers-usa\",\n  width: exampleWidth,\n  height: exampleHeight,\n  marks: [\n    Plot.frame({stroke: \"white\", fill: \"#111\"}),\n    Plot.geo(nation, {stroke: \"#fff\", strokeWidth: 0.35})\n  ]\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"us = (d3.json(\"https://unpkg.com/us-atlas@3/counties-10m.json\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"nation = (topojson.feature(us, us.objects.nation))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n### Counties\n\n\\`\\`\\`js\nimport {countyShapes} from \"@observablehq/us-county-datasets\"\n\\`\\`\\`\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Plot.plot({\n  projection: \"albers-usa\",\n  width: exampleWidth,\n  height: exampleHeight,\n  marks: [\n    Plot.frame({ stroke: \"white\", fill: \"#111\" }),\n    Plot.geo(countyShapes, { stroke: \"#fff\", strokeWidth: 0.35 })\n  ]\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"countyShapes = (topojson.feature(us, us.objects.counties))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`The id of each County feature is it's [FIPS code](https://en.wikipedia.org/wiki/FIPS_county_code). The first two numbers identify which state it is in, and the last three numbers uniquely identify that county within the state.\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"fipsByName = (new Map(\n  countyShapes.features.map((d) => {\n    const state = statesByFips.get(d.id.slice(0, 2)).name;\n    const county = d.properties.name;\n    const name = county + \", \" + usStateCodes.getStateCodeByStateName(state);\n    return [name, d.id];\n  })\n))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"nameByFips = (new Map(Array.from(fipsByName, ([name, fips]) => [fips, name])))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`We can reshape our county and state data to make it easy to filter by FIPS, state or county name.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"countyStates = (countyShapes.features.map((d) => {\n  const state = statesByFips.get(d.id.slice(0, 2)).name;\n  const stateCode = usStateCodes.getStateCodeByStateName(state);\n  const county = d.properties.name;\n  const name = `${county}, ${stateCode}`;\n  return {fips: d.id, state, stateCode, county, name};\n}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"countyStates.filter(d => d.stateCode === \"MD\").sort((a, b) => a.county.localeCompare(b.county))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n### States\n\n\\`\\`\\`js\nimport {stateShapes} from \"@observablehq/us-county-datasets\"\n\\`\\`\\`\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Plot.plot({\n  projection: \"albers-usa\",\n  width: exampleWidth,\n  height: exampleHeight,\n  marks: [\n    Plot.frame({stroke: \"white\", fill: \"#111\"}),\n    Plot.geo(stateShapes, {stroke: \"#fff\", strokeWidth: 0.35})\n  ]\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"usStateCodes = (import('https://cdn.skypack.dev/us-state-codes@1.1.2?min').then(d => d.default))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"stateShapes = (topojson.feature(us, us.objects.states))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"statesByFips = (new Map(Array.from(us.objects.states.geometries, d => [d.id, d.properties])))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"statesMesh = (topojson.mesh(us, us.objects.states, (a, b) => a !== b))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### U.S. Cities\nThis dataset of U.S. cities comes from [Natural Earth Populated Places](https://www.naturalearthdata.com/downloads/10m-cultural-vectors/10m-populated-places/). We download the zip file and upload it into [Mapshaper](https://mapshaper.org/) then export it as CSV where we upload as a file attachment to this notebook and do a little more post-processing.\n\n\\`\\`\\`js\nimport {usCities} from \"@observablehq/us-county-datasets\"\n\\`\\`\\`\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Plot.plot({\n  projection: \"albers-usa\",\n  width: exampleWidth,\n  height: exampleHeight,\n  marks: [\n    Plot.frame({stroke: \"white\", fill: \"#111\"}),\n    Plot.dot(usCities, {x: \"longitude\", y: \"latitude\", fill: \"#fff\", r: 1})\n  ]\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"usCities = ((await FileAttachment(\"ne_10m_populated_places.csv\").csv())\n  .filter((d) => d[\"ADM0NAME\"] === \"United States of America\")\n  .map((d) => ({\n    name: d.NAME,\n    state: d.ADM1NAME,\n    population: +d.POP_MAX,\n    latitude: +d.LATITUDE,\n    longitude: +d.LONGITUDE\n  })))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Exporting the same data as a GeoJSON collection for tools that expect this format, such as D3’s geoPath or Plot’s geo mark.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"usCitiesGeo = ({\n  type: \"FeatureCollection\",\n  features: usCities.map(\n    ({ longitude, latitude, ...properties }) => ({\n      type: \"Feature\",\n      id: properties.name,\n      properties,\n      geometry: { type: \"Point\", coordinates: [longitude, latitude] }\n    })\n  )\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Population and Demographics\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Census API: Population\n\n\\`\\`\\`js\nimport {populationByCounty} from \"@observablehq/us-county-datasets\"\n\\`\\`\\`\n\nThe \\`populationByCounty\\` cell is a Map which returns the population for a given FIPS code.\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const f3 = d3.format(\",.3r\");\n  const f1 = d3.format(\".1s\");\n  return Plot.plot({\n    projection: \"albers-usa\",\n    width: exampleWidth,\n    height: exampleHeight,\n    marks: [\n      Plot.frame({ fill: \"#111\" }),\n      Plot.geo(countyShapes, {\n        stroke: \"none\",\n        strokeWidth: 0.35,\n        fill: (d) => density(d),\n        title: (d) => `${d.id}: ${f3(density(d))} hab/km²`\n      })\n    ],\n    color: {\n      scheme: \"ylgnbu\",\n      domain: [0.2, 20000],\n      type: \"log\",\n      legend: true,\n      label: \"population density (hab/km²)\",\n      ticks: 4,\n      tickFormat: (d) => (d < 1 ? \"≤1\" : f1(d))\n    }\n  });\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"populationByCounty = (new Map(Array.from(populationData, ({ POP, state, county }) => [`${state}${county}`, +POP])))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`We want to make sure to color by population density, not just population, otherwise we are misrepresenting the data.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"density = (function density(d) {\n  const population = populationByCounty.get(d.id);\n  const area = d3.geoArea(d) * (510e6 / (4 * Math.PI)); // km²\n  return population / area;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof useCache = (Inputs.toggle({label: \"Use cache\", value: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"populationData = (useCache\n  ? FileAttachment(\"populationData.csv\").csv() // cache of the API call from October 2020\n\n  // or load the data from the census API, and tweak its format\n  : d3.json(\"https://api.census.gov/data/2018/pep/population?get=POP&for=county:*\").then(rows => {\n    const keys = rows.shift();\n    return Array.from(rows, row => Object.fromEntries(keys.map((key, i) => [key, row[i]])));\n  }))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n### Census API: ACS Demographics\nThe [American Community Survey](https://www.census.gov/data/developers/data-sets/acs-5year.html) can give us estimates about the make-up of populations across the country. We download a selected set of fields from the API, you can find a detailed list of [all the available fields here](https://api.census.gov/data/2018/acs/acs5/variables.html).\n\n\\`\\`\\`js\nimport { demographicsData, selectedFields, niceLabel } from \"@observablehq/us-county-datasets\"\n\\`\\`\\`\n\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Plot.plot({\n  projection: \"albers-usa\",\n  width: exampleWidth,\n  height: exampleHeight,\n  marks: [\n    Plot.frame({fill: \"#111\"}),\n    Plot.geo(countyShapes, {\n      stroke: \"#fff\",\n      strokeWidth: 0.35,\n      title: \"id\",\n      // note: some of the values are marked as negative\n      fill: d => Math.max(0, (demographicsData[2018].get(d.id)?.[field] / populationByCounty.get(d.id)))\n    })\n  ],\n  color: { scheme: \"purples\", type: \"log\" }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof field = (Inputs.select(\n  new Map(Array.from(selectedFields, (f) => [`${f} ${niceLabel(f)}`, f])),\n  { value: selectedFields[4] }\n))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"demographicsData = ({\n  2018: new Map(demographicsData2018.map(processDemographics).map(d => [`${d.state}${d.county}`, d])),\n  2016: new Map(demographicsData2016.map(processDemographics).map(d => [`${d.state}${d.county}`, d])),\n  2014: new Map(demographicsData2014.map(processDemographics).map(d => [`${d.state}${d.county}`, d])),\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Expand the following cell's code to see a commented list of fields selected from the Census API`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"selectedFields = ([\n  \"B01003_001E\", // estimated total population\n  \n  // Sex demographics\n  // https://api.census.gov/data/2018/acs/acs5/groups/B01001.html\n  \"B01001_002E\", // Total Male\n  // TODO: age breakdowns for male\n  \"B01001_026E\", // Total Female\n  // TODO: age breakdowns for female\n  \n  // Racial demographics\n  // https://api.census.gov/data/2018/acs/acs5/groups/B02001.html\n  \"B02001_002E\", // White (includes Hispanic or Latino?)\n  \"B02001_003E\", // Black or African American\n  \"B02001_004E\", // American Indian or Alaskan Native\n  \"B02001_005E\", // Asian\n  \"B02001_006E\", // Native Hawaiian or Pacific Islander\n  \"B02001_007E\", // Some other race\n  \"B02001_008E\", // Two or more races\n  \"B02001_009E\", // Two or more races (one is some other)\n  \"B02001_010E\", // Three or more races\n  \n  // Hispanic or Latino Origin\n  // https://api.census.gov/data/2018/acs/acs5/groups/B03003.html\n  // \"B03003_001E\", // Total \n  \"B03003_002E\", // not Hispanic or Latino\n  \"B03003_003E\", // Hispanic or Latino\n    \n  // GINI index of inequality\n  // https://api.census.gov/data/2018/acs/acs5/groups/B19083.html\n  \"B19083_001E\", // gini index\n  \n  // Per-capita income in last 12 months (inflation adjusted for that year)\n  \"B19301_001E\",  // All races\n  \"B19301A_001E\", // White\n  \"B19301H_001E\", // White (not hispanic)\n  \"B19301I_001E\", // Hispanic or Latino\n  \"B19301B_001E\", // Black or African American\n  \"B19301C_001E\", // American Indian or Alaskan Native\n  \"B19301D_001E\", // Asian\n  \"B19301E_001E\", // Native Hawaiian or Pacific Islander\n  \"B19301F_001E\", // Some other race\n  \"B19301G_001E\", // Two or more races\n  \n])","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"niceKeys = (selectedFields.map(niceLabel))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"selectedKeys = (selectedFields.map(key => {\n  return demographicsKeysFile.variables[key]\n}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"demographicsData2018 = (FileAttachment(\"demographicsData2018.csv\").csv({typed: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"demographicsData2016 = (FileAttachment(\"demographicsDataApi2016.csv\").csv({typed: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"demographicsData2014 = (FileAttachment(\"demographicsDataApi2014.csv\").csv({typed: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"demographicsKeysFile = (FileAttachment(\"demographicsKeys.json\").json())","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`We deal with null data and the Census -666666 by just setting the value to -1. Since none of these values should be negative, it simplifies both immediately looking at the data as well as eventual post-processing to call out missing data.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"processDemographics = (({ ...d }) => {\n  d.state = String(d.state).padStart(2, \"0\");\n  d.county = String(d.county).padStart(3, \"0\");\n  for (const key of selectedFields) if (!d[key] || d[key] < 0) d[key] = -1;\n  return d;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`This helper function writes the labels in a more human-interpretable version.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"niceLabel = ((key) => {\n  const moe = key.slice(key.length - 1) == \"M\";\n  // if its a margin of error field, we don't have it in the lookup so we us the E(stimate) field instead\n  const d = demographicsKeysFile.variables[moe ? key.replace(/M$/, \"E\") : key];\n  const niceLabel = d.label\n    .split(\"!!\")\n    .filter((d) => d !== \"Estimate\" && d !== \"Total\" && d.indexOf(\"Per capita\") !== 0)\n    .join(\" \");\n  const niceConcept = `${moe ? \"Margin of error: \" : \"\"}${d.concept.toLowerCase()}`;\n  return niceLabel ? `${niceConcept}: ${niceLabel.toLowerCase()}` : niceConcept;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`\n---\n### Cumulative COVID-19 cases\n*Source: [The New York Times](https://www.nytimes.com/article/coronavirus-county-data-us.html) *\n\n\\`\\`\\`js\nlet date = \"2021-12-31\"\nimport { nytOnDateByCounty, nytByDay } with { date as nytDate } from \"@observablehq/us-county-datasets\"\n\\`\\`\\`\n\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Plot.plot({\n  projection: \"albers-usa\",\n  width: exampleWidth,\n  height: exampleHeight,\n  marks: [\n    Plot.frame({ stroke: \"white\", fill: \"#111\" }),\n    Plot.geo(countyShapes, {\n      stroke: \"#fff\",\n      strokeWidth: 0.35,\n      fill: (d) => (nytOnDateByCounty.get(d.id)?.cases ?? 0) / populationByCounty.get(d.id)\n    })\n  ],\n  color: {scheme: \"oranges\"}\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"nytStartDate = (new Date(\"2020-01-22\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"nytDate = (\"2021-12-31\")","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"nytOnDateByCounty = (new Map(Array.from(nytOnDate, d => [d.fips, d])))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"import { rawData as nytData } with { nytStartDate as startDate } from 'template/plot-us-map/30d921010e91f02f'","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"nytByDay = (d3.group(nytData, d => d.date))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"nytOnDate = (nytByDay.get(nytDate))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Appendix`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"exampleWidth = (300)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"exampleHeight = (200)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"visualtoc = (function visualtoc(links) {\n  const id = DOM.uid().id;\n  const style = html`<style>\n#${id} {display:flex;flex-wrap:wrap}\n#${id} div {flex:0 1 300px; overflow:hidden;margin:0 15px 15px 0}\n#${id} a {color:#1c1c1c;font:600 14px var(--sans-serif)}\n#${id} a:hover {text-decoration:none; color:#3b5fc0}\n#${id} img {max-width:100%;width:250px;border:1px solid #e8e8e8;box-sizing:border-box;border-radius:.25rem}\n#${id} span {display:block;padding:3px 10px 10px}\n  `;\n  const cards = links.map(({link = null, label = link, src = ''}) => {\n    // entries.push(Object.assign(\n    //   html`<li><a href=#${h.id}>${DOM.text(h.textContent)}`,\n    //   {onclick: e => (e.preventDefault(), h.scrollIntoView())}\n    // ));\n    let h = document.querySelector(link)\n    console.log(\"h\", h, link)\n    let l = html`<div><a${!link?'':` href=\"${link}\"`}><img src=\"${src}\"><span>${DOM.text(label)}`\n    let entry = Object.assign(l, {onclick: e => (e.preventDefault(), h.scrollIntoView())})\n    return entry\n  });\n  return html`<div id=${id}>${cards}${style}`;\n})","pinCode":false}}}],"version":"2.19.1"}
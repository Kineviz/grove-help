{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"# Quick Start\n**Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.**\n#### You will learn\n- <a href=\"#how-to-using-template-code\">How to using template code</a>\n- <a href=\"#creating-and-nesting-components\">How to create and nest components</a>\n- <a href=\"#writing-markup-with-jsx\">How to add markup and styles</a>\n- <a href=\"#displaying-data\">How to display data</a>\n- <a href=\"#conditional-rendering\">How to render conditions and lists</a>\n- <a href=\"#responding-to-events\">How to respond to events and update the screen</a>\n- <a href=\"#sharing-data-between-components\">How to share data between components</a>","pinCode":false,"dname":"d87538e6-201c-4a71-b581-8f70a1c1d305","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"### How to using template code\nWhen insert a cell in Grove, you can type 'react' to filter the template cells:\n${await FileAttachment(\"filter react.png\").image()}\nThen select a item to insert the cell. React component is to create a component. React render is to render the UI. The others is some examples of app that using Ant Design UI component.","pinCode":false,"dname":"51510d20-342b-413a-9b31-6a30edb7daf5","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof button = render(({ useSetter }) => {\n    const { Button } = Antd;\n    const [step_number, setStep_number] = useState(1);\n    const update_step_number = (d) => setStep_number(step_number+1);\n    useSetter({ step_number });\n    return jsx`<${Button} key='1d7c7c39-4bf6-4499-8d20-b4d174473d2d' onClick=${update_step_number}  >Click Me</${Button}> `;\n})","pinCode":true,"dname":"136d9e3e-262e-438e-b4e5-e955ee3a96c0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":true,"dname":"78c83249-5aa8-4515-b92b-c959e58c61fa","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Now I insert a React Button and it can be render. And also insert a import module cell that react app needed. In default, the code is 'javascript' format, we can switch it to react markup format to click the language mode button.\n${ await FileAttachment(\"switch language mode.png\").image()}\nAnd the code format will be more clearly.","pinCode":false,"dname":"a42f9384-1458-46c5-84b4-5a1331d8652f","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"### Creating and nesting components\nReact apps are made out of components. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.\n\nReact components are JavaScript functions that return markup:","pinCode":false,"dname":"625d70b4-c987-4da6-8c44-0fab97504a58","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"MyButton2 = component(({ }) => {\n    return <button>I'm a button</button>;\n})","pinCode":true,"dname":"08663b3d-12a8-4093-9411-cfaa6422ee11","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"Now that you’ve declared MyButton2, you can nest it into another component:","pinCode":false,"dname":"c85102c7-c470-4395-a475-37e208baa27e","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"MyApp2 = component(({ }) => {\n    return <div>\n      <h1>Welcome to my app</h1>\n      <MyButton2 />\n    </div>;\n})","pinCode":true,"dname":"b6ff4429-1dd1-4a08-9c3f-a75bf67858fa","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"Notice that <MyButton2 /> starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.\n\nHave a look at the result:","pinCode":false,"dname":"2f04fc36-14a9-4b87-a37c-957291ac8c8c","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    return <MyApp2 key=\"key1\"/>;\n})","pinCode":true,"dname":"441a0f66-f276-4a49-97d2-e7038a4dfae0","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"The render function call specify the main component. Notice that 'return' result markup need set a 'key' to render multiple react app with same code.","pinCode":true,"dname":"9be3935a-a96e-4ccb-bab1-bba2d20c24aa","codeMode":"markdown","pos":39,"loc":{"line":2,"column":11},"raisedAt":40}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    return <MyApp2 key=\"key2\"/>;\n})","pinCode":true,"dname":"9a26d590-cd98-47a2-b03c-dfce462bcbe8","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"&nbsp; &nbsp;If you’re not familiar with some piece of JavaScript syntax, <a href=\"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export\" target=\"_blank\">MDN</a> and <a href=\"https://javascript.info/import-export\" target=\"_blank\">javascript.info</a> have great references.&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"### Writing markup with JSX\nThe markup syntax you’ve seen above is called JSX. It is optional, but most React projects use JSX for its convenience. All of the tools we recommend for local development support JSX out of the box.\n\nJSX is stricter than HTML. You have to close tags like <br />. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a <div>...</div> or an empty <>...</> wrapper:","pinCode":false,"dname":"c9ed2340-9fee-47fb-a88c-61b3a7222084","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"function AboutPage() {\n  let a =\"About\";\n  return (\n    <>\n      <h1>{a}</h1>\n      <p>Hello there.<br />How do you do?</p>\n    </>\n  );\n}","pinCode":true,"dname":"b21f6a1b-2ff7-4415-9b5f-a3d9d8a06462","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    return <AboutPage key='333b1b39-2809-4412-9302-5e87c8a4fecd'>\n    </AboutPage>;\n})","pinCode":true,"dname":"6e2be22e-8fd6-4aac-acc9-712517e00fd9","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"&nbsp; If you have a lot of HTML to port to JSX, you can use an <a href=\"https://transform.tools/html-to-jsx\" target=\"_blank\">online converter.</a>"}},{"type":"header","data":{"text":"Adding styles","level":2}},{"type":"paragraph","data":{"text":"&nbsp; In React, you specify a CSS class with <code>className</code>. It works the same way as the HTML <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class\" target=\"_blank\"><code>class</code></a> attribute:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    return <div className=\"avatar\" />;\n})","pinCode":true,"dname":"7f5b6657-5de2-4358-9754-da53d0162b57","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"Then you write the CSS rules for it in a separate HTML cell:"}},{"type":"codeTool","data":{"codeData":{"value":"<style>\n.avatar {\n  height: 2rem;\n  border: 1px solid;\n  border-radius: 50%;\n}\n</style>","pinCode":true,"dname":"3d4bdf5d-02ac-42b6-8c0b-bbcf23280dd9","codeMode":"htmlmixed"}}},{"type":"codeTool","data":{"codeData":{"value":"## Displaying data","pinCode":false,"dname":"97481e24-5c65-494c-9275-61a5f3eef9b2","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display <code>user.name</code>:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"user = ( {\n  name: 'Hedy Lamarr',\n  imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',\n  imageSize: 90,\n})","pinCode":true,"dname":"1c3d1b7b-8e45-45b6-91a9-7099695b0451","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    return (\n      <h1>\n        {user.name}\n      </h1>\n    );\n})","pinCode":true,"dname":"37fb4ea3-9e16-4fc1-8117-1e26aa0e8b67","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"You can also “escape into JavaScript” from JSX attributes, but you have to use curly braces instead of quotes. For example, <code>className=\"avatar\"</code> passes the <code>\"avatar\"</code> string as the CSS class, but <code>src={user.imageUrl}</code> reads the JavaScript <code>user.imageUrl</code> variable value, and then passes that value as the <code>src</code> attribute:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  return (\n    <img\n      className=\"avatar\"\n      src={user.imageUrl}\n      />\n  );\n})","pinCode":true,"dname":"e28ccf62-f842-48ee-8730-301ea667fe33","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"If you want format the react code <mark class=\"cdx-marker\"></mark><code class=\"inline-code\"><mark class=\"cdx-marker\">Ctrl+A</mark> </code>to select all ,<code class=\"inline-code\"><mark class=\"cdx-marker\"> Tab</mark></code> or <code class=\"inline-code\"><mark class=\"cdx-marker\">Shift+Tab</mark></code> to&nbsp;Indent and Outdent format the code."}},{"type":"paragraph","data":{"text":"You can put more complex expressions inside the JSX curly braces too, for example, <a href=\"https://javascript.info/operators#string-concatenation-with-binary\" target=\"_blank\">string concatenation</a>:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(function () {\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <img\n        className=\"avatar\"\n        src={user.imageUrl}\n        alt={'Photo of ' + user.name}\n        style={{\n          width: user.imageSize,\n          height: user.imageSize\n        }}\n      />\n    </>\n  );\n})","pinCode":true,"dname":"d6841a70-26da-456d-9897-b727f83aa86b","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"In the above example, <code>style={{}}</code> is not a special syntax, but a regular <code>{}</code> object inside the <code>style={ }</code> JSX curly braces. You can use the <code>style</code> attribute when your styles depend on JavaScript variables.&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"## Conditional rendering","pinCode":false,"dname":"5fffc659-53b5-4ce5-8af4-13ddab45db68","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\" target=\"_blank\"><code>if</code></a> statement to conditionally include JSX:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  let isLoggedIn = true;\n  let AdminPanel= ()=>{\n    return <div>Admin</div>\n  }\n  let LoginForm= ()=>{\n    return <div>Login</div>\n  }\n  let content;\n  if (isLoggedIn) {\n    content = <AdminPanel />;\n  } else {\n    content = <LoginForm />;\n  }\n  return (\n    <div>\n      {content}\n    </div>\n  );\n})","pinCode":true,"dname":"8c899fc7-c82c-4da8-b80e-bad7b49d6762","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"&nbsp; If you prefer more compact code, you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\">conditional <code>?</code> operator.</a> Unlike <code>if</code>, it works inside JSX:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  let isLoggedIn = true;\n  let AdminPanel= ()=>{\n    return <div>Admin</div>\n  }\n  let LoginForm= ()=>{\n    return <div>Login</div>\n  }\n  return (\n    <div>\n      {isLoggedIn ? (\n        <AdminPanel />\n      ) : (\n        <LoginForm />\n      )}\n    </div>\n  );\n})","pinCode":true,"dname":"6d389a94-5144-408e-9ab2-7e6be1ba3e84","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"When you don’t need the <code>else</code> branch, you can also use a shorter <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation\" target=\"_blank\">logical <code>&amp;&amp;</code> syntax</a>:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  let isLoggedIn = false;\n  let AdminPanel= ()=>{\n    return <div>Admin</div>\n  }\n  let LoginForm= ()=>{\n    return <div>Login</div>\n  }\n  return (\n    <div>\n      {isLoggedIn && <AdminPanel />}\n      {!isLoggedIn && <LoginForm />}\n    </div>\n  );\n})","pinCode":true,"dname":"2cf2dae7-e191-441f-98b6-6c2d8be7be6e","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"All of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using <code>if...else</code>.&nbsp;&nbsp;"}},{"type":"header","data":{"text":"Rendering lists&nbsp;<a href=\"https://react.dev/learn#rendering-lists\"></a>","level":2}},{"type":"paragraph","data":{"text":"You will rely on JavaScript features like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\" target=\"_blank\"><code>for</code> loop</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\">array <code>map()</code> function</a> to render lists of components."}},{"type":"paragraph","data":{"text":"For example, let’s say you have an array of products:"}},{"type":"codeTool","data":{"codeData":{"value":"products = [\n  { title: 'Cabbage', isFruit: false, id: 1 },\n  { title: 'Garlic', isFruit: false, id: 2 },\n  { title: 'Apple', isFruit: true, id: 3 },\n];","pinCode":true,"dname":"8a5de415-7580-4627-ad8b-e473f6af6c77","codeMode":"javascript2"}}},{"type":"paragraph","data":{"text":"Inside your component, use the <code>map()</code> function to transform an array of products into an array of <code>&lt;li&gt;</code> items:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  const listItems = products.map(\n    product =>\n    <li key={product.id} style={{\n        color: product.isFruit ? 'magenta' : 'darkgreen'\n      }}>\n      {product.title}\n    </li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n})","pinCode":true,"dname":"8c825ab9-bcc6-4633-9059-0cec90ce827e","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"Notice how <code>&lt;li&gt;</code> has a <code>key</code> attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"## Responding to events","pinCode":false,"dname":"c438db4d-7c0c-4221-83c0-f57f74e7a8b3","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"You can respond to events by declaring event handler functions inside your components:"}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  function handleClick() {\n    alert('You clicked me!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n})","pinCode":false,"dname":"b07cd586-9a3a-4c07-a275-1a67c46722e4","codeMode":"jsx"}}},{"type":"header","data":{"text":"Updating the screen&nbsp;<a href=\"https://react.dev/learn#updating-the-screen\"></a>","level":2}},{"type":"paragraph","data":{"text":"Often, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add state to your component."}},{"type":"paragraph","data":{"text":"Now you can declare a state variable inside your component:"}},{"type":"codeTool","data":{"codeData":{"value":"```jsx\nfunction MyButton2() {\n  const [count, setCount] = useState(0);\n  // ...\n```","pinCode":false,"dname":"ece10941-b986-4c8c-9a46-637af144dcbd","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"You’ll get two things from <code>useState</code>: the current state (<code>count</code>), and the function that lets you update it (<code>setCount</code>). You can give them any names, but the convention is to write <code>[something, setSomething]</code>."}},{"type":"paragraph","data":{"text":"The first time the button is displayed, <code>count</code> will be <code>0</code> because you passed <code>0</code> to <code>useState()</code>. When you want to change state, call <code>setCount()</code> and pass the new value to it. Clicking this button will increment the counter:"}},{"type":"codeTool","data":{"codeData":{"value":"function MyButton() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Clicked {count} times\n    </button>\n  );\n}","pinCode":true,"dname":"4404b957-fa55-4af3-b621-2839388cf79e","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"React will call your component function again. This time, <code>count</code> will be <code>1</code>. Then it will be <code>2</code>. And so on."}},{"type":"paragraph","data":{"text":"If you render the same component multiple times, each will get its own state. Click each button separately:"}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  return (\n    <div>\n      <h1>Counters that update separately</h1>\n      <MyButton />\n      <MyButton />\n    </div>\n  );\n})","pinCode":true,"dname":"9af8fb30-0b43-4e40-99bf-20a74def084f","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"Notice how each button “remembers” its own <code>count</code> state and doesn’t affect other buttons."}},{"type":"header","data":{"text":"Using Hooks&nbsp;<a href=\"https://react.dev/learn#using-hooks\"></a>","level":2}},{"type":"paragraph","data":{"text":"Functions starting with <code>use</code> are called Hooks. <code>useState</code> is a built-in Hook provided by React. You can find other built-in Hooks in the <a href=\"https://react.dev/reference/react\">API reference.</a> You can also write your own Hooks by combining the existing ones."}},{"type":"paragraph","data":{"text":"Hooks are more restrictive than other functions. You can only call Hooks at the top of your components (or other Hooks). If you want to use <code>useState</code> in a condition or a loop, extract a new component and put it there."}},{"type":"codeTool","data":{"codeData":{"value":"## Sharing data between components","pinCode":false,"dname":"b198c439-160d-440e-b954-ed8face9be6e","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"In the previous example, each <code>MyButton</code> had its own independent <code>count</code>, and when each button was clicked, only the <code>count</code> for the button clicked changed:"}},{"type":"codeTool","data":{"codeData":{"value":"<div class=\"d-flex justify-content-center\">${await FileAttachment(\"separate change.png\").image()}</div>","pinCode":false,"dname":"5a21c4f2-4fa8-401d-be96-b447bb48df0f","codeMode":"htmlmixed"}}},{"type":"paragraph","data":{"text":"However, often you’ll need components to share data and always update together."}},{"type":"paragraph","data":{"text":"To make both <code>MyButton</code> components display the same <code>count</code> and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them."}},{"type":"paragraph","data":{"text":"In this example, it is <code>MyApp</code>:"}},{"type":"codeTool","data":{"codeData":{"value":"<div class=\"d-flex justify-content-center\">${await FileAttachment(\"sync change.png\").image()}</div>","pinCode":false,"dname":"a7d59a53-e2e4-43c8-b10e-2c66cae67f06","codeMode":"htmlmixed"}}},{"type":"paragraph","data":{"text":"Now when you click either button, the <code>count</code> in <code>MyApp</code> will change, which will change both of the counts in <code>MyButton</code>. Here’s how you can express this in code."}},{"type":"paragraph","data":{"text":"First, move the state up from <code>MyButton</code> into <code>MyApp</code>:"}},{"type":"codeTool","data":{"codeData":{"value":"```jsx\nfunction MyApp() {\n  const [count, setCount] = useState(0);\n\n  function MyButton() {\n    // ... we're moving code from here ...\n  }\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <div>\n      <h1>Counters that update separately</h1>\n      <MyButton />\n      <MyButton />\n    </div>\n  );\n}\n```","pinCode":false,"dname":"807e36b9-5645-45bd-ab17-284804a88bdf","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"Then, pass the state down from <code>MyApp</code> to each <code>MyButton</code>, together with the shared click handler. You can pass information to <code>MyButton</code> using the JSX curly braces, just like you previously did with built-in tags like <code>&lt;img&gt;</code>:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"```jsx\nfunction MyApp() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <div>\n      <h1>Counters that update together</h1>\n      <MyButton count={count} onClick={handleClick} />\n      <MyButton count={count} onClick={handleClick} />\n    </div>\n  );\n}\n```","pinCode":false,"dname":"630c2ef1-42bd-4e27-b14f-67d11f3f93f0","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"The information you pass down like this is called props. Now the <code>MyApp</code> component contains the <code>count</code> state and the <code>handleClick</code> event handler, and passes both of them down as props to each of the buttons."}},{"type":"paragraph","data":{"text":"Finally, change <code>MyButton</code> to read the props you have passed from its parent component:"}},{"type":"codeTool","data":{"codeData":{"value":"```jsx\nfunction MyButton({ count, onClick }) {\n  return (\n    <button onClick={onClick}>\n      Clicked {count} times\n    </button>\n  );\n}\n```","pinCode":false,"dname":"eeaa06df-61fb-451a-83b4-f351c70596b3","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"When you click the button, the <code>onClick</code> handler fires. Each button’s <code>onClick</code> prop was set to the <code>handleClick</code> function inside <code>MyApp</code>, so the code inside of it runs. That code calls <code>setCount(count + 1)</code>, incrementing the <code>count</code> state variable. The new <code>count</code> value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  const [count, setCount] = useState(0);\n  function handleClick() {\n    setCount(count + 1);\n  }\n  return (\n    <div>\n      <h1>Counters that update together</h1>\n      <MyButton count={count} onClick={handleClick} />\n      <MyButton count={count} onClick={handleClick} />\n    </div>\n  );\n  function MyButton({ count, onClick }) {\n    return (\n      <button onClick={onClick}>\n        Clicked {count} times\n      </button>\n    );\n  }\n})","pinCode":true,"dname":"578462e3-c5e5-4514-98f8-a5a63cf9d81f","codeMode":"jsx"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  const { Space } = Antd;\n  return  <div className=\"d-flex justify-content-between align-items-center\">\n    <div>\n      <GroveSvg fontSize=\"4em\"></GroveSvg>\n      <span className=\"f4\">Grove Store</span>\n    </div>\n    <div>\n      <a href=\"https://github.com/Kineviz/grove-help\" target=\"_blank\" rel=\"noopener noreferrer\">\n        GitHub â˜…\n      </a>\n    </div>\n  </div> ;\n})","pinCode":false,"dname":"5efd907d-41b9-4bed-a3cc-3326a13f5e1c","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"GroveSvg = component(({ fontSize }) => {\n    return <svg width={fontSize} height={fontSize} viewBox=\"0 0 512 512\"\n     xmlns=\"http://www.w3.org/2000/svg\" role=\"img\">\n  <path d=\"M256 64\n           C300 64 328 96 328 96\n           C352 96 384 120 384 160\n           C384 200 352 224 328 224\n           L312 224\n           L312 240\n           C312 280 284 312 256 312\n           C228 312 200 280 200 240\n           L200 224\n           L184 224\n           C160 224 128 200 128 160\n           C128 120 160 96 184 96\n           C184 96 212 64 256 64 Z\"\n        fill=\"#8BC34A\"\n        stroke=\"#1B5E20\"\n        stroke-width=\"16\"\n        stroke-linejoin=\"round\"/>\n  <path d=\"M224 224\n           L288 224\n           L288 384\n           L256 448\n           L224 384\n           Z\"\n        fill=\"#2E7D32\"\n        stroke=\"#1B5E20\"\n        stroke-width=\"16\"\n        stroke-linejoin=\"round\"/>\n  <path d=\"M224 384 L256 448 L288 384 Z\"\n        fill=\"#FFE0B2\"\n        stroke=\"#1B5E20\"\n        stroke-width=\"12\"\n        stroke-linejoin=\"round\"/>\n  <line x1=\"256\" y1=\"160\" x2=\"256\" y2=\"224\"\n        stroke=\"#1B5E20\" stroke-width=\"16\" stroke-linecap=\"round\"/>\n  <line x1=\"256\" y1=\"184\" x2=\"216\" y2=\"144\"\n        stroke=\"#1B5E20\" stroke-width=\"16\" stroke-linecap=\"round\"/>\n  <line x1=\"256\" y1=\"184\" x2=\"296\" y2=\"144\"\n        stroke=\"#1B5E20\" stroke-width=\"16\" stroke-linecap=\"round\"/>\n</svg>\n;\n})","pinCode":false,"dname":"ed5b8c54-e6a7-489e-9a52-21c921fe2043","codeMode":"jsx","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"# Template\nHere are some template examples. Including how to use tables, plot charts, D3 charts, React program examples, etc.","pinCode":false,"dname":"5134774d-d7af-4583-bd13-9ce4e73b7b54","codeMode":"markdown","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"OPENER = window?.parent?.globalVariable ? window.parent : window.opener;","pinCode":false,"dname":"b8c6850b-a237-4658-bee9-7657615cbfdf","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"ALIAS_PATH = OPENER.globalVariable.aliasPath ?? '';","pinCode":false,"dname":"9e41062e-774c-472d-a978-1dcb97ec7c74","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"prefixAliasPath= function (path) {\n  if (!ALIAS_PATH) return path\n  if (!path.startsWith('/')) return path;\n  if (path.startsWith(ALIAS_PATH)) return path\n  return ALIAS_PATH + path;\n}","pinCode":false,"dname":"4f5ccfc5-cccd-4bdd-85f4-efd19e057778","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"commonFetch = function (resource, ...args) {\n    return fetch(prefixAliasPath(resource), ...args);\n  }","pinCode":false,"dname":"ade157fa-96c9-4b03-9ae9-9278f5f07fd7","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"getFileName = (fileKey) => {\n    return (fileKey && ~fileKey.lastIndexOf('/')) ? fileKey.substring(fileKey.lastIndexOf('/') + 1) : fileKey\n}","pinCode":false,"dname":"13defb92-19cb-4f69-99ec-7496febfec7f","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"fileSeparator = '/';","pinCode":false,"dname":"ec3bd253-0ddc-47ae-85e6-a6f02551c3b8","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"FILESDIR_NAME = \"files\";","pinCode":false,"dname":"fef227f7-da2f-4bc4-970e-b6ef7c122475","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"FILESDIR = `${FILESDIR_NAME}/`;","pinCode":false,"dname":"92b29b17-7164-4851-942e-d93f7ef0e7ff","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"getFileKey = (referFileKey, fileName) => {\n    return (referFileKey && ~referFileKey.lastIndexOf(fileSeparator)) ?\n        (referFileKey.substring(0, referFileKey.lastIndexOf(fileSeparator)) + fileSeparator + fileName) :\n        fileName;\n}","pinCode":false,"dname":"9d9ea21a-2ded-4a86-af05-2ec6f9a6efb7","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"isLocal = location.href.startsWith(\"http://localhost:9000\");","pinCode":false,"dname":"e2f5d37f-68be-4876-98d6-fbde19b18940","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"template_datas = (async function () {\n  if(isLocal){\n    let ds = await FileAttachment(\"template/template.json\").json();\n     _.each(ds, (d) => {\n      d.uploadUri = \"/tmp/observable/projects/userGuideProjectId/\";\n    });\n    return ds;\n  }else{\n    let ds = await (\n      await commonFetch(`${window.GUIDE_LINK_URI}${\"template/template.json\"}`)\n    ).json();\n    _.each(ds, (d) => {\n      d.uploadUri = window.GUIDE_LINK_URI;\n    });\n    return ds;\n  }\n})()","pinCode":false,"dname":"a3762d2c-751e-4992-aaaa-525f51ee393a","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  const { Button, Select, Space,List, Card } = Antd;\n  const { Meta } = Card;\n  const ImageType = \".jpeg\";\n  return <div key='d9bf09b4-094c-4e9b-9595-ae3efb7582c5' className=\"modal-comp\">\n    <List\n      grid={{\n        gutter: 16\n      }}\n      dataSource={ template_datas }\n      renderItem={ /** @param {ShapeShared} item */ (item, index) => {\n        let fileName = getFileName(item.fileKey);\n        let imageFileKey = getFileKey(getFileKey(item.fileKey, FILESDIR), fileName);\n        let imageURL = `${item.uploadUri}${imageFileKey}${ImageType}`\n        return <List.Item>\n          <Card className={`card-file`} hoverable\n            cover={<div className=\"image-wrap bg-img d-flex align-items-center justify-content-center\"\n                     style={typeof imageURL === 'string' ? { backgroundImage: `url(${imageURL})` } : { backgroundImage: \"unset\", backgroundColor: \"#f5f5f5\" }} onClick={() => {\n\t\t\t\t\twindow.currentEditor.switchTagEditor(item.fileKey, undefined,  { tag: \"published\", status: 3 });\n                }}>\n                {typeof imageURL === 'object' && imageURL}\n              </div>}\n            >\n            <Meta\n              title={<div>\n              <div className=\"blablano\">{`${item.title}`}</div>\n            </div>}\n              description={<div className=\"blablano\">{`${item.description}`}</div>}\n              />\n          </Card>\n        </List.Item>\n      }}\n      />\n  </div>;\n})","pinCode":false,"dname":"1d8e4f84-fa9f-43f2-8e5d-2d047e5808ea","codeMode":"jsx","hide":false}}},{"type":"codeTool","data":{"codeData":{"value":"react_datas = (async function () {\n  if(isLocal){\n    let ds = await FileAttachment(\"react/react-template.json\").json();\n    _.each(ds, (d) => {\n      d.uploadUri = \"/tmp/observable/projects/userGuideProjectId/\";\n    });\n    return ds;\n  }else{\n    let ds = await (\n      await commonFetch(`${window.GUIDE_LINK_URI}${\"react/react-template.json\"}`)\n    ).json();\n    _.each(ds, (d) => {\n      d.uploadUri = window.GUIDE_LINK_URI;\n    });\n    return ds;\n  }\n})()","pinCode":false,"dname":"fd6e6189-117e-488a-984c-971fac85ada3","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"# React\nHere are some react examples.","pinCode":false,"dname":"a26cbdcb-45e9-4cf5-8d9e-f57f6ef73eb2","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  const { Button, Select, Space,List, Card } = Antd;\n  const { Meta } = Card;\n  const ImageType = \".jpeg\";\n  return <div key='d9bf09b4-094c-4e9b-9595-ae3efb7582c5' className=\"modal-comp\">\n    <List\n      grid={{\n        gutter: 16\n      }}\n      dataSource={ react_datas }\n      renderItem={ /** @param {ShapeShared} item */ (item, index) => {\n        let fileName = getFileName(item.fileKey);\n        let imageFileKey = getFileKey(getFileKey(item.fileKey, FILESDIR), fileName);\n        let imageURL = `${item.uploadUri}${imageFileKey}${ImageType}`\n        return <List.Item>\n          <Card className={`card-file`} hoverable\n            cover={<div className=\"image-wrap bg-img d-flex align-items-center justify-content-center\"\n                     style={typeof imageURL === 'string' ? { backgroundImage: `url(${imageURL})` } : { backgroundImage: \"unset\", backgroundColor: \"#f5f5f5\" }} onClick={() => {\n\t\t\t\t\twindow.currentEditor.switchTagEditor(item.fileKey, undefined,  { tag: \"published\", status: 3 });\n                }}>\n                {typeof imageURL === 'object' && imageURL}\n              </div>}\n            >\n            <Meta\n              title={<div>\n              <div className=\"blablano\">{`${item.title}`}</div>\n            </div>}\n              description={<div className=\"blablano\">{`${item.description}`}</div>}\n              />\n          </Card>\n        </List.Item>\n      }}\n      />\n  </div>;\n})","pinCode":false,"dname":"5cbaf8a9-3603-45ae-b92b-82e7c1a8d366","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"neodash_datas = (async function () {\n  if(isLocal){\n    let ds = await FileAttachment(\"NeoDashDashboardGallery/NeoDashDashboardGallery.json\").json();\n    _.each(ds, (d) => {\n      d.uploadUri = \"/tmp/observable/projects/userGuideProjectId/\";\n    });\n    return ds;\n  }else{\n    let ds = await (\n      await commonFetch(`${window.GUIDE_LINK_URI}${\"NeoDashDashboardGallery/NeoDashDashboardGallery.json\"}`)\n    ).json();\n    _.each(ds, (d) => {\n      d.uploadUri = window.GUIDE_LINK_URI;\n    });\n    return ds;\n  }\n})()","pinCode":false,"dname":"762d6922-fbe9-48b5-b724-2fdc2274873d","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"# NeoDash Dashboard\nHere are some NeoDash examples.","pinCode":false,"dname":"1160e36b-cba0-486b-b740-1f60b0a19823","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n  const { Button, Select, Space,List, Card } = Antd;\n  const { Meta } = Card;\n  const ImageType = \".jpeg\";\n  return <div key='d9bf09b4-094c-4e9b-9595-ae3efb7582c5' className=\"modal-comp\">\n    <List\n      grid={{\n        gutter: 16\n      }}\n      dataSource={ neodash_datas }\n      renderItem={ /** @param {ShapeShared} item */ (item, index) => {\n        let fileName = getFileName(item.fileKey);\n        let imageFileKey = getFileKey(getFileKey(item.fileKey, FILESDIR), fileName);\n        let imageURL = `${item.uploadUri}${imageFileKey}${ImageType}`\n        return <List.Item>\n          <Card className={`card-file`} hoverable\n            cover={<div className=\"image-wrap bg-img d-flex align-items-center justify-content-center\"\n                     style={typeof imageURL === 'string' ? { backgroundImage: `url(${imageURL})` } : { backgroundImage: \"unset\", backgroundColor: \"#f5f5f5\" }} onClick={() => {\n\t\t\t\t\twindow.currentEditor.switchTagEditor(item.fileKey, undefined,  { tag: \"published\", status: 3 });\n                }}>\n                {typeof imageURL === 'object' && imageURL}\n              </div>}\n            >\n            <Meta\n              title={<div>\n              <div className=\"blablano\">{`${item.title}`}</div>\n            </div>}\n              description={<div className=\"blablano\">{`${item.description}`}</div>}\n              />\n          </Card>\n        </List.Item>\n      }}\n      />\n  </div>;\n})","pinCode":false,"dname":"c1aeda32-26bb-4998-9a8a-d4be84036948","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"","pinCode":false,"dname":"e77e54a3-df54-4928-9315-4ee8b2c36e62","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"<style>\n  .code-edit-result {\n    color: #1e5258;\n    color: var(--run-result);\n    min-height: 2em;\n    overflow-x: unset;\n    padding: .4em 0;\n  }\n</style>","pinCode":false,"dname":"862ee646-e70d-4a74-8fc7-f7f2a506373f","codeMode":"htmlmixed","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"6fc52943-7d88-4617-a641-e3f28e1c52ff","codeMode":"javascript2","hide":true}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Interactive Time Range Input`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Observable's built-in [\\`Inputs.range\\`](https://observablehq.com/@observablehq/input-range) slider can only process numeric results and appears not to allow formatting of slider values in anything other than numeric formats. It makes using the slider to select dates/times cumbersome. It is also common to want to select temporal ranges bounded by start and end points.\n\nThe following addresses this by wrapping Fabian Iwand's excellent [offset interval slider](https://observablehq.com/@mootari/offset-slider) to provide easy construction of a double-ended time period input slider.\n\nTo import for use in your own pages:\n\n\\`\\`\\`javascript\nimport { timeRange } from \"@jwolondon/time-range-input\"\n\\`\\`\\`\n\nHere is an example that allows the selection of a time period with a monthly granularity:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof myTimeSelection = (timeRange(\n  new Date(2023, 0, 1),\n  new Date(2024, 11, 31),\n  { interval: \"month\" }\n))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`As with other inputs, when declared with [viewof](https://observablehq.com/@observablehq/a-brief-introduction-to-viewof), the selected value (in this case two \\`Date\\`s) it represents can be access directly for use in other code blocks:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"myTimeSelection","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Usage\n\n- **timeRange(_startDate_, _endDate_, _{options}_)**\n  \nAs a minimum, \\`timeRange\\` must be called with two [Date objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) representing the start and end of the selectable time period.\n\n### Options\n\nA third parameter – an options object – allows you to customise the slider. It contains the following elements:\n\n- **label: _text_** The label text to appear next to the slider or \\`null\\` if no text (default).\n- **interval: _intervalType_** One of \\`\"millisecond\"\\`, \\`\"second\"\\`, \\`\"minute\"\\`, \\`\"hour\"\\`, \\`\"day\"\\`, \\`\"week\"\\`, \\`\"month\"\\` or \\`\"year\"\\` (default: \\`\"day\"\\`). \n- **step: _n_** Minimum number of intervals advanced by the slider (default: 1). For example, setting \\`interval\\` to \\`\"month\"\\` and \\`step\\` to \\`3\\`, the slider advances by quarters.\n- **format: _formatString_** A [d3.time-format code](https://d3js.org/d3-time-format) determining how the start and end dates appear under the slider. The default depends on which \\`interval\\` is used.\n- **value: _[d1, d2]_** The initial start and end date/times of the selection represented by an array of two \\`Date\\` objects (default, full range represented by the slider).`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Example`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof yearZoom = (timeRange(new Date(2013, 4, 13), new Date(2018, 4, 12), {\n  interval: \"day\",\n  label: \"Zoom\",\n  value: [new Date(2014, 9), new Date(2016, 3)]\n}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Plot.plot({\n  clip: true,\n  x: { domain: yearZoom }, // The time slider, which reports the selected start and end dates, maps directly to the zoomed domain.\n  marks: [\n    Plot.areaY(aapl, {\n      x: \"Date\",\n      y: \"Close\",\n      fill: \"firebrick\",\n      opacity: 0.1\n    }),\n    Plot.lineY(aapl, { x: \"Date\", y: \"Close\" })\n  ]\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n### Appendices`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`_The core offset interval slider from @mootari:_`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"import { offsetInterval }  from 'time-range-input/ea6ad5f03f23221b'","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`_The timeRange wrapper:_`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"timeRange = (function timeRange(start, end, options = {}) {\n  let {\n    interval = \"day\",\n    step = 1,\n    format = null,\n    label = null,\n    value = null\n  } = options;\n  let ts;\n  switch (interval.toLowerCase()) {\n    case \"millisecond\":\n      ts = d3.utcMilliseconds(start, end, step);\n      format = format || \"%M:%S.%L\";\n      break;\n    case \"second\":\n      ts = d3.utcSeconds(start, end, step);\n      format = format || \"%H:%M:%S\";\n      break;\n    case \"minute\":\n      ts = d3.utcMinutes(start, end, step);\n      format = format || \"%H:%M\";\n      break;\n    case \"hour\":\n      ts = d3.utcHours(start, end, step);\n      format = format || \"%H:%M\";\n      break;\n    case \"day\":\n      ts = d3.utcDays(start, end, step);\n      format = format || \"%Y-%m-%d\";\n      break;\n    case \"week\":\n      ts = d3.utcWeeks(start, end, step);\n      format = format || \"%Y-%m-%d\";\n      break;\n    case \"month\":\n      ts = d3.utcMonths(start, end, step);\n      format = format || \"%b %Y\";\n      break;\n    case \"year\":\n      ts = d3.utcYears(start, end, step);\n      format = format || \"%Y\";\n      break;\n    default:\n      throw Error(`Unknown time interval \"${interval}\" provided to timeRange`);\n  }\n\n  // Because we are dealing with Date objects rather than primitives, the value setting for initial\n  // selection needs to be matched against closest of the internally stored Dates rather than direct\n  // equality testing.\n  const findClosestDate = (targetDate) => {\n    if (!targetDate || ts.length === 0) {\n      return null;\n    }\n    let closestDate = ts[0];\n    let smallestDifference = Math.abs(ts[0] - targetDate);\n    for (const date of ts) {\n      const difference = Math.abs(date - targetDate);\n      if (difference < smallestDifference) {\n        smallestDifference = difference;\n        closestDate = date;\n      }\n    }\n    return closestDate;\n  };\n\n  let minSel, maxSel;\n  if (value && value.length === 2) {\n    minSel = findClosestDate(value[0]);\n    maxSel = findClosestDate(value[1]);\n  } else {\n    minSel = ts[0];\n    maxSel = ts.at(-1);\n  }\n\n  return offsetInterval(ts, {\n    label: label,\n    formatValue: d3.utcFormat(format),\n    value: [minSel, maxSel]\n  });\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`_Tests for each time interval:_`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof test = (Inputs.form({\n  rMillis: timeRange(\n    new Date(2024, 1, 20, 10),\n    new Date(2024, 1, 20, 10, 0, 5),\n    {\n      interval: \"millisecond\",\n      label: \"Milliseconds\",\n      value: [new Date(2024, 1, 20, 10), new Date(2024, 1, 20, 10, 0, 2)]\n    }\n  ),\n  rSeconds: timeRange(new Date(2024, 1, 20, 10), new Date(2024, 1, 20, 11), {\n    interval: \"second\",\n    label: \"Seconds\",\n    value: [new Date(2024, 1, 20, 10, 15), new Date(2024, 1, 20, 10, 30)]\n  }),\n  rMinutes: timeRange(new Date(2024, 1, 20, 0), new Date(2024, 1, 20, 23, 59), {\n    interval: \"minute\",\n    label: \"Minutes\",\n    value: [new Date(2024, 1, 20, 9), new Date(2024, 1, 20, 17)]\n  }),\n  rHours: timeRange(new Date(2024, 1, 20), new Date(2024, 1, 21), {\n    interval: \"hour\",\n    label: \"Hours\",\n    value: [new Date(2024, 1, 20, 12), new Date(2024, 1, 20, 18)]\n  }),\n  rDays: timeRange(new Date(2024, 1, 20), new Date(2024, 2, 20), {\n    interval: \"day\",\n    label: \"Days\",\n    value: [new Date(2024, 2, 4), new Date(2024, 2, 13)]\n  }),\n  rWeeks: timeRange(new Date(2023, 0, 1), new Date(2024, 0, 1), {\n    interval: \"week\",\n    label: \"Weeks\",\n    value: [new Date(2023, 3, 2), new Date(2023, 5, 18)]\n  }),\n  rMonths: timeRange(new Date(2023, 0, 1), new Date(2024, 11, 31), {\n    interval: \"month\",\n    label: \"Months\",\n    value: [new Date(2023, 6), new Date(2024, 0)]\n  }),\n  rYears: timeRange(new Date(1880, 0), new Date(2020, 1), {\n    interval: \"year\",\n    label: \"Years\",\n    value: [new Date(1950, 0), new Date(1980, 0)]\n  })\n}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"test","pinCode":false}}}],"version":"2.19.1"}
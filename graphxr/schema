{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md `#### Lables`","pinCode":false,"dname":"d2047ded-7b53-40f4-bb51-0b908ce62c59","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof labels=Inputs.table(Lables, {required:false})","pinCode":false,"dname":"5187b26a-331b-46ec-9f75-b4b7f7d0f260","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${labels.map(l=>l.label)}`,{\n  reduce: async ()=>{\n    const whereClause = labels\n      .map(l=>l.label)\n      .map(label => `n:${label}`).join(' OR ');\n    const query =`match (n) WHERE ${whereClause} RETURN n`\n    console.log(query)\n    await gxr.neo4j(query)\n  }, \n  disabled:labels.length==0\n})","pinCode":false,"dname":"d3127b41-a813-4ad6-9ad5-9e0b3b0fe615","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Lables = {\n  let res = await gxr.neo4j(`MATCH (n)\nRETURN labels(n) AS label, count(n) as cnt`, {saveToGraph:false})\n  let arr= res._content.data\n  arr.shift()\n  return arr.map(\n    elem=>({\n      label: elem[0][0],\n      count: elem[1].low\n  }))\n}","pinCode":false,"dname":"80053215-0122-4682-9b09-0604ec557710","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"md `#### Relationships`","pinCode":false,"dname":"870f3f6f-e992-4759-afd0-59f7f0270be0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof relationships=Inputs.table(Relationships, {required:false})","pinCode":false,"dname":"e0317246-6098-45b7-941e-e353123a61c0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button(`Pull ${relationships.map(r=>r.relationship)}`, {\n  reduce: async ()=>{\n    const whereClause = relationships\n      .map(l=>l.relationship)\n      .map(rel => `r:${rel}`).join(' OR ');\n    const query =`match (n)-[r]->(m) WHERE ${whereClause} RETURN *`\n    console.log(query)\n    await gxr.neo4j(query)\n  },\n  disabled: relationships.length==0\n})","pinCode":false,"dname":"4c020a6b-3ea8-4fec-b375-479c4b0d1cd4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Relationships = {\n  let res = await gxr.neo4j(`MATCH ()-[r]->()\nRETURN type(r) AS relationshipType, count(r) as cnt\n`, {saveToGraph:false})\n  let arr= res._content.data\n  arr.shift()\n  return arr.map(elem=>({relationship:elem[0], count:elem[1].low}))\n}","pinCode":false,"dname":"712e7d2a-7f8b-4b70-bb6e-cc62aaa381ff","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Button('Expand', async ()=>{\n  const selected = gxr.nodes(\":selected\")\n  if(selected.length==0){\n    alert('Please select at least one nodes')\n    return\n  }\n  let ids = gxr.nodes(\":selected\").map(n=>parseInt(n.id))\n  let expand_on = relationships.map(l=>l.relationship)\n  let relStr = expand_on.length>0 ?\n      ':'+expand_on.join('|') : ''\n  let query = `MATCH (n)-[r${relStr}]-(m) \n  where id(n) in [${ids}]\n  return *`\n  console.log(query)\n  await gxr.neo4j(query)\n})","pinCode":false,"dname":"59a3ac96-8305-406a-a06d-e16bd375ed72","codeMode":"javascript2"}}}],"version":"2.19.1"}
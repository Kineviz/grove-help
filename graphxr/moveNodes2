{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"mutable selectedNodesT = {\n\treturn selectedNodes.array\n}","pinCode":false,"dname":"6f9a583f-f83c-4cfb-b22a-35d8a8ea6407","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function DraggableInputNumber({\n  min = 0,\n  max = 100,\n  step = 1,\n  value: initialValue = 0,\n  onChange,\n}) {\n  const [value, setValue] = useState(initialValue);\n  const startPos = useRef({ x: 0, y: 0 });\n  const dragging = useRef(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const inputRef = useRef();\n\n  const updateValue = (val) => {\n    if (min !== undefined) val = Math.max(min, val);\n    if (max !== undefined) val = Math.min(max, val);\n    onChange?.(val);\n  };\n\n  const handleMouseDown = (e) => {\n    if (isEditing) return;\n    dragging.current = true;\n    startPos.current = { x: e.clientX, y: e.clientY };\n    document.body.style.cursor = 'ns-resize';\n\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  const handleMouseMove = (e) => {\n    if (!dragging.current) return;\n\n    const deltaX = e.clientX - startPos.current.x;\n    const deltaY = startPos.current.y - e.clientY; // invert y: up is positive\n    const delta = deltaX + deltaY;\n\n    const deltaValue = Math.floor(delta / 5) * step;\n    updateValue(initialValue + deltaValue);\n  };\n\n  const handleMouseUp = () => {\n    dragging.current = false;\n    startPos.current = { x: 0, y: 0 };\n    document.body.style.cursor = 'default';\n\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  const handleClick = () => {\n    setIsEditing(true);\n    setTimeout(() => {\n      inputRef.current?.focus();\n      inputRef.current?.select();\n    }, 0);\n  };\n\n  const handleChange = (e) => {\n    const val = parseFloat(e.target.value);\n    if (!isNaN(val)) updateValue(val);\n  };\n\n  const handleBlur = () => setIsEditing(false);\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') inputRef.current.blur();\n  };\n  \n  useEffect(()=>{\n  \tsetValue(initialValue)\n  },[initialValue])\n\n  return (\n    <input\n      ref={inputRef}\n      type=\"number\"\n      value={value.toFixed(4)}\n      readOnly={!isEditing}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      onKeyDown={handleKeyDown}\n      style={{\n        padding: '6px 10px',\n        width: '100px',\n        textAlign: 'center',\n        border: '1px solid #ccc',\n        borderRadius: 4,\n        backgroundColor: isEditing ? 'white' : '#f0f0f0',\n        userSelect: isEditing ? 'auto' : 'none',\n        cursor: isEditing ? 'text' : 'grab',\n      }}\n    />\n  );\n}\n","pinCode":false,"dname":"7266f989-439f-4dc9-ab99-b47ac5c6115c","codeMode":"jsx","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    const { Space } = Antd;\n  \tlet c = getCenterOf3DNodes(_.map(selectedNodesT,(n)=>{return n._position}))\n    const [x, setX] = useState(c.x);\n    const [y, setY] = useState(c.y);\n    const [z, setZ] = useState(c.z);\n    useEffect(()=>{\n      if(!selectedNodesT.length){\n      \treturn;\n      }\n      let c = getCenterOf3DNodes(_.map(selectedNodesT,(n)=>{return n._position}))\n      setX(c.x);\n      setY(c.y);\n      setZ(c.z);\n    }, [selectedNodesT])\n    const min = -10000;\n    const max = 10000;\n    const step = 0.001;\n    return <Space direction=\"vertical\" key=\"06e59f3f-4ee6-4043-8136-2675d8a553b6\">\n      <div> Selected {selectedNodesT.length} Nodes</div>\n  <Space direction='horizontal' gap={8}>\n      <DraggableInputNumber min={min} max={max} step={step} value={x} onChange={(val) => {\n          let deltaX = val - x;\n          \t_.each(selectedNodesT,(n)=>{return n._position.x+= deltaX})\n          setX(val);\n        }} />\n      <DraggableInputNumber min={min} max={max} step={step} value={y} onChange={(val) => {\n          let deltaX = val - y;\n          _.each(selectedNodesT,(n)=>{return n._position.y+= deltaX})\n          setY(val);\n        }} />\n      <DraggableInputNumber min={min} max={max} step={step} value={z} onChange={(val) => {\n          let deltaX = val - z;\n          \t_.each(selectedNodesT,(n)=>{return n._position.z+= deltaX})\n          setZ(val);\n        }} />\n    </Space>\n      </Space>;\n})","pinCode":false,"dname":"c6ec7c4e-3283-49f8-ad4d-22c33788a69c","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"function getCenterOf3DNodes(nodes) {\n  if (!nodes || nodes.length === 0) return {x:0,y:0,z:0};\n\n  let sumX = 0, sumY = 0, sumZ = 0;\n\n  nodes.forEach(node => {\n    sumX += node.x;\n    sumY += node.y;\n    sumZ += node.z;\n  });\n\n  const n = nodes.length;\n\n  return {\n    x: sumX / n,\n    y: sumY / n,\n    z: sumZ / n,\n  };\n}","pinCode":false,"dname":"83c32840-6ad0-4d6e-96e4-01c6bce74f1b","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"nodes = [\n  { x: 1, y: 2, z: 3 },\n  { x: 4, y: 5, z: 6 },\n  { x: 7, y: 8, z: 9 },\n]","pinCode":false,"dname":"158d214e-77a1-4cb0-8b1f-d93458d198b1","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"center = getCenterOf3DNodes(nodes)","pinCode":false,"dname":"f63ccf93-7118-4373-983e-3732972aab5a","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment, useRef } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"4714edd9-a89f-4f6a-902a-93fa0ad366bd","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function DraggableInputNumber2({\n  min = 0,\n  max = 100,\n  step = 1,\n  value: initialValue = 0,\n  onChange,\n}) {\n  const [value, setValue] = useState(initialValue);\n  const [isEditing, setIsEditing] = useState(false);\n  const inputRef = useRef(null);\n  const startX = useRef(null);\n  const dragging = useRef(false);\n\n  const updateValue = (newVal) => {\n    if (min !== undefined) newVal = Math.max(min, newVal);\n    if (max !== undefined) newVal = Math.min(max, newVal);\n    onChange?.(newVal);\n  };\n\n  const handleMouseDown = (e) => {\n    if (isEditing) return; // Don't drag while editing\n\n    startX.current = e.clientX;\n    dragging.current = true;\n    document.body.style.cursor = 'ew-resize';\n\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  const handleMouseMove = (e) => {\n    if (!dragging.current) return;\n\n    const deltaX = e.clientX - startX.current;\n    const deltaValue = Math.floor(deltaX / 5) * step;\n    updateValue(initialValue + deltaValue);\n  };\n\n  const handleMouseUp = () => {\n    dragging.current = false;\n    startX.current = null;\n    document.body.style.cursor = 'default';\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  const handleClick = () => {\n    setIsEditing(true);\n    setTimeout(() => {\n      inputRef.current?.focus();\n      inputRef.current?.select();\n    }, 0);\n  };\n\n  const handleChange = (e) => {\n    let newVal = parseFloat(e.target.value);\n    if (isNaN(newVal)) return;\n    updateValue(newVal);\n  };\n\n  const handleBlur = () => {\n    setIsEditing(false);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      inputRef.current.blur();\n    }\n  };\n  \n  useEffect(()=>{\n  \tsetValue(initialValue)\n  },[initialValue])\n\n  return (\n    <input\n      ref={inputRef}\n      type=\"number\"\n      value={value.toFixed(3)}\n      readOnly={!isEditing}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      onKeyDown={handleKeyDown}\n      style={{\n        padding: '6px 10px',\n        width: '100px',\n        textAlign: 'center',\n        border: '1px solid #ccc',\n        borderRadius: 4,\n        cursor: isEditing ? 'text' : 'ew-resize',\n        backgroundColor: isEditing ? 'white' : '#f9f9f9',\n        userSelect: isEditing ? 'auto' : 'none', // ⬅️ prevent selecting text\n      }}\n    />\n  );\n}","pinCode":false,"dname":"6a1e4220-8c95-41b1-8819-b4ab5c278e9b","codeMode":"jsx","hide":true}}}],"version":"2.19.1"}
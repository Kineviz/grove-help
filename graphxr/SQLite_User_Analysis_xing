{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`#### Using SQLite as data store for User Analysis`","pinCode":false,"dname":"0db1f4e6-c281-4dc5-844a-dac7877af66a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof user_keyword=Inputs.text({label:'User filter'})","pinCode":false,"dname":"a561642e-9634-4f9c-83e3-505a4521f42e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof select_user ={\n  let condition=user_keyword.length > 0 ? `WHERE LOWER(user_id) LIKE LOWER('%${user_keyword}%')` : ''\n  let query = `SELECT * FROM User ${condition}`\n//   return query\n  return Inputs.table(db.query(query), {label:'User', required:false, columns:['user_id', 'num_access', 'last_time', 'first_time', 'total_time']})\n}","pinCode":false,"dname":"28417a09-6d89-4499-8f44-c4d3c88ae912","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Inputs.button('Push to GraphXR', {reduce: async ()=>{\n  let graph=await gxr().graph()\n  \n  let data = select_user.map(d=>({id: d._id, category: 'User', properties: d}))\n  graph.add(data)\n  return data\n}})","pinCode":false,"dname":"4c2c6c10-5e82-468c-9ad4-fec3fa1a41f0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"// Let's expand a single node first\nInputs.button('Expand Sessions from User', {reduce: async ()=>{\n// {\n  let nodes = selectedNodes\n  let category = nodes.map(n=>n.category)[0]\n  let id = nodes.map(n=>n.id)[0]\n  let query = `\n    SELECT Session.* from USER_SESSION \n    JOIN Session on USER_SESSION.target_id=Session._id\n    WHERE source_id='${id}'\n  `\n  let data = await db.query(query)\n  data = data.map(d=>({id: d._id, category: 'Session', properties: d}))\n  graph.add(data)\n\n  let edgeData=data.map(d=>({sourceId: id, targetId:d.id, relationship: 'USER_SESSION'}))\n//   graph.add([\n//     { sourceId: \"D\", targetId: \"E\", relationship: \"PRECEDES\" },\n//     { sourceId: \"E\", targetId: \"F\", relationship: \"PRECEDES\" },\n//   ]);\n  graph.add(edgeData)\n  \n  return edgeData\n//   return selectedNodes.map(n=>n.id)\n// }\n}})","pinCode":false,"dname":"065418e2-bf88-411c-b081-23ea1027a067","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md `#### Data`","pinCode":false,"dname":"147eccdb-8ca2-406c-ac18-b28d46239ea2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"db.describe()","pinCode":true,"dname":"28010296-7c18-46d7-9bcb-635240fc39df","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"schema=({\n  Category:['Session', 'User'],\n  Relationship: ['USER_SESSION']\n})","pinCode":true,"dname":"eec7084f-5690-4c05-9500-583ae6536a88","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"// Load csv into SQLite\ndb={\n  let db=new SQLiteDatabaseClientEx()\n  await db.createTableFromCSV(\"Session\", csv_data, [\"session_id\", \"duration\",\"latitude\",\"longitude\"])\n  \n  // Create User Table\n  await db.query(` \n    DROP TABLE IF EXISTS User;\n\n    CREATE TABLE User AS\n    SELECT user_id as _id, user_id, min(time) AS first_time, max(time) AS last_time, count(*) AS num_access, sum(duration) AS total_time FROM Session GROUP BY user_id\n  `)\n  \n  // Create edge USER_SESSION table\n  await db.query(`\n    DROP TABLE IF EXISTS USER_SESSION;\n\n    CREATE TABLE USER_SESSION AS\n    SELECT  User._id as source_id, Session._id as target_id\n    FROM Session\n    JOIN User ON Session.user_id = user.user_id\n  `)\n  \n  return db\n}\n","pinCode":false,"dname":"92f93e2d-48e0-4d17-9e4a-1c56c93e7c9e","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"csv_data={\n  let raw_data=await FileAttachment(\"#data/2019-12-31_to_2024-10-24_with_lat_long_no_undefined.csv\").csv() \n  return raw_data.map(d=>({_id: d.session_id, ...d}))\n}","pinCode":false,"dname":"ed2510cc-ff1b-4274-b6f5-cbb36af1d7dc","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"md `#### Appendix`","pinCode":false,"dname":"5bd8439f-1c86-4721-b203-ec4950f7e3b5","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"class SQLiteDatabaseClientEx extends SQLiteDatabaseClient  {\n  constructor(buffer) {\n    super(Promise.resolve(buffer).then(buffer => new SQLite(buffer)));\n  }\n  async query(sql, params) {\n    return (await this._db).exec(sql, params);\n  }\n  async queryRow(sql, params) {\n    return (await this.query(sql, params))[0];\n  }\n  async explain(sql, params) {\n    const rows = (await this.query(`EXPLAIN QUERY PLAN ${sql}`, params));\n    const text = rows.map(row => row.detail).join(\"\\n\");\n    const pre = document.createElement(\"PRE\");\n    pre.className = \"observablehq--inspect\";\n    pre.appendChild(document.createTextNode(text));\n    return pre;\n  }\n  async describe(object) {\n    if (object !== undefined) {\n      const [row] = await this.query(`SELECT * FROM '${object}' LIMIT 1`);\n      const value = Object.entries(row).map(([column_name, value]) => ({\n        column_name,\n        data_type: typeof value === \"string\" ? \"character varying\"\n            : typeof value === \"number\" ? \"integer\"\n            : undefined,\n        column_default: null,\n        is_nullable: \"YES\"\n      }));\n      const table = html`\n        <table>\n          <thead>\n            <tr>\n              <th>column_name</th>\n              <th>data_type</th>\n              <th>column_default</th>\n              <th>is_nullable</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${value.map(({column_name, data_type, column_default, is_nullable}) => html`\n              <tr>\n                <td>${column_name}</td>\n                <td>${data_type}</td>\n                <td>${column_default}</td>\n                <td>${is_nullable}</td>\n              </tr>\n            `)}\n          </tbody>\n        </table>\n      `;\n      table.value = value;\n      return table;\n    } else {\n      const rows = await this.query(`SELECT name FROM sqlite_master WHERE type = 'table'`);\n      const table = html`\n        <table>\n          <thead>\n            <tr>\n              <th>name</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${rows.map(({name}) => html`\n              <tr>\n                <td>${name}</td>\n              </tr>\n            `)}\n          </tbody>\n        </table>\n      `;\n      table.value = [{table_schema: \"public\", table_name: \"names\"}];\n      return table;\n    }\n  }\n  async createTableFromCSV(tableName, data, numericFields){\n    let sqlify = (function sqlify(str) { return str.replace(/ /g,\"_\").toLowerCase(); })\n\n    let sqlify2 = (function sqlify2(str) { return str.replace(/ |:|\\'|\\\"|\\[|\\]|[\\r]?\\n|%|\\//g,\"_\").toLowerCase(); })\n\n    const sqldata = data,\n          table = tableName || \"table_name\",\n          cols = Object.keys(sqldata[0]).map(d=> (`${sqlify(d)}${(numericFields.indexOf(sqlify(d)) > -1) ? \" numeric\" : \"\"}`)).join(\", \"),\n          insertCols = Object.keys(sqldata[0]).map(d=> (sqlify(d))).join(\", \"),\n          placeholders = Object.keys(sqldata[0]).fill('?').join(\", \");\n\n    let sqlCreateTable = `CREATE TABLE ${table} (${cols});`;\n    console.log(numericFields)\n    console.log(sqlCreateTable)\n    \n    await this.query(`drop table if exists ${table} `)\n    \n    await this.query(sqlCreateTable) // create table\n\n    let sqlInsertTemplate = `INSERT INTO ${table} (${insertCols}) VALUES (${placeholders});`;\n\n    sqldata.forEach(insert => {\n      this.query(sqlInsertTemplate, Object.values(insert));\n    })    \n  }\n}","pinCode":false,"dname":"cf407888-021f-46a7-8a93-98cdeedc0f4c","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"class SQLite {\n  constructor(buffer) {\n    Object.defineProperties(this, {\n      _db: {value: new SQL.Database(buffer && new Uint8Array(buffer))}\n    });\n  }\n  dispose() {\n    this._db.close();\n  }\n  async exec(sql, params) {\n    if (params !== undefined) {\n      let i = -1;\n      sql = sql.replace(/\\?/g, () => {\n        const param = params[++i];\n        return Array.isArray(param)\n          ? new Array(param.length).fill(\"?\")\n          : \"?\";\n      });\n      params = params.flat(1);\n    }\n    const [result] = await this._db.exec(sql, params);\n    if (!result) return [];\n    const {columns, values} = result;\n    return values.map(row => {\n      const object = {};\n      for (let i = 0; i < row.length; ++i) object[columns[i]] = row[i];\n      return object;\n    });\n  }\n  static async open() {\n    return new SQLite(await fetch(...arguments).then(response => response.arrayBuffer()));\n  }\n}","pinCode":false,"dname":"21674516-814f-427f-8a6e-09e2229ef851","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"SQL = {\n  const [init, path] = await Promise.all([\n    require(\"sql.js@1\"),\n    require.resolve(\"sql.js@1/dist/\").then(path => path.replace(/\\.js$/, \"\"))\n  ]);\n  return init({locateFile: file => path + file});\n}","pinCode":false,"dname":"02aaaa22-aaa0-47f4-9310-eff3c77c7527","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"API=_app.controller.API","pinCode":false,"dname":"5df24ceb-f9ce-495a-a2cb-6b1153d344b7","codeMode":"javascript2","hide":true}}},{"type":"antChart","data":{"chartConfigs":{"4d26f734-6794-4b5b-ab82-83266c753781":{"chartKey":"4d26f734-6794-4b5b-ab82-83266c753781","createTime":1731308155147,"renderType":"Chart","active":true,"fetchPeriod":0,"reD":{"dbTable":true,"query":"","selectedTable":"User","filters":[{}],"selectedColumns":["_id","user_id","first_time","last_time","num_access","total_time"],"sorts":[{}],"slice":{"to":100,"from":0}},"text":"","selectedCategoryFrom":"client","selectedCategory":"db","selectedClientType":"sqlite","selectedProperties":["first_time","last_time","num_access"],"selectedDb":"","chartData":[],"emptyFills":{},"castColumns":{},"joinColumns":{},"chartColumns":[],"type":"Heatmap","options":{"xField":"first_time","yField":"last_time","colorField":"num_access","title":{"text":"heatmap chart","size":{"displayConfig":{"type":"Select"},"selector":["h1","h2","h3","h4","h5","h6"],"value":"h6"}},"description":{"text":"a heatmap chart"},"padding":{"displayConfig":{"type":"Padding"},"value":"auto"},"legend":{"displayConfig":{"type":"Off","offValue":false},"position":{"displayConfig":{"type":"Select"},"selector":["top","top-left","top-right","left","left-top","left-bottom","right","right-top","right-bottom","bottom","bottom-left","bottom-right"],"value":"top-left"},"offsetX":0,"offsetY":0},"autoFit":true,"renderer":{"displayConfig":{"type":"Select"},"selector":["canvas","svg"],"value":"canvas"},"type":{"displayConfig":{"type":"Select"},"selector":["polygon","density"],"value":"polygon"},"color":{"displayConfig":{"type":"Off","onValue":[{"displayConfig":{"type":"Color"},"value":"#d62728"},{"displayConfig":{"type":"Color"},"value":"#2ca02c"},{"displayConfig":{"type":"Color"},"value":"#000000"}]}},"xAxis":{"title":{"text":"first_time","autoRotate":true},"label":{"offset":10,"offsetX":0,"offsetY":0,"rotate":{"displayConfig":{"type":"Number"},"minV":0,"maxV":10,"step":0.01,"value":0},"autoRotate":true,"autoHide":false,"style":{"displayConfig":{"type":"Off"},"fontSize":10,"textAlign":{"displayConfig":{"type":"Select"},"selector":["left","center","right"],"value":"center"},"fill":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"var(--text-color)"}}}}},"tickLine":{"length":5},"grid":{"displayConfig":{"type":"Off","offValue":null},"line":{"style":{"lineWidth":1}}},"min":{"displayConfig":{"type":"Off","offValue":false,"onValue":0}},"tickInterval":{"displayConfig":{"type":"Off","offValue":false,"onValue":5}}},"yAxis":{"title":{"text":"last_time","autoRotate":true},"label":{"offset":10,"offsetX":0,"offsetY":0,"rotate":{"displayConfig":{"type":"Number"},"minV":0,"maxV":10,"step":0.01,"value":0},"autoRotate":true,"autoHide":false,"style":{"displayConfig":{"type":"Off"},"fontSize":10,"textAlign":{"displayConfig":{"type":"Select"},"selector":["left","center","right"],"value":"center"},"fill":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"var(--text-color)"}}}}},"tickLine":{"length":5},"grid":{"displayConfig":{"type":"On","offValue":null},"line":{"style":{"lineWidth":1}}},"min":{"displayConfig":{"type":"On","offValue":false,"onValue":0}},"tickInterval":{"displayConfig":{"type":"Off","offValue":false,"onValue":5}}},"interactions":[{"type":{"displayConfig":{"type":"Select"},"selector":["element-active","element-selected","element-single-selected","element-highlight","element-highlight-by-color","element-highlight-by-x","legend-highlight","axis-label-highlight"],"value":"element-active"}},{"type":{"displayConfig":{"type":"Select"},"selector":["element-active","element-selected","element-single-selected","element-highlight","element-highlight-by-color","element-highlight-by-x","legend-highlight","axis-label-highlight"],"value":"element-selected"}}],"label":{"displayConfig":{"type":"Off"},"offset":10,"offsetX":0,"offsetY":0,"style":{"displayConfig":{"type":"Off"},"fontSize":10,"textAlign":{"displayConfig":{"type":"Select"},"selector":["left","center","right"],"value":"center"},"fill":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"var(--text-color)"}}}}},"shape":{"displayConfig":{"type":"Select"},"selector":["rect","square","circle"],"value":"rect"},"appendPadding":{"displayConfig":{"type":"AppendPadding"},"value":0},"linkMain":true,"data":[]}},"3226e5d3-e121-4002-8c37-2aa87b7c0b47":{"chartKey":"3226e5d3-e121-4002-8c37-2aa87b7c0b47","createTime":1731333178361,"renderType":"Chart","active":true,"fetchPeriod":0,"text":"","selectedCategoryFrom":"client","selectedCategory":"db","selectedProperties":["source_id","target_id"],"selectedDb":"","chartData":[],"emptyFills":{},"castColumns":{},"joinColumns":{},"chartColumns":[],"type":"Basic Line","options":{"xField":"source_id","yField":"target_id","title":{"text":"line chart","size":{"displayConfig":{"type":"Select"},"selector":["h1","h2","h3","h4","h5","h6"],"value":"h6"}},"description":{"text":"a simple line chart"},"padding":{"displayConfig":{"type":"Padding"},"value":"auto"},"autoFit":true,"renderer":{"displayConfig":{"type":"Select"},"selector":["canvas","svg"],"value":"canvas"},"smooth":false,"legend":{"displayConfig":{"type":"Remove","offValue":false},"position":{"displayConfig":{"type":"Select"},"selector":["top","top-left","top-right","left","left-top","left-bottom","right","right-top","right-bottom","bottom","bottom-left","bottom-right"],"value":"top-left"},"flipPage":true,"offsetX":0,"offsetY":0},"stepType":{"displayConfig":{"type":"Select"},"selector":["","hv","vh","hvh","vhv"],"value":""},"lineStyle":{"displayConfig":{"type":"On","onValue":{"lineWidth":2}}},"label":{"displayConfig":{"type":"Off"},"offset":10,"offsetX":0,"offsetY":0,"style":{"displayConfig":{"type":"Off"},"fontSize":10,"textAlign":{"displayConfig":{"type":"Select"},"selector":["left","center","right"],"value":"center"},"fill":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"var(--text-color)"}}}}},"point":{"displayConfig":{"type":"Off"},"size":5,"shape":{"displayConfig":{"type":"Select"},"selector":["circle","point","square","diamond","hexagon","triangle","cross"],"value":"circle"}},"xAxis":{"title":{"displayConfig":{"type":"Off"},"text":"source_id","autoRotate":true},"label":{"offset":10,"offsetX":0,"offsetY":0,"rotate":{"displayConfig":{"type":"Number"},"minV":0,"maxV":10,"step":0.01,"value":0},"autoRotate":false,"autoHide":true,"style":{"displayConfig":{"type":"Off"},"fontSize":10,"textAlign":{"displayConfig":{"type":"Select"},"selector":["left","center","right"],"value":"center"},"fill":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"var(--text-color)"}}}}},"tickLine":{"displayConfig":{"type":"Off"},"length":5},"grid":{"displayConfig":{"type":"Off","offValue":null},"line":{"style":{"lineWidth":1}}},"min":{"displayConfig":{"type":"Off","offValue":false,"onValue":0}},"tickInterval":{"displayConfig":{"type":"Off","offValue":false,"onValue":5}}},"yAxis":{"title":{"displayConfig":{"type":"Off"},"text":"target_id","autoRotate":true},"label":{"offset":10,"offsetX":0,"offsetY":0,"rotate":{"displayConfig":{"type":"Number"},"minV":0,"maxV":10,"step":0.01,"value":0},"autoRotate":false,"autoHide":true,"style":{"displayConfig":{"type":"Off"},"fontSize":10,"textAlign":{"displayConfig":{"type":"Select"},"selector":["left","center","right"],"value":"center"},"fill":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"var(--text-color)"}}}}},"tickLine":{"displayConfig":{"type":"Off"},"length":5},"grid":{"displayConfig":{"type":"On","offValue":null},"line":{"style":{"lineWidth":1}}},"min":{"displayConfig":{"type":"On","offValue":false,"onValue":0}},"tickInterval":{"displayConfig":{"type":"Off","offValue":false,"onValue":5}}},"color":{"displayConfig":{"type":"Off","onValue":{"displayConfig":{"type":"Color"},"value":"#5B8FF9"}}},"interactions":[{"type":{"displayConfig":{"type":"Select"},"selector":["element-active","element-selected","element-single-selected","element-highlight","element-highlight-by-color","element-highlight-by-x","legend-highlight","axis-label-highlight"],"value":"element-active"}},{"type":{"displayConfig":{"type":"Select"},"selector":["element-active","element-selected","element-single-selected","element-highlight","element-highlight-by-color","element-highlight-by-x","legend-highlight","axis-label-highlight"],"value":"element-selected"}}],"appendPadding":{"displayConfig":{"type":"AppendPadding"},"value":0},"tooltip":{"showContent":true,"shared":true,"customContent":{"displayConfig":{"a":[],"type":"On","onValue":{"displayConfig":{"type":"JsText"},"value":"(title, data) => {\n                    debugger;\n                    let datas = _.uniq(_.map(data,(d)=>{\n                        return d.data?.datum?.SOURCE_CHART_DATA || d.data?.SOURCE_CHART_DATA || d.data?.datum || d.data;\n                    }))\n                    let bs = _.map(data, (d) => d.name);\n                    return datas.length && _.reduce(datas, (p,d,i)=>{ p += _.reduce(d, (prev, v, k) => {\n                        if (\"SPECIAL_GRAPHXR_NODE_ID\" !== k && \"SOURCE_CHART_DATA\" !== k) {\n                            if (~bs.indexOf(k)) {\n                                prev += (`<div class=\"d-flex justify-content-between\"><div><b> <span class=\"fas fa-circle f10\" style=\"color:${data[bs.indexOf(k)].color}\"></span>${k}&nbsp;&nbsp;</b></div><div><b>${v}</b></div></div>`)\n                            } else {\n                                prev += (`<div class=\"d-flex justify-content-between\"><div>${k}&nbsp;&nbsp;</div><div>${v}</div></div>`)\n                            }\n                        }\n                        return prev;\n                    }, (i == 0 ? \"\" : \"<hr>\") + (`<div class=\"mb1\"><b> <span class=\"fas fa-circle f10\" style=\"color:${data[i].color}\"></span>${data[i].title}</b></div>`));\n                    return p;\n                    }, \"\")\n                }"},"offValue":false}}},"linkMain":{"selectGraphNode":true,"flyTo":{"displayConfig":{"type":"Select"},"selector":["none","center","node"],"value":"node"}}},"selectedClientType":"sqlite","reD":{"dbTable":true,"query":"","selectedTable":"USER_SESSION","filters":[{}],"selectedColumns":["source_id","target_id"],"sorts":[{}],"slice":{"to":100,"from":0}}}},"layouts":{"lg":[{"w":12,"h":11,"x":0,"y":11,"i":"4d26f734-6794-4b5b-ab82-83266c753781","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":12,"h":11,"x":0,"y":0,"i":"3226e5d3-e121-4002-8c37-2aa87b7c0b47","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":3,"h":4,"x":0,"y":22,"i":"add","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":false,"isResizable":false}],"sm":[{"w":6,"h":11,"x":0,"y":0,"i":"4d26f734-6794-4b5b-ab82-83266c753781","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":6,"h":9,"x":0,"y":11,"i":"3226e5d3-e121-4002-8c37-2aa87b7c0b47","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":true,"isResizable":true},{"w":6,"h":4,"x":0,"y":20,"i":"add","minW":2,"minH":3,"moved":false,"static":false,"isDraggable":false,"isResizable":false}],"md":[{"w":3,"h":4,"x":0,"y":0,"i":"3226e5d3-e121-4002-8c37-2aa87b7c0b47","minW":2,"minH":3,"isResizable":true,"isDraggable":true}],"xs":[{"w":4,"h":4,"x":0,"y":0,"i":"3226e5d3-e121-4002-8c37-2aa87b7c0b47","minW":2,"minH":3,"isResizable":true,"isDraggable":true}],"xxs":[{"w":2,"h":4,"x":0,"y":0,"i":"3226e5d3-e121-4002-8c37-2aa87b7c0b47","minW":2,"minH":3,"isResizable":true,"isDraggable":true}]},"dname":"773ce3ad-04ce-470b-ae27-eebf49ec1597"}}],"version":"2.19.1"}
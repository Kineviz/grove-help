{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Introduction to require\n\nObservable’s [require](https://github.com/observablehq/stdlib/blob/master/README.md#require) lets you use thousands of open-source JavaScript modules in your notebooks. If you can think of a task—say date manipulation, math, or music—there’s probably already a module that can help. Just as you can [reuse code from other notebooks using imports](/@observablehq/introduction-to-imports), you can load JavaScript modules using require.\n\nHere’s an example requiring [Simple Statistics](https://www.npmjs.com/package/simple-statistics), a module that includes many statistical functions, to compute a standard deviation.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"simpleStatistics = (require(\"simple-statistics@7\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"simpleStatistics.standardDeviation([1, 2, 3])","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## How to use require\n\nThe argument to the require function can be any of the following:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### A module name and a version\nThe most common case specifies a _name_, an at sign (@), and a _version_. You can use a [semantic version specifier](https://semver.npmjs.com/) for a range of versions, as below for releases 2.*x*.*x* of the [moment](https://momentjs.com/) date and time library.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"moment2 = (require(\"moment@2\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### A module name\nIf you don’t mind your notebook potentially breaking when a new version of the library is released, omit the version to get the latest version.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"moment = (require(\"moment\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"moment(\"January 2, 2018\").subtract(1, \"year\").year()","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### A module name, a version, and a path\nSometimes you want to include an individual file from a module, rather than its main exported interface. This is less common, but can be useful for modules that have add-ons or that don’t declare which file to expose as the default. Instead of relying on auto-detection, you can specify the file directly. For example, here’s how we can load [D3.js](https://d3js.org) version 6:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"d3v6 = (require(\"d3@6/dist/d3.min.js\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### A module name and a path\n\nOf course, you can omit the version. However, this is not recommended as a new version of the library may introduce breaking changes, including changing the path of the file you wanted to load.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"d3 = (require(\"d3/dist/d3.min.js\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### A URL\nYou can also specify a full URL to require. This lets you point require at any server, even [localhost](https://en.wikipedia.org/wiki/Localhost). For example, we can load [ganja.js](https://github.com/enkimute/ganja.js) from [jsDelivr](https://www.jsdelivr.com/).<a href='#urlNotes'>*</a>`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"ganja = (require(\"https://cdn.jsdelivr.net/npm/ganja.js@1.0.194/ganja.js\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`This technique can even be used to require a local JavaScript file, though you’ll have to choose the file each time you open the notebook.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof source = (html`<input type=file accept=\".js\">`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"module = (require(URL.createObjectURL(source)))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Multiple inputs\nSpecifying multiple inputs—multiple module names, or URLs, or module names with a path—will load all of the named things and combine their exports into one object. This is especially useful for libraries that are designed to work together, such as D3’s constituent modules.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"d3CsvAndFetch = (require(\"d3-dsv@3\", \"d3-selection@3\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Require’s return value\n\nRequire returns a promise with the module’s contents, or, if the module can’t be loaded, a promise rejection.\n\nMost of the time, you’ll use require in a cell of its own, as in the examples above, so you won’t need to worry about the return value being asynchronous. But if you do want to use require in the context of other code, you’ll need to await the value of the promise it returns. (Observable implicitly awaits promises across cell boundaries. For more information, see [Introduction to Promises](https://observablehq.com/@observablehq/introduction-to-promises?collection=@observablehq/javascript-in-observable).)`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  // using await to resolve the Promise returned by require\n  let _ = await require(\"lodash@4\");\n  // using the module\n  return _.filter([1, 2, 0]);\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Example promise rejection (error in red below)`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`In some cases, require won’t find a module or won’t be able to load it, and will return a promise rejection.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"notValid = (require(\"@observablehq/not-a-real-npm-module\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you’re running into issues requiring a module, try using the [module require debugger](/@tmcw/module-require-debugger), reading our [guide to requiring stubborn modules](/@observablehq/how-to-require-stubborn-modules), or [asking in the forum](https://talk.observablehq.com/).`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Require’s behavior\n\nBy default, require uses modules published on [npm](https://www.npmjs.com/), a service that hosts over 1&nbsp;million different modules<a href='http://www.modulecounts.com/'>*</a> created by thousands of individual developers. Because notebooks run in a web environment, we use another service, [jsDelivr](https://www.jsdelivr.com/), that takes npm’s modules and makes them accessible to browsers.\n\nFor example, if we call require with the argument \\\\\\`\"d3@7\"\\\\\\`, it resolves to \\\\\\`\"${await require.resolve(\"d3@7\")}\"\\\\\\`, which is the full URL for the D3 visualization library. You can see the resolved URL by calling require.resolve.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"d3v7 = (require(\"d3@7\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"require.resolve(\"d3@7\")","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you see a require statement in a notebook, searching for its name on [npm](https://www.npmjs.com/) is likely to pull up its details. Here’s [the d3 package on npm](https://www.npmjs.com/package/d3), which links to its GitHub information and other documentation.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Requirements for require\n\nThe require function works with modules that include AMD distributions and that point to them in the \\`jsdelivr\\`, \\`unpkg\\` or \\`main\\` fields of their \\`package.json\\` files.<a href='#amdNotes'>*</a> Unfortunately, not all modules are compatible: some rely on the built-in functions in Node.js that have no equivalent in the browser, and others don’t include an AMD file that require can use.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## import: a way to require ES6 modules\n\nIn addition to require, which uses the widely-supported [AMD](https://github.com/amdjs/amdjs-api/blob/master/AMD.md) standard, we also support [dynamic import](https://developers.google.com/web/updates/2017/11/dynamic-import), a new way of requiring modules that aims to replace custom module loaders such as require.\n\nimport is a native browser feature that’s just now gaining adoption. It only works in the newest versions of Chrome, Safari, Firefox, and Edge. It also requires modules to be published in the [ES6 module specification](http://exploringjs.com/es6/ch_modules.html), which is still gaining adoption.\n\nIf the library is also published to npm, [Skypack](https://www.skypack.dev) provides a fast CDN; otherwise, consider [attaching a file](/@observablehq/file-attachments).`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"d3v7_esm = (import(\"https://cdn.skypack.dev/d3@7\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Additional resources\n\n- [A debugger for require](/@tmcw/module-require-debugger)\n- [A guide to troubleshooting require](/@observablehq/how-to-require-stubborn-modules)\n- [An introduction to imports](/@observablehq/introduction-to-imports) (like require, but across notebooks)\n- [d3-require, the module that powers Observable’s require](https://github.com/d3/d3-require)\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Footnotes`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"urlNotes = (md`### About URLs\nIf you’re using require with a URL, be sure to follow these requirements for the URL and server:\n  - Use \\`https\\` URLs only, not \\`http\\`.\n\n  - Use a file with a correct Content-Type header to be used as JavaScript. For example, \\`raw.githubusercontent.com\\` serves JavaScript files as \\`text/plain\\`, which your browser cannot execute as JavaScript - which is why we often use \\`jsDelivr\\` instead.`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"amdNotes = (md`### About AMD modules\n\nRequire works with a _subset_ of AMD modules that includes the vast majority of such modules: the strict specification is [documented by d3-require](https://github.com/d3/d3-require#d3-require), the module that powers Observable’s require.`)","pinCode":false}}}],"version":"2.19.1"}
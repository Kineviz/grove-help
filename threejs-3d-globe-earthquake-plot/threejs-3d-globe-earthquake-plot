{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# ThreeJS 3D Globe Earthquake Plot`","pinCode":false,"dname":"66892a74-0ce5-4815-a0b1-d56a940bcc18","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`\nA ThreeJS variation on a frequent D3 visualization, this will use the last month's earthquake data from USGS (all earthquakes with 2.5+ magnitude) and plot them on a 3D globe, with bar size and color proportional to earthquake magnitude. The scale that I'm using for bar size is exponential but doesn't grow at quite the same rate as the true Richter scale.\n\nDatasets can be found here: https://earthquake.usgs.gov/earthquakes/feed/v1.0/csv.php\n\n(Originally forked from @3sam3/threejs-edge-glowing-bar-standing-globe and kept a lot of the same logic for plotting bars, though I had to flip a couple of signs, in the getBars function and on the coordinate longitude, to get the coordinates to plot properly on the globe).\n`","pinCode":false,"dname":"9ef5b45c-f948-465d-82fa-6bf63e6cb3de","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof magnitudeRange = (rangeSlider({\n  min: 2.5,\n  max: 9,\n  step: 0.1,\n  value: this ? this.value : [2.5,9],\n  title: 'Visible Magnitudes',\n  // description: 'The optional description.',\n}))","pinCode":false,"dname":"4fa833f3-cec5-4893-8868-9fe4fe6e1394","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof dateRange = (rangeSlider({\n  min: 0,\n  max: dateGap,\n  step: 1,\n  value: this ? this.value : [0, dateGap],\n  title: 'Date of Measurement',\n  format: d => startDate.clone().add(d, 'days').format('MMMM Do, YYYY')\n}))","pinCode":false,"dname":"b37b6b03-12da-4a8a-acf8-6b5c71fb1c65","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof earthSurface = (Select(\n  earthImages,\n  {\n    format: x => x.label,\n    label: \"Earth Surface\",\n    value: earthImages.find(material => material.label === \"Satellite\")\n  }))","pinCode":false,"dname":"2622d29c-cc49-49fd-a1b4-ad0b2711548f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof autoRotate = (Toggle({label: \"Auto-rotate?\", value: true}))","pinCode":false,"dname":"60bf932e-2d51-4f8b-9ab0-b7b92c62d450","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"globe = {\n  renderer.setSize(width, height);\n\n  // globe + atmosphere geometry\n  const geometry = new THREE.SphereGeometry(globeRadius, 35, 35);\n  // geometry.scale( -1, 1, 1);\n\n  // globe\n  globeMesh.geometry = geometry;\n  globeMesh.material = earthMaterial;\n  // gMesh.rotation.y = Math.PI;\n  scene.add(globeMesh);\n\n  // atmosphere\n  // const aMesh = new THREE.Mesh(geometry, material);\n  // aMesh.scale.set( 1.1, 1.1, 1.1 );\n  // scene.add(aMesh);\n\n  // Add bars to scene\n  plotBars({ scene, data: earthquakeData });\n\n  // Add lights (defined below)\n  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionalLight.position.set(100, 100, 100);\n  scene.add(ambientLight);\n\n  // orbitcontrols\n  // const controls = new THREE.OrbitControls(camera, renderer.domElement);\n  controls.autoRotate = true;\n  controls.autoRotateSpeed = 1.0;\n  controls.minDistance = 300;\n  controls.maxDistance = 1500;\n\n  // render\n  const render = () => {\n    requestAnimationFrame(render);\n    controls.update();\n\n    // camera.lookAt(gMesh.position);\n    renderer.render(scene, camera);\n  };\n  render();\n\n  return renderer.domElement;\n}","pinCode":false,"dname":"be778075-37ed-48a5-83e0-f6fca56f0b5f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"updateAutoRotate = {\n  controls.autoRotate = autoRotate;\n}","pinCode":false,"dname":"68fea6d2-0792-4f25-9136-167c60c0569d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"controls = (new THREE.OrbitControls(camera, renderer.domElement))","pinCode":false,"dname":"e2691328-c822-4ccf-a977-71b2bbc25070","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"renderer = (new THREE.WebGLRenderer({ antialias: true }))","pinCode":false,"dname":"65f08e27-b690-4f0c-8b97-264f53673ef9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"globeMesh = (new THREE.Mesh())","pinCode":false,"dname":"27800513-b8b0-43c2-8a21-20d66fb0f4bd","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"ambientLight = (new THREE.AmbientLight(0xffffff))","pinCode":false,"dname":"0130c1c2-a116-4d41-957d-9f0315b622db","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"earthMaterial = (new THREE.MeshPhongMaterial({\n    map: mapTexture,\n    // bumpMap: bumpTexture,\n    // bumpScale: 10\n}))","pinCode":false,"dname":"f759cb8d-80af-4471-bce6-2b0b51222ba9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"blackWhiteMaterial = {\n  const mapImage = await FileAttachment('world.jpg').url();\n  const textureLoader = new THREE.TextureLoader();\n  const earthMap = textureLoader.load(mapImage);\n  earthMap.mapping = THREE.EquirectangularReflectionMapping;\n  earthMap.encoding = THREE.sRGBEncoding;\n\n  return new THREE.MeshPhongMaterial({\n    map: earthMap,\n    emissive: 0xffffff,\n    emissiveIntensity: 0.1\n  });\n}","pinCode":false,"dname":"d01fcc92-c514-41ec-8945-0a6e3773eed1","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"bumpTexture = {\n  const bumpMap = await FileAttachment(\"earthbump_4k.jpg\").url();\n  const loader = new THREE.TextureLoader();\n  const bump = loader.load(bumpMap);\n  return bump;\n}","pinCode":false,"dname":"e8b86ee7-16fc-4b8e-a615-607bc44a1423","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"plotBars = (({ scene, data }) => {\n  const bars = new THREE.Object3D();\n\n  // Test data to determine that sign of longitude has to be flipped for some reason:\n  // 36.477,\t-117.5191667 (should appear be in southeast California)\n    \n  data.forEach(earthquake => {\n    const magnitude = parseFloat(earthquake.mag);\n    \n    const bar = getBar({\n      lat: parseFloat(earthquake.latitude),\n      lng: -(parseFloat(earthquake.longitude)),\n      height: magnitudeHeightScale(Math.exp(magnitude)),\n      barWidth: magnitudeRadiusScale(magnitude),\n      color: magnitudeColorScale(magnitude)\n    });\n    \n    bar.lookAt(new THREE.Vector3());\n    bars.add(bar);\n    \n  })\n\n  bars.name = \"Earthquake Bars\";\n  scene.add(bars);\n})","pinCode":false,"dname":"d39af333-e918-4ab4-b457-6cad4f0a9232","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"getBar = (function getBar({lat, lng, height, barWidth, color}) {\n  // const geometry = new THREE.CylinderGeometry( 1, 1, height, 35 );\n  const geometry = new THREE.BoxBufferGeometry( barWidth, barWidth, height );\n  const material = new THREE.MeshBasicMaterial({ color });\n  const bar = new THREE.Mesh( geometry, material );\n  \n  const point = new THREE.Vector3();\n  const phi = (90 - lat) * (Math.PI / 180);\n  const theta = (180 - lng) * (Math.PI / 180);\n  \n  bar.position.x = -(globeRadius * Math.sin(phi) * Math.cos(theta));\n  bar.position.y = globeRadius * Math.cos(phi);\n  bar.position.z = globeRadius * Math.sin(phi) * Math.sin(theta);\n\n  return bar;\n})","pinCode":false,"dname":"a001eb03-8f49-4cf2-ad72-e07992fd9a3f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"currentData = (earthquakeData\n  .filter(a => +a.mag >= magnitudeRange[0] && +a.mag <= magnitudeRange[1])\n  .filter(a => {\n    const eventTime = moment(a.time);\n    const startBound = startDate.clone().add(dateRange[0], 'days');\n    const endBound = startDate.clone().add(dateRange[1], 'days');\n\n    return startBound <= eventTime && eventTime <= endBound;\n  }))","pinCode":false,"dname":"0333f36b-1bb1-43e8-9f43-1e58f858051b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"updateDataset = {\n  const existingBars = scene.getObjectByName(\"Earthquake Bars\");\n  scene.remove( existingBars );\n\n  plotBars({ scene, data: currentData });  \n}","pinCode":false,"dname":"f31b452a-27a2-484a-a0bf-520e1cf8c3f3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"updateEarthSkin = {\n  globeMesh.material = earthSurface.material;\n\n  ambientLight.intensity = earthSurface.label === \"Satellite\" ? 1.6 : 18;\n}","pinCode":false,"dname":"f27f791b-de68-4dc4-ae09-2091ea1496df","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"backgroundMap = {\n  const textureLoader = new THREE.TextureLoader();\n  const backgroundMap = textureLoader.load(stars);\n  backgroundMap.mapping = THREE.EquirectangularReflectionMapping;\n  backgroundMap.encoding = THREE.sRGBEncoding;\n\n  return backgroundMap;\n}","pinCode":false,"dname":"90d33c35-4af9-4393-9754-a1308ebfb8b9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"scene = (createScene())","pinCode":false,"dname":"8174a091-9922-474e-9993-6d82aa603798","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"createScene = (() => {\n  const scene = new THREE.Scene();\n  scene.background = backgroundMap;\n  return scene;\n})","pinCode":false,"dname":"79915096-89f1-434f-8f3d-f65251a959bf","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"shader = (Shaders['earth'])","pinCode":false,"dname":"c7802da5-ae2d-43d1-8c80-7143b4804d8e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"uniforms = (THREE.UniformsUtils.clone(shader.uniforms))","pinCode":false,"dname":"b3ad4962-fb89-401a-9e4e-0abc1e403772","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"magnitudeHeightScale = (d3\n  .scaleLinear()\n  .domain([0, Math.exp(9)])\n  .range([0, 1000]))","pinCode":false,"dname":"d8640086-7613-48e7-8725-e02d32b7a7a9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"magnitudeRadiusScale = (d3.scalePow()\n  .domain([0, 9])\n  .range([0.6, 5])\n  .exponent(4))","pinCode":false,"dname":"b3d7db6f-e3ba-4fdd-a956-e287be4c5473","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"magnitudeColorScale = (d3.scaleLinear()\n  .domain(d3.extent(earthquakeData, a => +a.mag))\n  .range([d3.color(\"yellow\"), d3.color(\"red\")]))","pinCode":false,"dname":"7d83ad12-1e98-48cd-9ae1-f45da5aa7c06","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"camera = {\n  const camera = new THREE.PerspectiveCamera(30, width / height, 0.1, 10000);\n  camera.position.z = distance;\n  return camera;\n}","pinCode":false,"dname":"e5b1702b-7716-4631-99f7-2bc0af0bb2ec","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"globeRadius = (200)","pinCode":false,"dname":"f0c8f908-57f4-4e8a-b800-6e001115a9b7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"height = (600)","pinCode":false,"dname":"35cdbcd8-bcc9-4144-b72f-23bd22223dc8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"distance = (1000)","pinCode":false,"dname":"0b4615c0-6422-4c5c-a78f-fb38251d19d3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Shaders = {\n  return  {\n    'earth' : {\n      uniforms: {\n        'texture': { type: 't', value: null }\n      },\n      vertexShader: [\n        'varying vec3 vNormal;',\n        'varying vec2 vUv;',\n        'void main() {',\n          'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n          'vNormal = normalize( normalMatrix * normal );',\n          'vUv = uv;',\n        '}'\n      ].join('\\n'),\n      fragmentShader: [\n        'uniform sampler2D texture;',\n        'varying vec3 vNormal;',\n        'varying vec2 vUv;',\n        'void main() {',\n          'vec3 diffuse = texture2D( texture, vUv ).xyz;',\n          'float intensity = 1.05 - dot( vNormal, vec3( 0.0, 0.0, 1.0 ) );',\n          'vec3 atmosphere = vec3( 1.0, 1.0, 1.0 ) * pow( intensity, 3.0 );',\n          'gl_FragColor = vec4( diffuse + atmosphere, 1.0 );',\n        '}'\n      ].join('\\n')\n    },\n    'atmosphere' : {\n      uniforms: {},\n      vertexShader: [\n        'varying vec3 vNormal;',\n        'void main() {',\n          'vNormal = normalize( normalMatrix * normal );',\n          'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n        '}'\n      ].join('\\n'),\n      fragmentShader: [\n        'varying vec3 vNormal;',\n        'void main() {',\n          'float intensity = pow( 0.8 - dot( vNormal, vec3( 0, 0, 1.0 ) ), 12.0 );',\n          'gl_FragColor = vec4( 1.0, 1.0, 1.0, 1.0 ) * intensity;',\n        '}'\n      ].join('\\n')\n    }\n  };\n}","pinCode":false,"dname":"cf3081f2-d527-40f2-9f55-f3db3d21aa76","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"THREE = {\n  const THREE = (window.THREE =\n    await require(\"three@0.142.0/build/three.min.js\"));\n  await require(\"three@0.142.0/examples/js/controls/OrbitControls.js\").catch(\n    () => {}\n  );\n  return THREE;\n}","pinCode":false,"dname":"27216b5f-853f-4179-af1d-7064be3ee5ad","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mapTexture = {\n  // const mapImage = await FileAttachment('world.jpg').image();\n  const mapImage = await FileAttachment(\"8k_earth_daymap.jpeg\").url();\n  // const mapImage = await FileAttachment(\"earthmap_4k.jpg\").url();\n\n  const textureLoader = new THREE.TextureLoader();\n  const earthMap = textureLoader.load(mapImage);\n  earthMap.mapping = THREE.EquirectangularReflectionMapping;\n  earthMap.encoding = THREE.sRGBEncoding;\n\n  return earthMap;\n}","pinCode":false,"dname":"7d602ab8-3408-4351-afd0-921b7fd634bc","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"earthImages = ([\n  {\n    label: \"Satellite\",\n    image: new THREE.Texture(await FileAttachment(\"8k_earth_daymap.jpeg\").url()),\n    material: earthMaterial\n  },\n  {\n    label: \"Black and White\",\n    image: new THREE.Texture(await FileAttachment('world.jpg').url()),\n    material: blackWhiteMaterial\n  }\n])","pinCode":false,"dname":"562a102b-5a90-4e03-b8da-a7f6d6a9d0f4","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"clouds = (await FileAttachment('8k_earth_clouds.jpeg').url())","pinCode":false,"dname":"c3c52448-3c5f-4dba-a9c6-60b03b0e5b03","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"stars = (await FileAttachment(\"stars_magnified.jpg\").url())","pinCode":false,"dname":"f33730fa-80f0-45a4-a2ba-aa0156f71595","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"dateGap = (Math.ceil((endDate - startDate) / 86400000))","pinCode":false,"dname":"5f4ca308-9493-41d8-8783-b27422f98a05","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"endDate = (moment(d3.max(earthquakeData, a => a.time)))","pinCode":false,"dname":"33fe58a9-709e-481f-9a73-5ca3d4604011","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"startDate = (moment(d3.min(earthquakeData, a => a.time)))","pinCode":false,"dname":"3ed0449a-bc3e-496d-99b7-f490b65b9351","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"earthquakeData = (d3.csv(dataUrl))","pinCode":false,"dname":"6172f4f3-47a8-4ce6-ad92-954cc844cd37","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"dataUrl = (\"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_month.csv\")","pinCode":false,"dname":"ec6e9e1a-10ee-4651-836d-ba7a8f262e34","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"d3 = (require(\"d3@6\"))","pinCode":false,"dname":"f7e3049c-afcf-4088-8989-4c3f6fcafd45","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"moment = (require('moment'))","pinCode":false,"dname":"1317a597-819a-4424-9666-c1297c1f6c0a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { Select,Range,Toggle }  from 'threejs-3d-globe-earthquake-plot/inputs'","pinCode":false,"dname":"d6df3dff-a2eb-4ded-a86e-0e2bfc1c06ae","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { rangeSlider }  from 'threejs-3d-globe-earthquake-plot/range-slider'","pinCode":false,"dname":"a7a50d30-01c8-427f-89aa-070c27a8d70c","codeMode":"javascript2"}}}],"version":"2.19.1"}
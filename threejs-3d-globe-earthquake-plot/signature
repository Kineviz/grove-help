{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Signature - A Documentation Toolkit\n<!-- keywords: javadoc docgen docblock -->\n\nThis notebook offers a set of documentation helpers.\n\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`\n~~~js\nimport {signature, getPinnedSlug} from '${PINNED_LIB}'\n~~~\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`\nFeatures:\n- automatic formatting of function signatures\n- simple configuration for descriptions and examples\n- collapsible sections, optionally collapsed by default\n- optional test runner\n- theming support\n\nFor more examples in the wild please see [Toolbox](https://observablehq.com/d/691ae3b95f02db79).\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"signature(signature, {\n  description: md`\nDocumentation template for functions. Extracts the function head from the function passed to **\\`fn\\`**:\n- If \\`fn\\` is a named function, the head is returned as written. If \\`name\\` was set, it will replace the function name.\n- If \\`fn\\` is an arrow function, the declaration will be reformatted and the \\`function\\` keyword injected. If \\`name\\` was set, it will be injected as the function name.\n- Any other argument type is passed through unaltered.\n\n**Note:** Javascript may infer the function name from the variable to which a function was first assigned.\n\nAll settings are optional. Available **\\`options\\`**:\n${Object.entries({\n      description: 'Rendered as Markdown if a string, otherwise passed through.',\n      example:  'Single value or array of values. String values are formatted as Javascript code, everything else gets passed through.',\n      name: 'Anchor name to link to. Defaults to function name.',\n      scope: 'Class name to scope CSS selectors. Defaults to unique string.',\n      css: 'The theme CSS. If \\`scope\\` is used, the CSS should start every selector with \\`:scope\\`. Defaults to \\`signature_theme\\`.',\n      open: 'Boolean that controls the toggle state of the details wrapper. Set to \\`null\\` to disable collapsing.',\n      tests: 'Object map of test functions, keyed by test name. Each function receives \\`assert(condition, assertion)\\`   as argument. Async functions are supported.',\n      runTests: 'Boolean or Promise, controls test execution. Set to \\`false\\` to disable test output.',\n      testRunner: 'Executes tests and builds results markup. See [\\`defaultTestRunner()\\`](#defaultTestRunner) for details.',\n    }).map(([k,v]) => `- \\`${k}:\\` ${v}\\n`)}`,\n  example: [`\n// Basic use\nsignature(myUsefulFunc, {\n  description: \"It's hard to describe how useful myUsefulFunc is. I use it all the time!\"\n})\n  `, `\n// Tests\nsignature(myTestedFunc, {\n  tests: {\n    'can retrieve data': async (assert) => {\n      const data = await myTestedFunc().getData();\n      assert(Array.isArray(data), 'data is array');\n      assert(data.length, 'data is not empty');\n    },\n    'is this finished?': assert => {\n      assert(myTestedFunc() !== 'todo: implement', 'actually implemented');\n    },\n    'Look, ma! No assert!': () => {\n      try { myTestedFunc().notImplemented() }\n      catch(e) { throw Error(\\`Hey signature(), catch this! \\${e}\\`) };\n    }\n}})\n  `,],\n  tests: {\n    'signature parsing': assert => {\n      const test = (expect, name, fn) => {\n        const sig = signature(fn, {name, formatter: ({signature:s}) => s.textContent.trim()});\n        assert(expect === sig, `expected \"${expect}\", got \"${sig}\"`);\n      };\n      {test('function()', undefined, function(){})}\n      {test('function foo1()', undefined, function foo1(){})}\n      {test('function foo2()', 'foo2', function(){})}\n      {test('function()', undefined, ()=>{})}\n      {test('function foo3()', 'foo3', ()=>{})}\n      {test('async function()', undefined, async ()=>{})}\n      {test('async function foo4(a)', 'foo4', async a=>{})}\n      {test('async function foo5()', undefined, async function foo5(){})}\n      {test('async function foo5a()', 'foo5a', async function foo5(){})}\n      {test('async function* foo6()', 'foo6', async function*(){})}\n      {test('function*()', undefined, function * (){})}\n      {test('function(a,b=({foo:\"bar\"}))', undefined, (a,b=({foo:\"bar\"}))=>{})}\n    }\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"signature = (function signature(fn, options = {}) {\n  const {\n    name = typeof fn === 'function' && fn.name.length ? fn.name : null,\n    description = null,\n    example = null,\n    open = true,\n    \n    tests = {},\n    runTests = RUN_TESTS.promise,\n    testRunner = defaultTestRunner,\n    \n    scope = DOM.uid('css-scope').id,\n    css = signature_theme,\n    formatter = defaultFormatter,\n    \n    signatureParser = defaultSignatureParser,\n  } = options;\n  \n  const sig = typeof fn !== 'function' ? fn : signatureParser(fn, name);\n  let testList = null;\n  \n  if(runTests && tests && Object.keys(tests).length) {\n    const {list, run} = testRunner(tests);\n    const button = html`<button>Run tests`, cta = html`<p class=cta>${button} to view results`;\n    testList = html`<div class=tests>${[md`Test results:`, cta]}`;\n    Promise.race([Promise.resolve(runTests), new Promise(r => button.onclick = r)])\n      .then(() => (cta.replaceWith(list), run()));\n  }\n  \n  return formatter({\n    signature: typeof sig === 'string' ? code(sig) : sig,\n    description: typeof description === 'string' ? md`${description}` : description,\n    examples: (example == null ? [] : Array.isArray(example) ? example : [example])\n      .map(v => typeof v === 'string' ? code(v) : v),\n    testList,\n  }, {name, open, css, scope});\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"signature(getPinnedSlug, {\n  description: 'Retrieves the currently shared or published version of the given notebook identifier.',\n  example: [\n    `// Notebook slug\ngetPinnedSlug('@mootari/signature')`,\n    `// Notebook ID\ngetPinnedSlug('3d9d1394d858ca97')`,\n  ],\n  tests: {\n    'custom slug': async assert => {\n      assert((await getPinnedSlug('@mootari/signature')).match(/@\\d+$/))\n    },\n    'notebook id': async assert => {\n      assert((await getPinnedSlug('3d9d1394d858ca97')).match(/@\\d+$/))\n    },\n    'pinned': async assert => {\n      assert((await getPinnedSlug('@mootari/signature@545')).match(/@545$/))\n    },\n    'fallback unpublished': async assert => {\n      assert((await getPinnedSlug('@mootari/signature@544')) === '@mootari/signature')\n    },\n  },\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"getPinnedSlug = (async function getPinnedSlug(identifier) {\n  const {groups} = identifier.match(regIdentifier) || {};\n  if(!groups) return null;\n  const {id, user, slug, version} = groups;\n  const name = id || `@${user}/${slug}`;\n  const path = `${id ? `d/${id}` : name}${version ? `@${version}` : ''}`;\n  return fetch(`https://api.observablehq.com/${path}.js?v=1`)\n    .then(r => r.text())\n    .catch(e => '')\n    .then(t => parseFrontmatter(t) || {})\n    .then(({version: v}) => name + (v ? `@${v}` : ''));\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"signature('PINNED', {\n  name: 'PINNED',\n  description: `\nNotebook slug, automatically pointing to the most recent version of the importing notebook.\n    \nIf the notebook identifier cannot be derived from the current URL, the string \\`(error: name not detectable)\\`  will be set instead.`,\n  example: `md\\`\n~~~js\nimport {foo} from \"\\${PINNED}\"\n~~~\n`\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"PINNED = {\n  const match = document.baseURI.match(regIdentifier);\n  if(!match) return '(error: name not detectable)';\n  const {id, user, slug} = match.groups;\n  return getPinnedSlug(id || `@${user}/${slug}`);\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"signature(code, {\n  description: `Creates syntax-highlighted output.`,\n  example: `\nconst myCss = \\`.container { background: red; }\\`;\nreturn code(myCss, {\n  // Optional, defaults to Javascript. Supported languages:\n  // \n  language: 'css',\n  // Removes leading and trailing empty lines.\n  trim: false\n});`,\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"code = (function code(text, {type = 'javascript', trim = true, className = 'code'} = {}) {\n  const out = md`\\`\\`\\`${type}\\n${!trim ? text : text.replace(/^\\s*\\n|\\s+?$/g, '')}\\n\\`\\`\\``;\n  if(className) out.classList.add('code');\n  return out;  \n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"signature('RUN_TESTS', {\n  name: 'RUN_TESTS',\n  description: `Button that triggers all tests that have not run yet.`,\n  example: `\nimport {viewof RUN_TESTS} from \"${PINNED_LIB}\"\n// In another cell:\nviewof RUN_TESTS\n`\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof RUN_TESTS = {\n  const s = createStepper();\n  const view = html`<div><button>Run all tests`;\n  view.onclick = e => { e.stopPropagation(); s.next(); };\n  view.value = s;\n  return view;\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Internals\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"signature_theme = (`\n:scope {\n  --line-color: #eee;\n  border: 1px solid var(--line-color);\n  padding: .5em 1em;\n  margin-bottom: 1em;\n}\n:scope > div {\n  border-top: 1px solid var(--line-color);\n}\n:scope > summary:focus {\n  outline: none;\n}\n:scope > summary {\n  padding-left: 1.2em;\n  padding-top: 1em;\n  position: relative;\n}\n:scope > summary::-webkit-details-marker {\n  display: none;\n}\n:scope > summary:before {\n  position: absolute;\n  left: 0;\n  content: \"►\";\n}\n:scope[open] > summary:before {\n  content: \"▼\";\n}\n:scope .signature {\n  display: flex;\n  align-items: start;\n}\n:scope .signature pre {\n  margin-top: 0;\n}\n:scope .examples .code {\n  background: #f5f5f5;\n  padding: .5rem;\n}\n:scope .link:before {\n  content: \"\";\n  display: block;\n  width: 1rem;\nheight: 1.3rem;\n  background: url(https://raw.githubusercontent.com/encharm/Font-Awesome-SVG-PNG/master/black/png/32/link.png) center 100%/contain no-repeat;\n  margin-left: .5rem;\n  opacity: .3;\n}\n:scope .signature:hover .link:hover:before { opacity: 1}\n:scope .tests .cta {\n  font-style: italic;\n}\n:scope .tests th, :scope .tests td { padding: .25em .5em }\n:scope .tests tr[data-status=\"pending\"] { background: hsl(40,90%,90%); opacity: .5 }\n:scope .tests tr[data-status=\"error\"]   { background: hsl( 0,90%,90%)}\n:scope .tests tr[data-status=\"success\"] { background: hsl(90,90%,90%)}\n`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"createStepper = (function createStepper() {\n  let cb = ()=>{};\n  const ret = {\n    step: -1,\n    next: () => {\n      ret.step++;\n      cb();\n      ret.promise = new Promise(res=>cb=res);\n      return ret;\n    }\n  };\n  return ret.next();\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"defaultFormatter = (function defaultFormatter({signature, description, examples, testList}, {name, open, scope, css}) {\n  return html`<${open == null ? 'div' : `details ${open ? 'open' : ''}`} class=\"${scope}\">${[\n    !css ? '' : scope == null ? css : scopedStyle('.' + scope, css),\n    html`<${open == null ? 'div' : 'summary'} class=signature>${signature}${\n!name || !name.length ? '' : html`<a class=link href=\"#${name}\">`\n}`,\n    description == null ? '' : html`<div class=description>${description}`,\n    !examples.length ? '' : html`<div class=examples>${[\n      examples.length < 2 ? md`Example:` : md`Examples:`,\n      ...examples\n    ]}`,\n    testList || '',\n  ]}`;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"defaultTestRunner = (function defaultTestRunner(tests, options = {}) {\n  const {\n    assert = (cond, msg = 'error') => { if(!cond) throw msg },\n    formatList = items => html`<table><thead><tr><th>Name</th><th>Result</th></tr><body>${items}`,\n    formatItem = (name, status, msg) => {\n      const state = status == null ? 'pending' : status ? 'success' : 'error';\n      const icon = { pending: '⌛', success: '✅', error: '❗'}[state];\n      return html`<tr data-status=${state}>\n        <td>${DOM.text(name)}</td>\n        <td><span title=${state}>${icon}</span> ${msg||''}</td>`;\n    },\n    run = (fn, name) => fn.call(null, assert),\n  } = options;\n  \n  const runners = Object.entries(tests).map(([name, fn]) => ({\n    name,\n    node: formatItem(name),\n    run: async() => {\n      try { await run(fn, name) }\n      catch(e) { return e; }\n    }\n  }));\n\n  return {\n    list: formatList(runners.map(r => r.node)),\n    run: () => Promise.all(runners.map(\n      ({name, node, run}) => run().then(msg => node.replaceWith(formatItem(name, msg === undefined, msg)))\n    ))\n  };\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"defaultSignatureParser = (function defaultSignatureParser(fn, name = null) {\n  const src = fn.toString();\n  let end = 0, r = 0;\n  const next = c => {\n    switch(c) {\n      case '(': ++r; break;\n      case ')': --r; break;\n      case '{':\n      case '=': if(r === 0) return false;\n    }\n    return true;\n  }\n  while(end < src.length && next(src[end++]));\n  \n  const sig = src.substring(0, end - 1).trim(),\n        [prefix, mAsync, mFunc, mGen] = sig.match(/^(async\\s*)?(function\\s*)?(\\*)?/),\n        mName = mFunc\n          ? (sig.substring(prefix.length).match(/^[^(]*/) || [])[0]\n          : null,\n        fnName = name !== null ? name.trim()\n          : mName !== null ? mName.trim()\n          : '',\n        offset = prefix.length + (mName !== null ? mName.length : 0),\n        suffix = sig.substring(offset).trim();\n\n  return `${\n    mAsync ? 'async ' : ''\n  }function${\n    mGen ? '*' : ''\n  }${\n    fnName.length ? ` ${fnName}` : ''\n  }${\n    suffix[0] === '(' ? suffix : `(${suffix})`\n  }`;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"scopedStyle = (function scopedStyle(scope, css) {\n  const style = html`<style>`;\n  style.textContent = css.replace(/\\:scope\\b/g, scope); \n  return style;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"regIdentifier = (new RegExp('^'\n                     + '(?:(?:https:\\/\\/(next\\\\.)?observablehq\\\\.com)?\\/)?'\n                     + '(?:'\n                     + '(?:d\\/)?(?<id>[a-f0-9]{16})'\n                     + '|'\n                     + '@(?<user>[0-9a-z-_]{2,})\\/(?<slug>[0-9a-z-_]{1,}(?:\\/\\\\d+)?)'\n                     + ')'\n                     + '(?:@(?<version>\\\\d+))?'\n                     + '([?#]|$)'))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"parseFrontmatter = (v1Source => {\n  const match = v1Source.match(/^(?:[^\\n]+\\n){4}/);\n  if(!match) return null;\n  const lines = match[0].slice(0, -1).split(/\\n/);\n  return Object.fromEntries(lines.map(s => {\n    const [, key, value] = s.match(/\\/\\/ ([^:]+):\\s+(.+)$/);\n    return [key.toLowerCase(), value];\n  })\n)})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"PINNED_LIB = (getPinnedSlug('@mootari/signature'))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Old docs - under construction\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"demoFunction = (function demoFunction(sw, sh, tw = null, th = null) {\n  if(tw == null && th == null) return [sw, sh, 1];\n  const ar = sw / sh;\n  return tw == null || (th != null && ar < tw / th)\n    ? [th * ar, th, th / sh]\n    : [tw, tw / ar, tw / sw];\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Superstylin'\n\n***Note:*** *This section is currently being reworked.*\n\nTo extend the base theme, first import it:\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`\nTo override the CSS for a single instance, pass the default CSS along with your custom CSS:\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"signature(demoFunction, {\n  description: `Scales dimensions proportionally to fit into the given width and/or height.`,\n  example: `const [width, height, scale] = scaleContain(img.naturalWidth, img.naturalHeight, 500, 500);`,\n  css: `\n${signature_theme}\n:scope {\n  background: LightYellow;\n  box-shadow: 1px 2px 5px -3px;\n  font-family: sans-serif;\n}\n:scope .description {\n  font-size: 1.2rem;\n  font-style: italic;\n}\n:scope .examples .code {\n  background: NavajoWhite;\n}\n  `,\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`\nIf you want to override the CSS globally (and also have shared instead of scoped styles), use the following steps:\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"scopedStyle('.my-shared-scope', `\n${signature_theme}\n// Adds \n:scope { border: 10px solid #888 }\n`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"myCustomSig = (function myCustomSig(fn, options = {}) {\n  return signature(fn, {scope: 'my-shared-scope', css: null, ...options});\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"myCustomSig(demoFunction, {\n  description: `Scales dimensions proportionally to fit into the given width and/or height.`,\n  example: `const [width, height, scale] = scaleContain(img.naturalWidth, img.naturalHeight, 500, 500);`,\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Testing\n\nTests can be incorporated into the documentation and executed\n- by passing \\`{runTests: true}\\`, which will execute tests immediately,\n- by clicking the \\`Run tests\\` button inside the documentation cell,\n- or by passing a promise for \\`runTests\\`. This promise can be used to execute all tests on the page.\n\nSelect how tests should be run for the following example:\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof runType = (DOM.select([\n  'wait for interaction',\n  'run immediately',\n  'hide tests',\n]))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"signature(demoFunction, {\n  description: `Scales dimensions proportionally to fit into the given width and/or height.`,\n  example: `\nconst [width, height, scale] = scaleContain(img.naturalWidth, img.naturalHeight, 500, 500);\nimg.width = width;\nimg.height = height;\n`,\n  runTests: {\n    'run immediately': true,\n    'hide tests': false,\n    'wait for interaction': RUN_TESTS.promise,\n  }[runType],\n  // Note: Tests contain deliberate errors to showcase the various states.\n  tests: {\n    'no target dimensions': assert => {\n      ({}).callUndefined();\n      const [w, h, s] = demoFunction(200, 150);\n      assert(w === 200, 'width'); assert(h === 150, 'height'); assert(s === 1, 'scale');\n    },\n    'target width only': async assert => {\n      await Promises.delay(3000);\n      const [w, h, s] = demoFunction(200, 150, 2*200);\n      assert(w === 2*200, 'width'); assert(h === 2*150, 'height'); assert(s === 2, 'scale');\n    },\n    'target height only': assert => {\n      const [w, h, s] = demoFunction(200, 150, null, 2*150);\n      assert(w === 2*200, 'width'); assert(h === 2*150, 'height'); assert(s === 2, 'scale');\n    },\n    'same aspect': assert => {\n      const [w, h, s] = demoFunction(200, 150, 2*200, 2*150);\n      assert(w === 2*200, 'width'); assert(h === 2*150, 'height'); assert(s === 2, 'scale');\n    },\n    'smaller aspect ratio': async assert => {\n      await Promises.delay(2000);\n      const [w, h, s] = demoFunction(200, 150, 3*200, 2*150);\n      assert(w === 2*200, 'width'); assert(h === 2*150, 'height'); assert(s === 0, 'scale');\n    },\n    'greater aspect ratio': assert => {\n      const [w, h, s] = demoFunction(200, 150, 3*200, 2*150);\n      assert(w === 2*200, 'width'); assert(h === 2*150, 'height'); assert(s === 2, 'scale');\n    },\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Contributions\n\n- Thanks to [Fati Chen](https://observablehq.com/@stardisblue) for discovering badly handled cases in the signature parsing, and for suggesting improvements regarding name overrides.\n`","pinCode":false}}}],"version":"2.19.1"}
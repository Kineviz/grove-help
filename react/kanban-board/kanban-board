{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Kanban Board`","pinCode":false,"dname":"5e300efd-8bb5-421f-9e51-2291da80cb03","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    const { Space } = Antd;\n    return <KanbanBoard />;\n})","pinCode":false,"dname":"a1c70265-8a05-4d89-81b8-741150468796","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"function KanbanBoard() {\n  const [tasks, setTasks] = useState({\n    todo: [\"Learn React basics\"],\n    inProgress: [\"Build a demo app\"],\n    done: [\"Setup project\"],\n  });\n\n  const [newTask, setNewTask] = useState(\"\");\n\n  // Add new task to Todo\n  function addTask() {\n    if (!newTask.trim()) return;\n    setTasks({ ...tasks, todo: [...tasks.todo, newTask] });\n    setNewTask(\"\");\n  }\n\n  // Move task between columns\n  function moveTask(column, index, direction) {\n    const task = tasks[column][index];\n    const newTasks = { ...tasks };\n    newTasks[column] = newTasks[column].filter((_, i) => i !== index);\n\n    if (direction === \"forward\") {\n      if (column === \"todo\") newTasks.inProgress.push(task);\n      else if (column === \"inProgress\") newTasks.done.push(task);\n    } else if (direction === \"backward\") {\n      if (column === \"done\") newTasks.inProgress.push(task);\n      else if (column === \"inProgress\") newTasks.todo.push(task);\n    }\n\n    setTasks(newTasks);\n  }\n\n  return (\n    <div className=\"kanban\">\n      <div className=\"board\">\n        {Object.keys(tasks).map(column => (\n          <div key={column} className=\"column\">\n            <h2>{column.toUpperCase()}</h2>\n            {tasks[column].map((task, index) => (\n              <div key={index} className=\"task\">\n                <span>{task}</span>\n                <div>\n                  {column !== \"todo\" && (\n                    <button onClick={() => moveTask(column, index, \"backward\")}>◀</button>\n                  )}\n                  {column !== \"done\" && (\n                    <button onClick={() => moveTask(column, index, \"forward\")}>▶</button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"card add-task\" style={{maxWidth:\"600px\", margin:\"20px auto\"}}>\n        <input\n          type=\"text\"\n          placeholder=\"New task...\"\n          value={newTask}\n          onChange={e => setNewTask(e.target.value)}\n          />\n        <button onClick={addTask}>Add</button>\n      </div>\n    </div>\n  );\n}","pinCode":false,"dname":"cdf6d7db-30bc-48ec-9f5f-ec1a240daf34","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"<style>\n  .kanban { font-family: sans-serif; background:#f5f5f5; margin:0; padding:20px; }\n  h1 { text-align:center; }\n  .board { display:flex; gap:20px; max-width:1000px; margin:20px auto; }\n  .column { flex:1; background:var(--background-color); padding:15px; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,.1); }\n  .column h2 { text-align:center; }\n  .task { background:var(--icon-color); margin:8px 0; padding:8px; border-radius:8px; display:flex; justify-content:space-between; align-items:center; }\n  button { padding:4px 8px; border:none; border-radius:6px; background:#007acc; color:white; cursor:pointer; font-size:12px; }\n  button:hover { background:#005f99; }\n  .add-task { display:flex; gap:8px; margin-top:10px; }\n  input { flex:1; padding:6px; border:1px solid #ccc; border-radius:6px; }\n</style>","pinCode":false,"dname":"f2ee1091-9efa-4c2b-823a-4ac4c458b454","codeMode":"htmlmixed"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"d129cda4-3fef-47b4-bd3a-5bebee789ef0","codeMode":"javascript2"}}}],"version":"2.19.1"}
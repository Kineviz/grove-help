{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"# Tic-Tac-Toe\n**You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.**\n\nThe tutorial is divided into several sections:\n\n- Setup for the tutorial will give you a starting point to follow the tutorial.\n- Overview will teach you the fundamentals of React: components, props, and state.\n- Completing the game will teach you the most common techniques in React development.\n- Adding time travel will give you a deeper insight into the unique strengths of React.\n\n## What are you building? \nIn this tutorial, you’ll build an interactive tic-tac-toe game with React.\n\nYou can see what it will look like when you’re finished here:","pinCode":false,"dname":"02ae8253-7164-4894-a23b-7ecd187de8b1","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({ useSetter }) => {\n    const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n})","pinCode":false,"dname":"28a8462e-11d3-4e94-aac9-802dd20fbd5c","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"function Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}","pinCode":false,"dname":"9ffa9268-a732-4a41-8524-cbb588bca39f","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"function Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}","pinCode":false,"dname":"8bd5c204-715b-47ac-b742-32b1dc09d789","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}","pinCode":false,"dname":"b8441208-c954-420e-98ed-cfa24f947adc","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"<style>\ncode {\n  font-size: 1.2em;\n}\n\nul {\n  padding-inline-start: 20px;\n}\n\n* {\n  box-sizing: border-box;\n}\n.square {\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n}\n\n.board-row:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n\n.status {\n  margin-bottom: 10px;\n}\n.game {\n  display: flex;\n  flex-direction: row;\n}\n\n.game-info {\n  margin-left: 20px;\n}\n\n</style>","pinCode":false,"dname":"d8056061-264a-4c37-8691-12443158682e","codeMode":"htmlmixed"}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"26a5b46c-4c7b-4cec-9374-bdfd947e8e30","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"If the code doesn’t make sense to you yet, or if you are unfamiliar with the code’s syntax, don’t worry! The goal of this tutorial is to help you understand React and its syntax.\n\nWe recommend that you check out the tic-tac-toe game above before continuing with the tutorial. One of the features that you’ll notice is that there is a numbered list to the right of the game’s board. This list gives you a history of all of the moves that have occurred in the game, and it is updated as the game progresses.\n\nOnce you’ve played around with the finished tic-tac-toe game, keep scrolling. You’ll start with a simpler template in this tutorial. Our next step is to set you up so that you can start building the game.","pinCode":false,"dname":"0590227f-a165-4292-a328-4a05ca2f5461","codeMode":"markdown"}}},{"type":"header","data":{"text":"Setup for the tutorial&nbsp;<a href=\"https://react.dev/learn/tutorial-tic-tac-toe#setup-for-the-tutorial\"></a>","level":2}},{"type":"paragraph","data":{"text":"In the live code editor below, click Fork in the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox lets you write code in your browser and preview how your users will see the app you’ve created. The new tab should display an empty square and the starter code for this tutorial."}},{"type":"codeTool","data":{"codeData":{"value":"render(({ }) => {\n    return <button className=\"square\">X</button>;\n})","pinCode":true,"dname":"6ddf116d-045d-4eb9-82d3-4e6d073b5027","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"&nbsp; The code in <code>render</code> creates a component. In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let’s look at the component line by line to see what’s going on:&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"The second line returns a button. The <code>return</code> JavaScript keyword means whatever comes after is returned as a value to the caller of the function. <code>&lt;button&gt;</code> is a JSX element. A JSX element is a combination of JavaScript code and HTML tags that describes what you’d like to display. <code>className=\"square\"</code> is a button property or prop that tells CSS how to style the button. <code>X</code> is the text displayed inside of the button and <code>&lt;/button&gt;</code> closes the JSX element to indicate that any following content shouldn’t be placed inside the button.&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"This <font color=\"#e83e8c\"><span style=\"font-size: 16.8px;\">&lt;style&gt;&nbsp;</span></font>defines the styles for your React app. The first two CSS selectors (<code>*</code>&nbsp;) define the style of large parts of your app while the <code>.square</code> selector defines the style of any component where the <code>className</code> property is set to <code>square</code>. In your code, that would match the button from your Square component in the <code>&lt;style&gt;</code> cell.&nbsp;&nbsp;"}},{"type":"header","data":{"text":"Building the board&nbsp;<a href=\"https://react.dev/learn/tutorial-tic-tac-toe#building-the-board\"></a>","level":3}},{"type":"paragraph","data":{"text":"Let’s get back to <font color=\"#e83e8c\"><span style=\"font-size: 16.8px;\">render</span></font>. This is where you’ll spend the rest of the tutorial."}},{"type":"paragraph","data":{"text":"Currently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:"}},{"type":"codeTool","data":{"codeData":{"value":"render(({   }) => {\n    return <button className=\"square\">X</button><button className=\"square\">X</button>;\n})","pinCode":true,"dname":"56c0fb31-8a93-4abd-a92f-b7673cc7ba38","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"You’ll get this error. \n<div class=\"text-danger\">TypeError: arguments[0].trim is not a function</div>","pinCode":false,"dname":"530ede0a-525d-4d62-8343-4de05805ef4b","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"React components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can use Fragments (<code>&lt;&gt;</code> and <code>&lt;/&gt;</code>) to wrap multiple adjacent JSX elements like this:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({   }) => {\n    return <>\n  <button className=\"square\">X</button><button className=\"square\">X</button>\n      </>;\n})","pinCode":true,"dname":"93d7edf4-0f10-4a83-84ef-a0928c25d44c","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"Great! Now you just need to copy-paste a few times to add nine squares and…"}},{"type":"codeTool","data":{"codeData":{"value":"render(({   }) => {\n    return <>\n  <button className=\"square\">X</button><button className=\"square\">X</button><button className=\"square\">X</button><button className=\"square\">X</button><button className=\"square\">X</button><button className=\"square\">X</button><button className=\"square\">X</button><button className=\"square\">X</button><button className=\"square\">X</button><button className=\"square\">X</button>\n      </>;\n})","pinCode":true,"dname":"71938671-53f7-49f2-ba9b-55f7760e7c5a","codeMode":"jsx","pos":31,"loc":{"line":2,"column":11},"raisedAt":32}}},{"type":"paragraph","data":{"text":"Oh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you’ll need to group your squares into rows with <code>div</code>s and add some CSS classes. While you’re at it, you’ll give each square a number to make sure you know where each square is displayed.&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({   }) => {\n    return <>\n      <div className=\"board-row\">\n        <button className=\"square\">1</button>\n        <button className=\"square\">2</button>\n        <button className=\"square\">3</button>\n      </div>\n      <div className=\"board-row\">\n        <button className=\"square\">4</button>\n        <button className=\"square\">5</button>\n        <button className=\"square\">6</button>\n      </div>\n      <div className=\"board-row\">\n        <button className=\"square\">7</button>\n        <button className=\"square\">8</button>\n        <button className=\"square\">9</button>\n      </div>\n    </>;\n})","pinCode":true,"dname":"2bacb5d6-94d8-4fe7-b22a-09c3b384065c","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"&nbsp; The CSS defined in <code>style</code>&nbsp;styles the divs with the <code>className</code> of <code>board-row</code>. Now that you’ve grouped your components into rows with the styled <code>div</code>s you have your tic-tac-toe board:&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"&nbsp; But you now have a problem. Your component named <code>Square</code>, really isn’t a square anymore. Let’s fix that by changing the name to <code>Board</code>"}},{"type":"header","data":{"text":"Passing data through props&nbsp;<a href=\"https://react.dev/learn/tutorial-tic-tac-toe#passing-data-through-props\"></a>","level":3}},{"type":"paragraph","data":{"text":"Next, you’ll want to change the value of a square from empty to “X” when the user clicks on the square. With how you’ve built the board so far you would need to copy-paste the code that updates the square nine times (once for each square you have)! Instead of copy-pasting, React’s component architecture allows you to create a reusable component to avoid messy, duplicated code."}},{"type":"paragraph","data":{"text":"First, you are going to copy the line defining your first square (<code>&lt;button className=\"square\"&gt;1&lt;/button&gt;</code>) from your <code>Board</code> component into a new <code>Square</code> component:"}},{"type":"codeTool","data":{"codeData":{"value":"render(({   }) => {\n    function Square() {\n      return <button className=\"square\">1</button>;\n    }\n    return <>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n    </>;\n})","pinCode":false,"dname":"bbd941f6-e00a-4780-988f-aee20c8f6301","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"&nbsp; Note how unlike the browser <code>div</code>s, your own components <code>Board</code> and <code>Square</code> must start with a capital letter.&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"Oh no! You lost the numbered squares you had before. Now each square says “1”. To fix this, you will use props to pass the value each square should have from the parent component (<code>Board</code>) to its child (<code>Square</code>)."}},{"type":"paragraph","data":{"text":"Update the <code>Square</code> component to read the <code>value</code> prop that you’ll pass from the <code>Board</code>:"}},{"type":"codeTool","data":{"codeData":{"value":"```jsx\nfunction Square({ value }) {\n  return <button className=\"square\">1</button>;\n}\n```","pinCode":false,"dname":"3315bcf0-eacc-44c8-bf94-51b1b160edb5","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"<code>function Square({ value })</code> indicates the Square component can be passed a prop called <code>value</code>."}},{"type":"paragraph","data":{"text":"Now you want to display that <code>value</code> instead of <code>1</code> inside every square. Try doing it like this:"}},{"type":"codeTool","data":{"codeData":{"value":"```jsx\nfunction Square({ value }) {\n  return <button className=\"square\">value</button>;\n}\n```","pinCode":false,"dname":"f2fd1f42-d69c-486b-a9ea-cf98ccad69a5","codeMode":"markdown"}}},{"type":"codeTool","data":{"codeData":{"value":"render(({   }) => {\n    function Square({ value }) {\n      return <button className=\"square\">value</button>;\n    }\n    return <>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n    </>;\n})","pinCode":true,"dname":"4bbb1e35-1f91-4c82-b064-7449eafb9722","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"You wanted to render the JavaScript variable called <code>value</code> from your component, not the word “value”. To “escape into JavaScript” from JSX, you need curly braces. Add curly braces around <code>value</code> in JSX like so:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({   }) => {\n    function Square({ value }) {\n      return <button className=\"square\">{value}</button>;\n    }\n    return <>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n      <div className=\"board-row\">\n        <Square />\n        <Square />\n        <Square />\n      </div>\n    </>;\n})","pinCode":false,"dname":"747373e8-fc09-487a-9b26-a88722537791","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"This is because the <code>Board</code> component hasn’t passed the <code>value</code> prop to each <code>Square</code> component it renders yet. To fix it you’ll add the <code>value</code> prop to each <code>Square</code> component rendered by the <code>Board</code> component:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({   }) => {\n    function Square({ value }) {\n      return <button className=\"square\">{value}</button>;\n    }\n    return <>\n      <div className=\"board-row\">\n        <Square value=\"1\" />\n        <Square value=\"2\" />\n        <Square value=\"3\" />\n      </div>\n      <div className=\"board-row\">\n        <Square value=\"4\" />\n        <Square value=\"5\" />\n        <Square value=\"6\" />\n      </div>\n      <div className=\"board-row\">\n        <Square value=\"7\" />\n        <Square value=\"8\" />\n        <Square value=\"9\" />\n      </div>\n    </>;\n})","pinCode":false,"dname":"3f6d0fc6-9044-4c0e-b965-6a0fed092277","codeMode":"jsx"}}},{"type":"header","data":{"text":"Making an interactive component&nbsp;<a href=\"https://react.dev/learn/tutorial-tic-tac-toe#making-an-interactive-component\"></a>","level":3}},{"type":"paragraph","data":{"text":"Let’s fill the <code>Square</code> component with an <code>X</code> when you click it. Declare a function called <code>handleClick</code> inside of the <code>Square</code>. Then, add <code>onClick</code> to the props of the button JSX element returned from the <code>Square</code>:"}},{"type":"codeTool","data":{"codeData":{"value":"```jsx\nfunction Square({ value }) {\n  function handleClick() {\n    console.log('clicked!');\n  }\n\n  return (\n    <button\n      className=\"square\"\n      onClick={handleClick}\n    >\n      {value}\n    </button>\n  );\n}\n```","pinCode":false,"dname":"4fdc3c77-3428-439e-a95d-f3a5a8a1ae6a","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"&nbsp; If you click on a square now, you should see a log saying <code>\"clicked!\"</code> in the Console tab at the bottom of the Browser section in CodeSandbox. Clicking the square more than once will log <code>\"clicked!\"</code> again. Repeated console logs with the same message will not create more lines in the console. Instead, you will see an incrementing counter next to your first <code>\"clicked!\"</code> log.&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"As a next step, you want the Square component to “remember” that it got clicked, and fill it with an “X” mark. To “remember” things, components use state."}},{"type":"paragraph","data":{"text":"React provides a special function called <code>useState</code> that you can call from your component to let it “remember” things. Let’s store the current value of the <code>Square</code> in state, and change it when the <code>Square</code> is clicked."}},{"type":"paragraph","data":{"text":"Import <code>useState</code> at the top of the file. Remove the <code>value</code> prop from the <code>Square</code> component. Instead, add a new line at the start of the <code>Square</code> that calls <code>useState</code>. Have it return a state variable called <code>value</code>:"}},{"type":"codeTool","data":{"codeData":{"value":"```jsx\nfunction Square() {\n  const [value, setValue] = useState(null);\n\n  function handleClick() {\n    //...\n```","pinCode":true,"dname":"e578d619-fd90-4976-81e3-e958c55d4175","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"<code>value</code> stores the value and <code>setValue</code> is a function that can be used to change the value. The <code>null</code> passed to <code>useState</code> is used as the initial value for this state variable, so <code>value</code> here starts off equal to <code>null</code>."}},{"type":"paragraph","data":{"text":"Since the <code>Square</code> component no longer accepts props anymore, you’ll remove the <code>value</code> prop from all nine of the Square components created by the Board component:"}},{"type":"codeTool","data":{"codeData":{"value":"render(({   }) => {\n  function Square() {\n    const [value, setValue] = useState(null);\n\n    function handleClick() {\n      setValue('X');\n    }\n\n    return (\n      <button\n        className=\"square\"\n        onClick={handleClick}\n        >\n        {value}\n      </button>\n    );\n  }\n  return <>\n    <div className=\"board-row\">\n      <Square value=\"1\" />\n      <Square value=\"2\" />\n      <Square value=\"3\" />\n    </div>\n    <div className=\"board-row\">\n      <Square value=\"4\" />\n      <Square value=\"5\" />\n      <Square value=\"6\" />\n    </div>\n    <div className=\"board-row\">\n      <Square value=\"7\" />\n      <Square value=\"8\" />\n      <Square value=\"9\" />\n    </div>\n  </>;\n})","pinCode":true,"dname":"0959ce43-2b77-4e4a-8fc3-e7b5ff3f45ef","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"By calling this <code>set</code> function from an <code>onClick</code> handler, you’re telling React to re-render that <code>Square</code> whenever its <code>&lt;button&gt;</code> is clicked. After the update, the <code>Square</code>’s <code>value</code> will be <code>'X'</code>, so you’ll see the “X” on the game board. Click on any Square, and “X” should show up:&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"&nbsp;Each Square has its own state: the <code>value</code> stored in each Square is completely independent of the others. When you call a <code>set</code> function in a component, React automatically updates the child components inside too.&nbsp;&nbsp;"}},{"type":"header","data":{"text":"Completing the game&nbsp;<a href=\"https://react.dev/learn/tutorial-tic-tac-toe#completing-the-game\"></a>","level":2}},{"type":"paragraph","data":{"text":"By this point, you have all the basic building blocks for your tic-tac-toe game. To have a complete game, you now need to alternate placing “X”s and “O”s on the board, and you need a way to determine a winner."}},{"type":"header","data":{"text":"Lifting state up&nbsp;<a href=\"https://react.dev/learn/tutorial-tic-tac-toe#lifting-state-up\"></a>","level":3}},{"type":"paragraph","data":{"text":"Currently, each <code>Square</code> component maintains a part of the game’s state. To check for a winner in a tic-tac-toe game, the <code>Board</code> would need to somehow know the state of each of the 9 <code>Square</code> components."}},{"type":"paragraph","data":{"text":"How would you approach that? At first, you might guess that the <code>Board</code> needs to “ask” each <code>Square</code> for that <code>Square</code>’s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game’s state in the parent <code>Board</code> component instead of in each <code>Square</code>. The <code>Board</code> component can tell each <code>Square</code> what to display by passing a prop, like you did when you passed a number to each Square."}},{"type":"paragraph","data":{"text":"To collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent."}},{"type":"paragraph","data":{"text":"Lifting state into a parent component is common when React components are refactored."}},{"type":"paragraph","data":{"text":"Let’s take this opportunity to try it out. Edit the <code>Board</code> component so that it declares a state variable named <code>squares</code> that defaults to an array of 9 nulls corresponding to the 9 squares:"}},{"type":"codeTool","data":{"codeData":{"value":"```jsx\n// ...\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  return (\n    // ...\n  );\n}\n```","pinCode":false,"dname":"a4fa346e-eaec-4deb-ad07-84cf1039c3dd","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"<code>Array(9).fill(null)</code> creates an array with nine elements and sets each of them to <code>null</code>. The <code>useState()</code> call around it declares a <code>squares</code> state variable that’s initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, the <code>squares</code> array will look like this:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"```jsx\n['O', null, 'X', 'X', 'X', 'O', 'O', null, null]\n```","pinCode":false,"dname":"666cf53e-d6df-49fb-9522-a83a9028f3a6","codeMode":"markdown"}}},{"type":"paragraph","data":{"text":"&nbsp; Now your <code>Board</code> component needs to pass the <code>value</code> prop down to each <code>Square</code> that it renders:&nbsp;&nbsp;"}},{"type":"codeTool","data":{"codeData":{"value":"render(({   }) => {\n  function Square() {\n    const [value, setValue] = useState(null);\n\n    function handleClick() {\n      setValue('X');\n    }\n\n    return (\n      <button\n        className=\"square\"\n        onClick={handleClick}\n        >\n        {value}\n      </button>\n    );\n  }\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  return (\n    <>\n      <div className=\"board-row\">\n        <Square value={squares[0]} />\n        <Square value={squares[1]} />\n        <Square value={squares[2]} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} />\n        <Square value={squares[4]} />\n        <Square value={squares[5]} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} />\n        <Square value={squares[7]} />\n        <Square value={squares[8]} />\n      </div>\n    </>\n  );\n})","pinCode":true,"dname":"8cc71aa0-1e55-4ed2-9dd0-d99f1301c7ba","codeMode":"jsx"}}}],"version":"2.19.1"}
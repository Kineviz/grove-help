{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Self-hosted database proxies\n\nGrove’s hosted ${Link(\"databases/databases\",\"database clients\")} rely on an HTTPS-to-database proxy, which allows your browser to securely run SQL queries against databases that are accessible from the public internet.\n\nBut if your database isn’t accessible from the public internet (say, because you’re running it on your personal computer, or on a private network, or within a VPN) — or if you simply don’t wish to share any database credentials with Grove — that won’t work.\n\nSo we also provide a small, [open-source](https://github.com/LiXingA/grove-database-proxy) Node.js database proxy, that you can run yourself. By connecting directly from your browser to the proxy, your private notebooks can access databases on private networks or local computers, that traffic never goes over the public internet, and you don’t need to trust Grove with any database credentials.`","pinCode":false,"dname":"ea41a443-3257-48a0-b5ab-1ec18ba0ab67","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Setup`","pinCode":false,"dname":"1007c6e0-41a1-4143-b893-3f015f5d3eb8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Install \\`grove-database-proxy\\` with Yarn:\n\n${codeblock(`\nyarn \n`)}\n${codeblock(`\nyarn dev\n`)}\n\nOn startup, the proxy will open a page [http://localhost:2901/](http://localhost:2901/) in browser .\n\n<figure style=\"max-width: 470px; text-align: center;\">\n<img src=\"${await FileAttachment(\"grove-database-proxy.png\").url()}\"/>\n<figcaption>After startup, Open the admin page</figcaption></figure>\n\nClick the **New Database** button will open to your database settings page, and offer to configure a new a self-hosted database proxy. \n\n<figure style=\"max-width: 470px; text-align: center;\">\n<img src=\"${await FileAttachment(\"mysql-configuration.png\").url()}\"/>\n<figcaption>Setting a proxy to a local MySQL database</figcaption></figure>`","pinCode":false,"dname":"46699d66-8c23-4eed-bcad-a3ce5e547ed8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"credentials = (md`### Credentials\n\nNext, tell the proxy about the database credentials you’d like to use locally to connect to your database, in the form of a PostgreSQL, MySQL, or Snowflake URL, for example:\n\n${codeblock(`\n  postgresql://visnup@127.0.0.1/testdb\n`, '')}\nor\n${codeblock(`\n  mysql://dbuser:dbpassword@127.0.0.1/testdb\n`, '')}\n\n*Note: If you’re proxying to a database over SSL, you can add it as a URL parameter. For example, for PostgreSQL, with \\`?sslmode=no-verify\\`, or for MySQL with \\`sslMode=REQUIRED\\`.*\n`)","pinCode":false,"dname":"05006857-40e6-4fd1-bffc-0cf916a443d5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"url = {\n  const {protocol, user, password, host, port, database} = form;\n  const url = `${protocol}://${encodeURIComponent(user)}${\n    password.length ? ':' + encodeURIComponent(password) : ''}${\n    user.length + password.length > 0 ? '@' : ''}${\n    host}${\n    port.length ? ':' + port : ''}${\n    database.length ? '/' + encodeURIComponent(database) : ''}`;\n  return md`Be sure to encode special characters in any of the fields. To help with this, you can use the form below to construct a URL.\n\nCopy and paste this URL:  \n<code><b>${url}</b></code>`;\n}","pinCode":false,"dname":"d7c6c2fd-e7e3-4394-b42d-a059503d6f42","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof form = {\n  const initial = {\n    protocol: \"mysql\",\n    user: \"root\",\n    password: \"12345\",\n    host: \"127.0.0.1\",\n    port: \"3306\",\n    database: \"test\"\n  };\n  const form = html`\n    <form style=\"display:grid; grid-template-columns: auto auto; width: 400px; grid-gap: 10px;\">\n      <label for=\"protocol\">Type</label>\n      <select id=\"protocol\">\n        <option value=\"postgresql\">Postgres\n        <option value=\"postgresql\">Redshift\n        <option selected value=\"mysql\">MySQL\n        <option value=\"snowflake\">Snowflake\n      </select>\n      <label for=\"user\">User</label>\n      <input id=\"user\" value=\"${initial.user}\" />\n      <label for=\"password\">Password ⚠️</label>\n      <input id=\"password\" value=\"${initial.password}\" />\n      <label for=\"host\">Host</label>\n      <input id=\"host\" value=\"${initial.host}\" required />\n      <label for=\"port\">Port</label>\n      <input id=\"port\" value=\"${initial.port}\" type=\"number\" />\n      <label for=\"database\">Database</label>\n      <input id=\"database\" value=\"${initial.database}\" />\n    </form>`;\n  form.value = initial;\n  form.addEventListener(\"input\", (event) => {\n    form.value[event.target.id] = event.target.value;\n  })\n  return form;\n}","pinCode":false,"dname":"762c202d-768e-44c6-8ee3-1c334c6b8a1c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`⚠️ _Be wary of any form on the internet prompting you for a password! Feel free to inspect this code to ensure nothing nefarious is happening. Or, use it as an example of using \\`encodeURIComponent\\` to encode special characters._`","pinCode":false,"dname":"9c9de431-6891-4e89-af64-df8b406914fa","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n## Usage\n\nTo boot up the proxy:\n\n${codeblock(`\nnode bin/grove-database-proxy start\n`)}\n\nHere’s the full list of commands:\n\n- \\`start <name> [ssl options]\\` Start a database proxy server\n- \\`add <name>\\` Add a new database proxy configuration\n- \\`remove <name>\\` Remove an existing database proxy configuration\n- \\`reset <name>\\` Reset the shared secret for an existing database proxy configuration\n- \\`list\\` List all configured database proxies\n`","pinCode":false,"dname":"df82a193-4286-4cd2-83b2-56b685c47fbe","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"tls = (md`### SSL/TLS\n\nIf you’re using Chrome or Edge and running the database proxy on your local computer (at 127.0.0.1), you can connect to it directly with HTTP — there’s no need to jump through the hoops of setting up a self-signed SSL certificate for the proxy, as the HTTP connection is entirely local to your computer.\n\n_We recommend using Chrome to connect to self-hosted database proxies. To get them working with current versions of Firefox and Safari requires creating, installing and trusting a self-signed SSL certificate, which isn’t easy to set up. But if you still wish to use them with Firefox or Safari, here are the advanced instructions:_\n\n1. [Create and trust a self-signed SSL certificate](https://gist.github.com/cecilemuller/9492b848eb8fe46d462abeb26656c4f8) for the database proxy to use.\n2. Pass the <span style=\"white-space: nowrap\">\\`--sslcert\\`</span> and <span style=\"white-space: nowrap\">\\`--sslkey\\`</span> options, pointing to your newly created certificate, to the database proxy. When you’re creating the connection in Observable, make sure that the “Require SSL/TLS” option is selected.\n3. Visit https://127.0.0.1:2901/ and click “Accept the risk” to allow Firefox to use your self-signed certificate.\nand configure the database proxy to use it in order to proxy over HTTPS.\n4. Now you can use your database connector in Firefox or Safari.`)","pinCode":false,"dname":"e4ae4664-f593-4efc-8802-f2f2fe08019b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Querying\nOnce your database proxy is up and running, you can create a database client connected to it by calling \\`DatabaseClient(\"name\")\\` in a private notebook.\n\n${Link(\"databases/databases\",\"For more information on querying with Database Clients, see the introductory notebook.\")}`","pinCode":false,"dname":"b1320bb1-fbf8-4610-a89b-5c2b7ab820c0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Configuration file\nYour database credentials and secret key for any configured local proxies are stored on your machine in \\`./config.json\\`. If you restart the database proxy, it will read previous configuration from this file.\n\nIf you want to reset everything, delete this file.\n\nIf you want to remove just a single database proxy configuration, run:\n\n${codeblock(`\ngrove-database-proxy remove <name>\n`)}\n\n\\u{200b}\n`","pinCode":false,"dname":"03ce0642-f3f0-4b60-96c8-cb6e3c311647","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof codeblock = {\n  const css = html`<style>\n    .codeblock {\n      margin-left: 2ex;\n    }\n    .codeblock-prefix:before {\n      content: attr(data-prefix);\n    }\n  </style>`\n  css.value = (content, prefix = '$ ') =>\n    html`\n      <pre class=\"codeblock\"><code>${prefix\n        ? content.trim().split('\\n').map(line => html`\n            <span class=\"codeblock-prefix\" data-prefix=\"${prefix}\"></span>${DOM.text(line + '\\n')}\n          `)\n        : DOM.text(content.trim())}</code></pre>\n    `\n\n  return css\n}","pinCode":false,"dname":"260d9f30-acf8-4568-bb86-f71e339cee7c","codeMode":"javascript2"}}}],"version":"2.19.1"}
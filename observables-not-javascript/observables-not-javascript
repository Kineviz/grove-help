{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Observable’s not JavaScript\n\nAt first glance, Observable appears to be vanilla JavaScript. This is intentional: by building on the native language of the web, Observable is more familiar and you can use the libraries you know and love, such as D3, Three, and TensorFlow. Yet for [dataflow](/@observablehq/how-observable-runs), Observable needed to change JavaScript in a few ways.\n\nHere’s a quick overview of what’s different.\n\n(We’ve also shared our [grammar](/@observablehq/observable-grammar) and [parser](https://github.com/observablehq/parser).)`","pinCode":false,"dname":"_1647270089635","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Cells are separate scripts.\n\nEach cell in a notebook is a separate script that runs independently. A syntax error in one cell won’t prevent other cells from running.`","pinCode":false,"dname":"_1647270089636","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Same with a runtime error.`","pinCode":false,"dname":"_1647270089637","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{ throw new Error(\"oopsie\"); }","pinCode":false,"dname":"_1647270089638","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Likewise, local variables are only visible to the cell that defines them.`","pinCode":false,"dname":"_1647270089638","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{ var local = \"I am a local variable.\"; }","pinCode":false,"dname":"_1647270089639","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"local","pinCode":false,"dname":"_1647270089640","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Cells run in topological order.\n\nIn vanilla JavaScript, code runs from top to bottom. Not so here; Observable runs [like a spreadsheet](/@observablehq/how-observable-runs), so you can define your cells in whatever order makes sense.`","pinCode":false,"dname":"_1647270089640","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"a + 2","pinCode":false,"dname":"_1647270089642","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"a = (1)","pinCode":false,"dname":"_1647270089642","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`By extension, circular definitions are not allowed.`","pinCode":false,"dname":"_1647270089643","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"c1 = (c2 - 1)","pinCode":false,"dname":"_1647270089644","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"c2 = (c1 + 1)","pinCode":false,"dname":"_1647270089645","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Cells re-run when any referenced cell changes.\n\nYou don’t have to run cells explicitly when you edit or interact—the notebook updates automatically. Run the cell below by clicking the play button <svg width=\"16\" height=\"16\" class=\"db bump\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linejoin=\"round\" fill=\"none\"><path d=\"M4 3L12 8L4 13Z\"></path></svg>, or by focusing and hitting Shift-Enter. Only the referencing cells run, then *their* referencing cells, and so on—other cells are unaffected.`","pinCode":false,"dname":"_1647270089645","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"b = (Math.random())","pinCode":false,"dname":"_1647270089646","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"b * b","pinCode":false,"dname":"_1647270089647","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`If a cell allocates resources that won’t be automatically cleaned up by the garbage collector, such as an animation loop or event listener, use the [invalidation promise](/@observablehq/invalidation) to dispose of these resources manually and avoid leaks.`","pinCode":false,"dname":"_1647270089649","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{ invalidation.then(() => console.log(\"I was invalidated.\")); }","pinCode":false,"dname":"_1647270089649","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Cells implicitly await promises.\n\nYou can define a cell whose value is a promise.`","pinCode":false,"dname":"_1647270089650","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"hello = (new Promise(resolve => {\n  setTimeout(() => {\n    resolve(\"hello there\");\n  }, 30000);\n}))","pinCode":false,"dname":"_1647270089651","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you reference such a cell, you don’t need to \\`await\\`; the referencing cell won’t run until the value resolves.`","pinCode":false,"dname":"_1647270089652","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"hello.split(/\\s+/g)","pinCode":false,"dname":"_1647270089653","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Cells implicitly iterate over generators.\n\nIf a cell \\`yield\\`s, any referencing cell will see the most-recently yielded value.`","pinCode":false,"dname":"_1647270089653","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"c = {\n  yield 1;\n  yield 2;\n  yield 3;\n}","pinCode":false,"dname":"_1647270089654","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"c","pinCode":false,"dname":"_1647270089655","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Also, yields occur no more than once every animation frame: typically sixty times a second, which makes generators handy for [animation](/@mbostock/animation-loops). If you yield a DOM element, it will be added to the DOM before the generator resumes.`","pinCode":false,"dname":"_1647270089656","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Named cells are declarations, not assignments.\n\nNamed cells look like, and function *almost* like, assignment expressions in vanilla JavaScript. But cells can be defined in any order, so think of them as hoisted function declarations.`","pinCode":false,"dname":"_1647270089656","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"foo = (2)","pinCode":false,"dname":"_1647270089657","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can’t assign the value of another cell (though see mutables below).`","pinCode":false,"dname":"_1647270089658","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Cell names must also be unique. If two or more cells share the same name, they will all error.`","pinCode":false,"dname":"_1647270089659","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"dup = (1)","pinCode":false,"dname":"_1647270089660","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"dup = (2)","pinCode":false,"dname":"_1647270089661","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`(Observable doesn’t yet support destructuring assignment to declare multiple names, but we hope to add that soon.)`","pinCode":false,"dname":"_1647270089662","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Statements need curly braces, and return (or yield).\n\nA cell body can be a simple expression, such as a number or string literal, or a function call. But sometimes you want statements, such as for loops. For that you’ll need curly braces, and a return statement to give the cell a value. Think of a cell as a function, except the function has no arguments.`","pinCode":false,"dname":"_1647270089663","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  let sum = 0;\n  for (let i = 0; i < 10; ++i) {\n    sum += i;\n  }\n  return sum;\n}","pinCode":false,"dname":"_1647270089665","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`For the same reason, you’ll need to wrap object literals in parentheses, or use a block statement with a return.`","pinCode":false,"dname":"_1647270089665","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"label = {foo: \"bar\"}","pinCode":false,"dname":"_1647270089666","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"object = ({foo: \"bar\"})","pinCode":false,"dname":"_1647270089667","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"block = { return {foo: \"bar\"}; }","pinCode":false,"dname":"_1647270089669","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Cells can be views.\n\nObservable has a special [\\`viewof\\` operator](https://observablehq.com/@observablehq/introduction-to-views) which lets you define interactive values. A view is a cell with two faces: its user interface, and its programmatic value. Try editing the input below, and note that the referencing cell runs automatically.`","pinCode":false,"dname":"_1647270089669","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof text = (html`<input value=\"edit me\">`)","pinCode":false,"dname":"_1647270089670","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"text","pinCode":false,"dname":"_1647270089671","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Cells can be mutables.\n\nObservable has a special [\\`mutable\\` operator](/@observablehq/introduction-to-mutable-state) so you can opt-in to mutable state: you can set the value of a mutable from another cell.`","pinCode":false,"dname":"_1647270089671","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable thing = (0)","pinCode":false,"dname":"_1647270089672","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"++mutable thing","pinCode":false,"dname":"_1647270089673","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Mutables can be referenced reactively or non-reactively, depending on whether you want the cell to run automatically when the mutable value changes.`","pinCode":false,"dname":"_1647270089674","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"thing","pinCode":false,"dname":"_1647270089675","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"mutable thing","pinCode":false,"dname":"_1647270089676","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Observable has a standard library.\n\nObservable provides a small [standard library](https://github.com/observablehq/stdlib/blob/master/README.md) for essential features, such as Markdown tagged template literals and reactive width.`","pinCode":false,"dname":"_1647270089676","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Hello, I’m *Markdown*!`","pinCode":false,"dname":"_1647270089677","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Cells can be imported from other notebooks.\n\nYou can [import any named cell](/@observablehq/introduction-to-imports) from any notebook, with syntax similar to static ES imports. But Observable imports are lazy: if you don’t use it, it won’t run.`","pinCode":false,"dname":"_1647270089678","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { ramp }  from 'observables-not-javascript/1104ceb0818de884'","pinCode":false,"dname":"_1647270089678","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"ramp(d3.interpolateBrBG)","pinCode":false,"dname":"_1647270089680","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Also, you can [import-with](/@d3/bar-chart-remix), which allows you to inject cells from the current notebook into the imported notebook, overriding the original definition. You can treat any notebook as an extensible template!`","pinCode":false,"dname":"_1647270089682","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"numbers = (Float64Array.from({length: 1000}, d3.randomNormal()))","pinCode":false,"dname":"_1647270089682","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"height = (250)","pinCode":false,"dname":"_1647270089683","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { chart as histogram } with { numbers as data, height } from 'observables-not-javascript/8d5ef3030dfd3bad'","pinCode":false,"dname":"_1647270089684","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"histogram","pinCode":false,"dname":"_1647270089684","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Static ES imports are not supported; use dynamic imports.\n\nSince everything in Observable is inherently dynamic, there’s not really a need for static ES imports—though, we might add support in the future. Note that only the most-recent browsers support dynamic imports, so you might consider using require for now.`","pinCode":false,"dname":"_1647270089685","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"_ = (import(\"https://cdn.skypack.dev/lodash-es@4\"))","pinCode":false,"dname":"_1647270089686","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"_.camelCase(\"lodash was here\")","pinCode":false,"dname":"_1647270089687","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`### require is AMD, not CommonJS.\n\n[Observable’s require](/@observablehq/introduction-to-require) looks a lot like CommonJS because cells implicitly await promises. But under the hood it uses the [Asynchronous Module Definition (AMD)](https://requirejs.org/docs/whyamd.html). This convention will eventually be replaced with modern ES modules and imports, but it’s still useful for the present as many library authors are not yet shipping ES modules.\n\nWe recommend pinning major versions.`","pinCode":false,"dname":"_1647270089688","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"d3 = (require(\"d3@6\"))","pinCode":false,"dname":"_1647270089689","codeMode":"javascript2"}}}],"version":"2.19.1"}
{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# File Input\n\n<p style=\"background: #fffced; box-sizing: border-box; padding: 10px 20px;\">***Update Aug. 2021:*** *Observable now supports [**file attachments**](/@observablehq/file-attachments)! Please see my [Local File Input](/@mbostock/localfile) for an example of how to use an input that points to a local file while supporting the full FileAttachment API.*</p>\n\nThis reusable input allows an image file to be specified either by URL or by choosing a file from disk. A JSON file input and a generic file input are also available below. To use them in your notebook:\n\n\\`\\`\\`js\nimport {fileInput} from \"@mbostock/file-input\"\n\\`\\`\\``","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof image = (imageInput({\n  crossOrigin: \"anonymous\",\n  initialUrl: await FileAttachment(\"beastie-boys.jpg\").url()\n}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"image","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof data = (jsonInput({\n  initialUrl: await FileAttachment(\"points.json\").url()\n}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"data","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Implementation`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"fileInput = (function fileInput({\n  initialUrl, // e.g., \"https://example.com/file.txt\"\n  accept, // e.g., \".txt,.md\"\n  load = value => value // A function to specify which value is exposed.\n}) {\n  let file = null;\n  const form = html`<form>\n  ${Object.assign(html`<input name=url>`, {value: initialUrl})}\n  <button>Submit</button>\n  ${Object.assign(html`<input data-type=file name=file type=file>`, {accept})}\n`;\n  form.onsubmit = event => {\n    form.value = load(form.url.value);\n    form.dispatchEvent(new CustomEvent(\"input\"));\n    event.preventDefault();\n  };\n  form.url.oninput = event => {\n    event.stopPropagation();\n  };\n  form.file.oninput = () => {\n    if (file !== null) URL.revokeObjectURL(file);\n    file = URL.createObjectURL(form.file.files[0]);\n    form.value = load(form.url.value = file);\n  };\n  if (initialUrl !== undefined) {\n    form.value = load(initialUrl);\n  }\n  return form;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"imageInput = (function imageInput({initialUrl, width, height, crossOrigin, accept = \".png,.jpg,.gif,.webp\"}) {\n  return fileInput({\n    initialUrl,\n    accept,\n    load(url) {\n      return new Promise((resolve, reject) => {\n        const image = new Image;\n        image.style.display = \"block\";\n        if (width !== undefined) image.width = width;\n        if (height !== undefined) image.height = height;\n        if (crossOrigin !== undefined) image.crossOrigin = crossOrigin;\n        image.onload = () => resolve(image);\n        image.onerror = reject;\n        image.src = url;\n      });\n    }\n  });\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"jsonInput = (function jsonInput({initialUrl, init, accept = \".json\"}) {\n  return fileInput({\n    initialUrl,\n    accept,\n    load(url) {\n      return fetch(url, init).then(response => {\n        if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n        return response.json();\n      });\n    }\n  });\n})","pinCode":false}}}],"version":"2.19.1"}
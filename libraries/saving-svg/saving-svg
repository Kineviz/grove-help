{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Saving SVG\n\n<figure style=\"display:flex;padding:10px;background:#fefedd;color:#444;font:15px/22px var(--sans-serif);\">\n<div style=\"margin:10px;\"><b>Update:</b> Saving SVG is now built-in! Open the cell menu <svg viewBox=\"0 0 8 14\" fill=\"currentColor\" stroke=\"none\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"8\" height=\"14\"><circle r=\"1.5\" cx=\"4\" cy=\"2\"></circle><circle r=\"1.5\" cx=\"4\" cy=\"7\"></circle><circle r=\"1.5\" cx=\"4\" cy=\"12\"></circle></svg> in the left margin to download any SVG cell as either SVG or PNG.</div>\n<div><img src=\"https://user-images.githubusercontent.com/4732/57958244-0ed81780-78b4-11e9-859d-bc68cc4f45b6.png\"></div>\n</figure>\n\nSay we have a dynamically-generated SVG, like this contour plot. Hereâ€™s how might you save it to a file in Observable using DOM.download.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"import { chart }  from 'saving-svg/9d7cc1d26bcca7c7'","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"chart","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`You can serialize the SVG element as a string, and then download it as an SVG file.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"DOM.download(() => serialize(chart), undefined, \"Save as SVG\")","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"serialize = {\n  const xmlns = \"http://www.w3.org/2000/xmlns/\";\n  const xlinkns = \"http://www.w3.org/1999/xlink\";\n  const svgns = \"http://www.w3.org/2000/svg\";\n  return function serialize(svg) {\n    svg = svg.cloneNode(true);\n    const fragment = window.location.href + \"#\";\n    const walker = document.createTreeWalker(svg, NodeFilter.SHOW_ELEMENT);\n    while (walker.nextNode()) {\n      for (const attr of walker.currentNode.attributes) {\n        if (attr.value.includes(fragment)) {\n          attr.value = attr.value.replace(fragment, \"#\");\n        }\n      }\n    }\n    svg.setAttributeNS(xmlns, \"xmlns\", svgns);\n    svg.setAttributeNS(xmlns, \"xmlns:xlink\", xlinkns);\n    const serializer = new window.XMLSerializer;\n    const string = serializer.serializeToString(svg);\n    return new Blob([string], {type: \"image/svg+xml\"});\n  };\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Alternatively, you can render the SVG to a canvas to generate a PNG.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"DOM.download(() => rasterize(chart), undefined, \"Save as PNG\")","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"rasterize = (function rasterize(svg) {\n  let resolve, reject;\n  const promise = new Promise((y, n) => (resolve = y, reject = n));\n  const image = new Image;\n  image.onerror = reject;\n  image.onload = () => {\n    const rect = svg.getBoundingClientRect();\n    const context = DOM.context2d(rect.width, rect.height);\n    context.drawImage(image, 0, 0, rect.width, rect.height);\n    context.canvas.toBlob(resolve);\n  };\n  image.src = URL.createObjectURL(serialize(svg));\n  return promise;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`To use this in your own notebook, import from this notebook:\n\n\\`\\`\\`js\nimport {rasterize} from \"@mbostock/saving-svg\"\n\\`\\`\\`\n\nHappy downloading!`","pinCode":false}}}],"version":"2.19.1"}
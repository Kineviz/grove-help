{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`<div style=\"color: grey; font: 13px/25.5px var(--sans-serif); text-transform: uppercase;\"><h1 style=\"display: none\">File Input / Observable Inputs</h1><a href=\"/@observablehq/inputs\">Observable Inputs</a> › File · <a href=\"https://github.com/observablehq/inputs/blob/main/README.md#file\">API</a></div>\n\n# Input: File\n\nThis input specifies a local file. The exposed value provides the same interface as an Observable [file attachment](/@observablehq/file-attachments) for convenient parsing in various formats such as text, image, JSON, CSV, ZIP, and XLSX; however, the file is not uploaded and is only available temporarily in memory.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`By default, any file is allowed, and the value of the input resolves to null.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof file = (Inputs.file())","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"file","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`We recommend providing a *label* to improve usability.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Specify the *accept* option to limit the allowed file extensions. This is useful when you intend to parse the file as a specific file format, such as CSV. By setting the *required* option to true, the value of the input won’t resolve until the user choses a file; downstream cells will wait.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof csvfile = (Inputs.file({label: \"CSV file\", accept: \".csv\", required: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"data = (csvfile.csv({typed: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Here are a few examples of other supported file types.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof jsonfile = (Inputs.file({label: \"JSON file\", accept: \".json\", required: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"json = (jsonfile.json())","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof textfile = (Inputs.file({label: \"Text file\", accept: \".txt\", required: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"text = (textfile.text())","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof imgfile = (Inputs.file({label: \"Image file\", accept: \".png,.jpg\", required: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"image = (imgfile.image())","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof xlsxfile = (Inputs.file({label: \"Excel file\", accept: \".xlsx\", required: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"workbook = (xlsxfile.xlsx())","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof zipfile = (Inputs.file({label: \"ZIP archive\", accept: \".zip\", required: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"archive = (zipfile.zip())","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`The *multiple* option allows the user to pick multiple files. In this mode, the exposed value is an array of files instead of a single file.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof files = (Inputs.file({label: \"Files\", multiple: true}))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"files","pinCode":false}}}],"version":"2.19.1"}
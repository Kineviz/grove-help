{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Showing Progress\n\nSometimes computing a cell is expensive. While the value is being computed, you might want to show how work is progressing.\n\nOne way to do this is to yield intermediate values. This approach is acceptable if cells that consume the computed value can treat it like an approximation of the final result.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"sumA = {\n  let sum = 0;\n  for (let i = 0, n = 1000; i < n; ++i) {\n    yield sum += i * i;\n  }\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you donâ€™t want referencing cells to see intermediate values, another approach is to yield an object containing either the progress or the final computed value.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"sumB = {\n  let sum = 0;\n  for (let i = 0, n = 1000; i < n; ++i) {\n    sum += i * i;\n    yield {progress: i / n};\n  }\n  yield {value: sum};\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`For more control over how progress is displayed, use \\`viewof\\` to display the progress independently of the exposed value. Here, a progress bar shows the status of the calculation. The exposed value (\\`sumC\\`) is resolved when the computation completes.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof sumC = {\n  const div = html`<div style=\"background:red;width:0;height:33px;\">`;\n  (async () => {\n    let sum = 0;\n    for (let i = 0, n = 1000; i < n; ++i) {\n      sum += i * i;\n      div.style.width = (i / n) * 100 + \"%\";\n      await new Promise(requestAnimationFrame);\n    }\n    div.value = sum;\n    div.dispatchEvent(new CustomEvent(\"input\"));\n    div.style.background = \"black\";\n  })();\n  return div;\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"sumC","pinCode":false}}}],"version":"2.19.1"}
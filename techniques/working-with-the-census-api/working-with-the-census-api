{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Working with the Census API\n\nI recently updated my [example stacked bar charts](/@mbostock/d3-stacked-bar-chart) to fetch population estimates directly from the [U.S. Census API](https://www.census.gov/data/developers/data-sets.html). The Census API is fantastically useful, but it can be a little difficult to get started, so here’s a brief explanation of the steps I took.\n\nFirst you need a dataset. For population estimates, the American Community Survey (ACS) is a good choice. I’ll use the 5-year data here. This is less current than the 1-year data, but it’s considered more reliable and is available for smaller areas. (See [guidance on choosing an ACS dataset](https://www.census.gov/programs-surveys/acs/guidance/estimates.html).)\n\nNext you need variables. You can find the [list of available variables](https://api.census.gov/data/2016/acs/acs5/variables.html) on the API documentation. The Census API provides finer-grained age groups than I want for my visualization, and separates by sex, so I’m first going to define a map from my coarse age groups to the corresponding Census variables.`","pinCode":false,"dname":"ac499cfe-45d1-4cc6-8a94-ada0c9ea0931","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"variables = (new Map([[\"<10\", [\"003\", \"004\", \"027\", \"028\"]], [\"10-19\", [\"005\", \"006\", \"007\", \"029\", \"030\", \"031\"]], [\"20-29\", [\"008\", \"009\", \"010\", \"011\", \"032\", \"033\", \"034\", \"035\"]], [\"30-39\", [\"012\", \"013\", \"036\", \"037\"]], [\"40-49\", [\"014\", \"015\", \"038\", \"039\"]], [\"50-59\", [\"016\", \"017\", \"040\", \"041\"]], [\"60-69\", [\"018\", \"019\", \"020\", \"021\", \"042\", \"043\", \"044\", \"045\"]], [\"70-79\", [\"022\", \"023\", \"046\", \"047\"]], [\"≥80\", [\"024\", \"025\", \"048\", \"049\"]]].map(([key, V]) => [key, V.map(v => `B01001_${v}E`)])))","pinCode":false,"dname":"a6f0e9b1-3819-4871-963a-3c97c957d729","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`For example, here are the variables corresponding to the population estimates from the 20-29 age group:`","pinCode":false,"dname":"ef40dfd1-153b-46f1-b54a-553c7a3b5fd2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"variables.get(\"20-29\")","pinCode":false,"dname":"a3f5bd76-952e-4708-8a56-9d4f6d7e65c8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`The Census API uses [FIPS numeric codes](https://www.census.gov/geo/reference/ansi_statetables.html) to identify states. The two-letter abbreviations of the USPS are more widely known, so here is another map to convert from numeric code to abbreviation.`","pinCode":false,"dname":"0f175f14-ca0a-4c86-93c4-594088d4ab05","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"states = (new Map([[\"01\", \"AL\"], [\"02\", \"AK\"], [\"04\", \"AZ\"], [\"05\", \"AR\"], [\"06\", \"CA\"], [\"08\", \"CO\"], [\"09\", \"CT\"], [\"10\", \"DE\"], [\"11\", \"DC\"], [\"12\", \"FL\"], [\"13\", \"GA\"], [\"15\", \"HI\"], [\"16\", \"ID\"], [\"17\", \"IL\"], [\"18\", \"IN\"], [\"19\", \"IA\"], [\"20\", \"KS\"], [\"21\", \"KY\"], [\"22\", \"LA\"], [\"23\", \"ME\"], [\"24\", \"MD\"], [\"25\", \"MA\"], [\"26\", \"MI\"], [\"27\", \"MN\"], [\"28\", \"MS\"], [\"29\", \"MO\"], [\"30\", \"MT\"], [\"31\", \"NE\"], [\"32\", \"NV\"], [\"33\", \"NH\"], [\"34\", \"NJ\"], [\"35\", \"NM\"], [\"36\", \"NY\"], [\"37\", \"NC\"], [\"38\", \"ND\"], [\"39\", \"OH\"], [\"40\", \"OK\"], [\"41\", \"OR\"], [\"42\", \"PA\"], [\"44\", \"RI\"], [\"45\", \"SC\"], [\"46\", \"SD\"], [\"47\", \"TN\"], [\"48\", \"TX\"], [\"49\", \"UT\"], [\"50\", \"VT\"], [\"51\", \"VA\"], [\"53\", \"WA\"], [\"54\", \"WV\"], [\"55\", \"WI\"], [\"56\", \"WY\"], [\"72\", \"PR\"]]))","pinCode":false,"dname":"f17a972a-e759-4b33-822e-292c2be655b9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Okay, now we’re ready to formulate our URL to request data from the Census API! (You should [request a key](https://api.census.gov/data/key_signup.html) and add that to the URL, too.)`","pinCode":false,"dname":"d802f2f6-c225-4694-87da-4342873b2ff3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"url = (`https://api.census.gov/data/2016/acs/acs5?get=${Array.from(variables.values())}&for=state:*`)","pinCode":false,"dname":"4e81ba51-b7a1-450b-9f4f-f90d0e5df71a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Here’s what the returned data looks like:`","pinCode":false,"dname":"cb42e114-89c9-41f4-b851-221f6c0651d0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"data = (d3.json(url))","pinCode":false,"dname":"88f84033-2774-46c9-89b1-3382333c3b06","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`The data comes back as one row per state plus the header row, and one column per variable plus the \\`state\\` column. To make it easier to lookup our variables, here’s an index from the variable name (*e.g.*, \\`B01001_003E\\`) to the column number (*e.g.*, 0). Our code below also assumes that the \\`state\\` column is the last column, so let’s verify that too before continuing.`","pinCode":false,"dname":"a53ce1c7-835b-482e-8271-70c409a04532","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"index = {\n  const index = new Map(data[0].map((d, i) => [d, i]));\n  if (index.get(\"state\") !== data[0].length - 1) throw new Error;\n  return index;\n}","pinCode":false,"dname":"0375a896-b52c-44c0-9182-6633a5d7db36","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Okay, now we can aggregate the fine-grained age groups from the Census API into our coarser age groups. Here we compute an array of arrays *sums* where *sums*[*i*][*j*] is the population for state *i* and age group *j*. Read this code as: for each state, for each age group, compute the sum of corresponding population estimates.`","pinCode":false,"dname":"5f4094f6-947f-4b4f-9584-8b07e964fb97","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"sums = (data.slice(1).map(d => Array.from(variables.values(), V => d3.sum(V, v => d[index.get(v)]))))","pinCode":false,"dname":"e19923d7-33c4-4096-925a-b18d84549e29","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`For example, state *i* = 0 is Alabama, and age group *j* = 0 is <10, so the estimated number of people living in Alabama who are younger than ten years old is:`","pinCode":false,"dname":"dfd643eb-ebdb-48eb-ba11-506380bed3b2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"sums[0][0]","pinCode":false,"dname":"8a84a4fc-1c8f-43dd-b9ff-86695a9778e8","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Here’s the array of state codes and corresponding abbreviations, in the order returned by the API:`","pinCode":false,"dname":"b5324d0d-2a8c-42dd-a8a1-b3315395d0c7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"codes = (data.slice(1).map(d => d[d.length - 1]))","pinCode":false,"dname":"01532496-b27f-4269-93ef-75760c91888e","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"names = (data.slice(1).map(d => states.get(d[d.length - 1])))","pinCode":false,"dname":"92118f51-7c25-4ea4-b31f-54e6bbe0fbde","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Here we compute the total population for each state by aggregating across age groups. We don’t include the state column in the sum, obviously.`","pinCode":false,"dname":"b342b40f-6a6b-4a8d-aa39-91e2f1e271d5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"totals = (data.slice(1).map(d => d3.sum(d.slice(0, -1))))","pinCode":false,"dname":"279b9f59-21e5-4c6d-b522-4e9ade7cf46b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Now say we want to order the states by descending total population. Here’s an array *order* where *order*[0] is the index of the state with the highest population (4 = California), *order*[1] is the second-highest population (43 = Texas), and so on:`","pinCode":false,"dname":"6d50b1bf-5036-4f45-aaf4-feb6c279a9c3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"order = (d3.range(data.length - 1).sort((i, j) => totals[j] - totals[i]))","pinCode":false,"dname":"70946e7d-3985-4490-8ba0-64d6f7273fc2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Here’s the *sums* array above reordered by descending total population:`","pinCode":false,"dname":"0270c11f-a71e-425c-a934-a6a4ce444224","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"ordered = (d3.permute(sums, order))","pinCode":false,"dname":"f0836087-5041-453c-8637-1d3422e5eca3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Lastly, we’ll use [d3.stack](https://github.com/d3/d3-shape/blob/master/README.md#stacks) to construct a new array *stacked* that is parallel (that is, has a similar structure) to *ordered*, such that *stacked*[*i*][*j*] is a two-element array [*a*, *b*] corresponding to the stacked population values for state *order*[*i*] and age group *j*.`","pinCode":false,"dname":"17bf48e0-f619-4f76-a263-a625f8cf0bc5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"stacked = (d3.stack().keys(d3.range(variables.size))(ordered))","pinCode":false,"dname":"9326dddb-e43e-4048-8fa3-27f90020f66d","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`See the final result by checking out my [example stacked bar chart](/@mbostock/d3-stacked-bar-chart) and its forks.`","pinCode":false,"dname":"503775a8-bce3-46ab-8c87-a94ab3b6ad48","codeMode":"javascript2"}}}],"version":"2.19.1"}
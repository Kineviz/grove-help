{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Multi-Value Inputs\n\n<p style=\"background: #fffced; box-sizing: border-box; padding: 10px 20px;\">***Update Dec. 2021:*** *Observable now supports [**Form inputs**](/@observablehq/input-form) that allow you to combine multiple inputs into a single cell for compact display. This notebook will remain for history, but please upgrade to [Observable Inputs](/@observablehq/inputs).*</p>\n\nHere are some ways you can have multiple interactive values in a notebook. The simplest, of course, is to create separate cells for each input:`","pinCode":false,"dname":"191c0364-9903-457a-8089-cce9dd2d6213","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof r = (html`<input type=range min=0 max=255 step=1 value=127>`)","pinCode":false,"dname":"1209366f-ff80-4331-bd27-d5d7af53808b","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof g = (html`<input type=range min=0 max=255 step=1 value=127>`)","pinCode":false,"dname":"3d76da81-e4b6-425b-b751-6ac6699d9592","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof b = (html`<input type=range min=0 max=255 step=1 value=127>`)","pinCode":false,"dname":"ec65631e-a200-46fc-8c04-23bd7867a8fb","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<div style=\"height:33px;width:33px;background:rgb(${r},${g},${b});\">`","pinCode":false,"dname":"a67c865a-bf22-4131-9ac6-d38224d49e82","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`Another strategy is to combine the inputs into a single cell, and then set *element*.value on the root element of the cell, so that whenever an *input* event bubbles up, Observable sees the desired compound value. Below, that compound value has the form \\[*r*, *g*, *b*\\].`","pinCode":false,"dname":"e220a9fc-3b8e-4e23-93ab-4981e87a6ce3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof rgb = {\n  const form = html`<form>\n  <div><input type=range name=r min=0 max=255 step=1 value=127> <i>r</i></div>\n  <div><input type=range name=g min=0 max=255 step=1 value=127> <i>g</i></div>\n  <div><input type=range name=b min=0 max=255 step=1 value=127> <i>b</i></div>\n</form>`;\n  form.oninput = () => form.value = [\n    form.r.valueAsNumber, \n    form.g.valueAsNumber, \n    form.b.valueAsNumber\n  ];\n  form.oninput();\n  return form;\n}","pinCode":false,"dname":"a2fc9ddc-89f8-4891-9160-fb9d953c88de","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<div style=\"height:33px;width:33px;background:rgb(${rgb.join()});\">`","pinCode":false,"dname":"f67893bb-137a-407a-8ce3-8d1724a242f6","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you combine your inputs into a single cell, a cell referencing the compound input will be run whenever any of the inputs are changed. That’s unlike separate cells (*r*, *g* and *b* above), where a cell reference a single input (such as *r*) won’t be run again if a different input (say *g*) changes.\n\nTo combine your inputs into a single cell for compact display, but still have separate cells for more efficient reactivity, you can use Generators.input rather than \\`viewof\\`. However, I only recommend this if you really need it for performance reasons.`","pinCode":false,"dname":"0b16807a-8088-40fa-b22f-d498133501a7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"rgbForm = (html`<form>\n  <div><input type=range name=r min=0 max=255 step=1 value=127> <i>r</i></div>\n  <div><input type=range name=g min=0 max=255 step=1 value=127> <i>g</i></div>\n  <div><input type=range name=b min=0 max=255 step=1 value=127> <i>b</i></div>\n</form>`)","pinCode":false,"dname":"a624855a-7470-4b21-ba62-519cd5feb9e9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"r2 = (Generators.input(rgbForm.r))","pinCode":false,"dname":"2e64b021-90d7-4b3b-8402-0254fc998a40","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"g2 = (Generators.input(rgbForm.g))","pinCode":false,"dname":"a122203e-79e0-4c68-8fb0-3c2b658024d7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"b2 = (Generators.input(rgbForm.b))","pinCode":false,"dname":"e2a5bb3b-ff21-42dd-9aef-7bc88f125bc7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"html`<div style=\"height:33px;width:33px;background:rgb(${r2},${g2},${b2});\">`","pinCode":false,"dname":"428ec2d6-7552-4dc9-a2d1-1cffbd828604","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`If you found this notebook interesting, you might also like my [Linked Inputs](https://beta.observablehq.com/@mbostock/linked-inputs) and [Nonlinear Slider](https://beta.observablehq.com/@mbostock/nonlinear-slider) notebooks.`","pinCode":false,"dname":"ef64b6d4-5a1e-4b14-aa4e-eab8753a8925","codeMode":"javascript2"}}}],"version":"2.19.1"}
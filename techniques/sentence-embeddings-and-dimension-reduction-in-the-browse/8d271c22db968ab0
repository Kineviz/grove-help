{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Form Input\n\n<p style=\"background: #fffced; box-sizing: border-box; padding: 10px 20px;\">***Update Jan. 2022:*** *Observable now supports [**form inputs**](/@observablehq/input-form)! This notebook will remain for history, but please upgrade to [Observable Inputs](/@observablehq/inputs).*</p>\n\nThis notebook defines a *form* function which makes it easier to use complex forms together with [Observable views](/@mbostock/introduction-to-views). To use it in your notebook:\n\n\\`\\`\\`js\nimport {form} from \"@mbostock/form-input\"\n\\`\\`\\`\n\nPass the *form* function a form element, and you‚Äôre off to the races! üêé`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof object = (form(html`<form>\n  <div><label><input name=\"message\" type=\"text\" value=\"Hello, form!\"> <i>message</i></label></div>\n  <div><label><input name=\"hue\" type=\"range\" min=0 max=360> <i>hue</i></label></div>\n  <div>\n    <label><input name=\"size\" type=\"radio\" value=\"12\"> <i>small</i></label>\n    <label><input name=\"size\" type=\"radio\" value=\"24\" checked> <i>medium</i></label>\n    <label><input name=\"size\" type=\"radio\" value=\"48\"> <i>large</i></label>\n  </div>\n  <div>\n    <label>\n      <select name=\"emojis\" multiple size=\"3\">\n        <option value=\"üçé\">üçé</option>\n        <option value=\"üî•\">üî•</option>\n        <option value=\"üêô\">üêô</option>\n      </select>\n    <i>emojis</i></label>\n  </div>\n</form>`))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"object","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Now you have a reactive reference to resulting object!`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"html`<svg\n  width=\"640\"\n  height=\"64\"\n  viewBox=\"0 0 640 64\"\n  style=\"width:100%;max-width:640px;height:auto;display:block;background:#333;\"\n>\n  ${Object.assign(\n    svg`<text\n    x=\"50%\"\n    y=\"50%\"\n    text-anchor=\"middle\" \n    dy=\"0.35em\"\n    fill=\"hsl(${object.hue},100%,50%)\"\n    font-size=\"${object.size}\"\n  >`,\n    {\n      textContent: `${object.message} ${object.emojis.join(\" \")}`\n    }\n  )}\n</svg>`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Implementation`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"form = (function form(form) {\n  const container = html`<div>${form}`;\n  form.addEventListener(\"submit\", event => event.preventDefault());\n  form.addEventListener(\"change\", () => container.dispatchEvent(new CustomEvent(\"input\")));\n  form.addEventListener(\"input\", () => container.value = formValue(form));\n  container.value = formValue(form);\n  return container\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"formValue = (function formValue(form) {\n  const object = {};\n  for (const input of form.elements) {\n    if (input.disabled || !input.hasAttribute(\"name\")) continue;\n    let value = input.value;\n    switch (input.type) {\n      case \"range\":\n      case \"number\": {\n        value = input.valueAsNumber;\n        break;\n      }\n      case \"date\": {\n        value = input.valueAsDate;\n        break;\n      }\n      case \"radio\": {\n        if (!input.checked) continue;\n        break;\n      }\n      case \"checkbox\": {\n        if (input.checked) value = true;\n        else if (input.name in object) continue;\n        else value = false;\n        break;\n      }\n      case \"file\": {\n        value = input.multiple ? input.files : input.files[0];\n        break;\n      }\n      case \"select-multiple\": {\n        value = Array.from(input.selectedOptions, option => option.value);\n        break;\n      }\n    }\n    object[input.name] = value;\n  }\n  return object;\n})","pinCode":false}}}],"version":"2.19.1"}
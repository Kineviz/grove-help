{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Worker\n\nThis utility helps to create Web Workers, that run computations outside of the main thread, allowing them to run for a long period of time without hanging the browser.\n\nUsage:\n\n~~~{javascript}\nimport { observeWorker as worker } from \"@fil/worker\"\nworker\\`\n  importScripts(\"https://unpkg.com/d3-delaunay@6\");\n  function heavyComputation(values) { â€¦ };\n  return heavyComputation(\\${values});\n\\`\n~~~\n\nThis new API **is not yet stabilized**! Details in [An update to the worker utility](https://observablehq.com/@fil/worker-utility-update).\n\n---\n\nThe old API is unchanged:\n\n~~~{javascript}\nimport { worker } from \"@fil/worker\"\nGenerators.queue(worker(my_function, arg))\n~~~\n\nSee it in action at https://observablehq.com/@fil/lap-jv and https://observablehq.com/@fil/tsne-js-worker\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Generators.queue(worker(blah, 100))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Generators.observe(worker(blah, 100000))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Generators.queue(worker(who, { n: 100, k: 21 }))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Generators.queue(worker(meh))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Generators.queue(worker(() => \"foo\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"webWorker = ((method) =>\n  function (f, ...vars) {\n    let t = f[0];\n    const args = {};\n    for (let i = 0; i < vars.length; i++)\n      t = `${t}${\n        typeof vars[i] === \"function\"\n          ? function_stringify(vars[i])\n          : ((args[`a${i}`] = vars[i]), `data.a${i}`)\n      }${f[i + 1]}`;\n\n    return Generators[method](\n      worker(\n        {\n          toString: () => `function main(data) {\\n${t}\\n;;;\\n}`,\n          name: \"main\"\n        },\n        args\n      )\n    );\n  })","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"queueWorker = (webWorker(\"queue\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"observeWorker = (webWorker(\"observe\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"worker = (function(f, e, preamble, transferList) {\n  const b = new Blob([workertext(f, preamble)], { type: \"text/javascript\" });\n  return function(notify) {\n    const url = URL.createObjectURL(b);\n    const worker = new Worker(url);\n    worker.addEventListener(\"message\", r => notify(r.data));\n    worker.postMessage(e, transferList);\n    return () => {\n      worker.terminate();\n      URL.revokeObjectURL(url);\n    };\n  };\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"workertext = (function workertext(f, preamble = \"\") {\n  return `\n${preamble}\n\nfunction isIterable(obj) {\n  return (\n    typeof obj[Symbol.iterator] === \"function\" &&\n    typeof obj[\"next\"] == \"function\"\n  );\n}\n\nconst __run__ = ${typeof f === \"function\" ? function_stringify(f) : f};\n\nself.onmessage = async function(e) {\n  const t0 = performance.now();\n  let result = await __run__(e.data);\n  if (typeof result !== \"undefined\") {\n    if (!isIterable(result)) result = [result];\n    for (const p of result) {\n      postMessage(typeof p !== \"object\" ? p : Object.assign(p, {_time: performance.now() - t0}));\n    }\n    close();\n  }\n\n}`;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"function_stringify = (function function_stringify(f) {\n  let g = f.toString();\n  if (f.prototype && f.prototype.toString() === \"[object Generator]\")\n    g = g.replace(/function\\*?/, \"function*\");\n  return g;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"blah = (function* blah(n) {\n  let sum = 0;\n  while (n-- > 0) yield (sum += n);\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"who = (function* who({ n, k }) {\n  let sum = 0;\n  while (n-- > 0) yield k * (sum += n);\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"meh = (function meh() {\n  let sum = 0,\n    n = 100;\n  while (n-- > 0) {\n    sum += n;\n  }\n  return sum;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## ðŸŒ¶ Hot zone\n\nYou can also pass functions directly:`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Generators.queue(worker(d => d ** 2, 10))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Now we will try something much more complicated: to get a Delaunay triangulation from the web worker. We can't pass it d3, an object that can't be cloned, but we can call the \"d3-delaunay\" script from the worker, and use it then. We'll manipulate its name (\"de\" instead of \"d3\") so that we don't pollute our main thread. The third argument of \\`worker\\` is a preamble text to initialize the worker script.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Generators.queue(\n  worker(\n    delaunay,\n    [0, 0, 1, 2.1, 4, 3],\n    `\nimportScripts(\"https://unpkg.com/d3-delaunay\");\nconst de = d3;\n    `\n  )\n)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"delaunay = (function delaunay(data) {\n  return new de.Delaunay(Float32Array.from(data));\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"de = (\"ðŸ¤¯\")","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`\nRemark: we don't use [\\`Generators.worker\\`](https://github.com/observablehq/notebook-stdlib/blob/master/README.md#Generators_worker); see [this thread](https://talk.observablehq.com/t/help-with-generators-worker/937) for detailed explanations, and [this example](https://beta.observablehq.com/d/e2a6bd734b15a886) nonetheless.\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Note: the fourth argument to \\`worker\\` is an (optional) \\`transferList\\`, see [reference](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage) and [example](https://beta.observablehq.com/@fil/hello-offscreen-canvas).`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\nSee [notebook-stdlib](https://github.com/observablehq/notebook-stdlib/#generators) for more documentation, and these two notebooks by Mike Bostock for a slightly different approach: [Computing Ï€](https://observablehq.com/@mbostock/computing-pi); [Voronoi Stippling](https://observablehq.com/@mbostock/voronoi-stippling).\n\nThanks to [RadamÃ©s Ajna](https://observablehq.com/@radames) for the support for async functions (Nov. 2019), and to [Fabian Iwand](https://observablehq.com/@mootari) for the support of anonymous functions (Feb. 2022).\n\nSee also https://observablehq.com/@galopin/work-work`","pinCode":false}}}],"version":"2.19.1"}
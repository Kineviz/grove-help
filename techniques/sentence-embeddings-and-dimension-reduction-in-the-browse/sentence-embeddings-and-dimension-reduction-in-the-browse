{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Sentence Embeddings and Dimension Reduction in the Browser\n\n[Transformers.js](https://huggingface.co/docs/transformers.js/index) is bringing state-of-the-art Machine Learning to the web, eliminating the need for a server.\n\nInspired by the [Hugging Faceâ€™s transformers python library](https://huggingface.co/docs/transformers/index), is developed by [Xenova](https://github.com/xenova/transformers.js). It makes use of the [ONNX Runtime](https://onnxruntime.ai/) to run models in the browser.\n\nThis notebook offers a brief guide on how to run the latest [feature-extraction](https://huggingface.co/tasks/feature-extraction) pipeline with one very popular model, [Sentence-transformers all-MiniLM-L6-v2](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2). This model is downloaded over two million times a month and is now also available as [ONNX weights](https://huggingface.co/Xenova/all-MiniLM-L6-v2). Finally, we run the embeddings through the Dimension Reduction JS library and run it through Dimension Reduction JS library [DruidJS](https://github.com/saehm/DruidJS)`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Loading [transformers.js](https://www.npmjs.com/package/@xenova/transformers) from npm `","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"transformers = (import(\"https://cdn.jsdelivr.net/npm/@xenova/transformers@2.6.0\"))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Create a pipeline for \\`feature-extraction\\` and point to the desired model \\`Xenova/all-MiniLM-L6-v2\\`, you can find all ONNX compatible models on the [hub](https://huggingface.co/models?other=transformers.js). This step might require some loading time depending on your internet connection, as the model + ONNX runtime combined are approximately 35MB.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"extractor = (await transformers.pipeline(\n  \"feature-extraction\",\n  \"Xenova/all-MiniLM-L6-v2\",\n  { quantized: false }\n))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`We'll use data from this [Dataset](https://huggingface.co/datasets/diffusers-parti-prompts/sd-v2.1), which includes over 1600 text-to-image prompts benchmark data, along with the respective image files generated by Stable Diffusion v2.1.\n\n${await FileAttachment(\"data.jpg\").image({width: 600})}\"`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"data = (await FileAttachment(\"data.json\").json())","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"sample = {\n  const shuffled = d3.shuffle(data.slice());\n  return shuffled.slice(0, 200);\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Extracting the embeddings is straightforward. Simply run\n\n\\`\\`\\`extractor(\"YOUR SENTENCE\", { pooling: \"mean\", normalize: true })\\`\\`\\`.\n\nHere, we're mapping all the Prompts and running them in parallel as a Promise\nFor each \\`embeddings\\` row we have a data vector size 384, property of the \\`all-MiniLM-L6-v2\\` model`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"embeddings = (await Promise.all(\n  sample.map((row) =>\n    extractor(row.Category + \": \" + row.Prompt, {\n      pooling: \"mean\",\n      normalize: true\n    })\n  )\n))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`With embeddings data now we send it to a worker running [Druid.js](https://github.com/saehm/DruidJS) with the selected Reduction Method`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"reducerResult = (Generators.queue(\n  worker(\n    function dr({ method, data, parameters }) {\n      const D = new druid[method](data, parameters);\n      const next = D.generator().next();\n      if (next.done) {\n        return D.transform();\n      }\n      return D.generator();\n    },\n    {\n      method: druid_method,\n      data: embeddings.map((row) => row.data),\n      parameters: reducerParams\n    },\n    `\nimportScripts(${JSON.stringify(\n      await require.resolve(\"@saehrimnir/druidjs@0.6.3\")\n    )});\n`\n  )\n))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"dataToPlot = (sample.map((row, id) => ({\n  ...row,\n  x: reducerResult[id][0],\n  y: reducerResult[id][1]\n})))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`## Visualize with [Plot](https://observablehq.com/plot/)\n`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof druid_method = (Inputs.select(\n  [\n    \"UMAP\",\n    \"TSNE\",\n    \"TriMap\",\n    \"PCA\",\n    \"LLE\",\n    \"LTSA\",\n    \"ISOMAP\",\n    \"FASTMAP\",\n    \"MDS\",\n    \"LSP\",\n    // \"LDA\",\n    \"TopoMap\",\n    \"SAMMON\"\n  ].sort(d3.ascending),\n  {\n    label: \"Please pick a Dimensionality Reduction Method.\",\n    // value: \"UMAP\"\n    value: \"UMAP\"\n  }\n))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"viewof reducerParams = (form(create_parameter_form(druid_method)))","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`**<small>Reduction Method</small>**: ${druid_method}`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"Plot.plot({\n  marginTop: 10,\n  inset: 10,\n  color: {\n    scheme: \"Paired\",\n    legend: true,\n    columns: 3\n  },\n  legend: {\n    marginTop: 50\n  },\n  marks: [\n    Plot.dot(dataToPlot, {\n      x: \"x\",\n      y: \"y\",\n      fill: \"Category\",\n      r: 5,\n      opacity: 0.8\n      // strokeWidth: 4,\n      // stroke: \"Category\"\n    }),\n    Plot.tip(\n      dataToPlot,\n      Plot.pointer({\n        stroke: \"Category\",\n\n        channels: { Note: \"Note\", sport: \"sport\" },\n\n        x: \"x\",\n        y: \"y\",\n        title: (d) => [d.Category, d.Prompt].join(\"\\n\\n\")\n      })\n    )\n  ]\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`Since the dataset of prompts includes a link to the corresponding generated text-to-image file, let's take a moment to visualize it as well.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const plt = Plot.plot({\n    marginTop: 50,\n    marginBottom: 50,\n    inset: 50,\n    width: width,\n    height: width,\n    marks: [\n      Plot.image(dataToPlot, {\n        x: \"x\",\n        y: \"y\",\n        src: (x) => x.images.src,\n        width: 50,\n        title: \"x\"\n      }),\n      Plot.tip(\n        dataToPlot,\n        Plot.pointer({\n          stroke: \"Category\",\n\n          channels: { Note: \"Note\", sport: \"sport\" },\n\n          x: \"x\",\n          y: \"y\",\n          title: (d) => [d.Category, d.Prompt].join(\"\\n\\n\")\n        })\n      )\n    ]\n  });\n  const selection = d3.select(plt);\n  selection.on(\"mousemove\", (evt) => {\n    const tipdata = plt.value;\n    if (tipdata) {\n      const image = selection.select(`image[href='${tipdata.images.src}']`);\n      image.raise();\n    }\n  });\n\n  return plt;\n}","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"md`### Extras\n\n<small>\nThanks to [Fil](https://observablehq.com/@fil/) for the worker util<br>\nThanks to [Rene Cutura](https://observablehq.com/@saehrimnir/hello-druidjs) for Druid.js<br>\nThanks to [Observable](https://observablehq.com/plot/) for Plot\n</small>`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"create_parameter_form = ((dr_method) => {\n  switch (dr_method) {\n    case \"ISOMAP\":\n    case \"LLE\":\n    case \"LTSA\":\n      return html`<form>\n          <label><input name=\"neighbors\" type=\"range\" min=10 max=300 value=10 /> neighbors <i>neighbors</i></label>\n      </form>`;\n      break;\n    case \"SAMMON\":\n      return html`<form>\n          <label><input name=\"magic\" type=\"range\" min=0 max=1 value=0.1 step=0.1 /> magic <i>magic</i></label>\n      </form>`;\n      break;\n    case \"TSNE\":\n      return html`<form>\n          <label><input name=\"perplexity\" type=\"range\" min=2 max=100 value=50 /> <i>perplexity</i></label><br>\n          <label><input name=\"epsilon\" type=\"range\" min=1 max=100 value=5 /> <i>epsilon</i></label>\n      </form>`;\n      break;\n    case \"UMAP\":\n      return html`<form>\n          <label><input name=\"n_neighbors\" type=\"range\" min=2 max=100 value=50 /> number of neighbors <i>n_neighbors</i></label><br>\n          <label><input name=\"min_dist\" type=\"range\" min=0.05 max=1.5 step=.05 value=0.1 /> minimum distance <i>min_dist</i></label>\n      </form>`;\n      break;\n    case \"TriMap\":\n      return html`<form>\n          <label><input name=\"weight_adj\" type=\"range\" min=100 max=100000 value=100 /> scaling factor <i>weight_adj</i></label><br>\n          <label><input name=\"c\" type=\"range\" min=1 max=10 value=5 /> number of triplets multiplier <i>c</i></label>\n      </form>`;\n      break;\n    case \"LSP\":\n      return html`<form>\n          <label><input name=\"neighbors\" type=\"range\" min=10 max=300 value=30 /> number of neighbors to consider <i>k</i></label><br>\n          <label><input name=\"control_points\" type=\"range\" min=10 max=100 value=20 /> number of controlpoints <i>control_points</i></label>\n      </form>`;\n      break;\n    case \"LDA\":\n      return html`<form>\n        <label>\n          <select name=\"clusters\">\n            <option value=\"islands\">islands</option>\n            <option value=\"species\">species</option>\n          </select>\n          <i>class labels</i>\n      </form>`;\n      break;\n    default:\n      return html`<form>\n        ${dr_method} has no parameters!\n      </form>`;\n      break;\n  }\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"druid = (\"ðŸ¤¯\")","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"import { worker }  from 'sentence-embeddings-and-dimension-reduction-in-the-browse/d9e5cc6facdf568b'","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"import { form }  from 'sentence-embeddings-and-dimension-reduction-in-the-browse/8d271c22db968ab0'","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"mutable status = (\"\")","pinCode":false}}}],"version":"2.19.1"}
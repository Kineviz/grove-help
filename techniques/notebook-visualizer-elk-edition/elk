{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Elk\n\nA small render on top of [Elkjs](https://github.com/OpenKieler/elkjs), a port of Eclipse’s graph rendering engine, that renders directly to SVG and bakes in a few opinions. It’s easy to change these opinions if you’d like - this is a work in progress and an editable notebook.\n\n### Features\n\n- Automatically finds a suitable width & height for children if you omit it.\n- Includes [IBM Plex](https://fonts.google.com/specimen/IBM+Plex+Mono?selection.family=IBM+Plex+Mono) for font niceness.\n- Graphs are scrollable if they get too wide.`","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"elky({\n  id: \"root\",\n  layoutOptions: { 'elk.algorithm': 'layered' },\n  children: [\n    { id: \"n1\", label: 'THREE', fill: 'blue' },\n    { id: \"n2\", label: 'Yeah' },\n    { id: \"n3\", label: 'B' }\n  ],\n  edges: [\n    { id: \"e1\", sources: [\"n1\"], targets: [\"n2\"] },\n    { id: \"e2\", sources: [\"n1\"], targets: [\"n3\"] },\n    { id: \"e3\", sources: [\"n2\"], targets: [\"n3\"] }\n  ]\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"plex = (html`<link href=\"https://fonts.googleapis.com/css?family=IBM+Plex+Mono:400,600&display=swap\" rel=\"stylesheet\">`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"charMetrics = ({\n  width: 8.4,\n  height: 21\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"arrowHead = (({ x, y }) =>\n  svg`<path d=\"M 0 0 L 3 3 L 0 6Z\" fill=\"#999\" transform='translate(${x -\n    6}, ${y - 3})' />`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"child = (({ label, width, height, x, y, fill = '#000' }) => {\n  return svg`<g transform='translate(${x}, ${y})' style='color:${fill}'>\n    <rect width='${width}' height='${height}' fill='currentColor' rx=\"3\" opacity=\"0.15\" />\n    <g transform='translate(5, ${1 + height / 2})'>\n      <text alignment-baseline='middle' style='font-family:IBM Plex Mono;font-size: 14px;' fill='currentColor'>${label}</text>\n    </g>\n   </g>`;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"charMetrics.height","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"elky = (async graph => {\n  const elk = new ELK();\n\n  for (let child of graph.children) {\n    if (!child.width) {\n      // Add half-line height addition to accept more input nodes\n      let inletCompensation =\n        Math.max(\n          0,\n          graph.edges.filter(edge => edge.targets[0] === child.id).length - 1\n        ) *\n        charMetrics.height *\n        0.5;\n      child.height = charMetrics.height * 1.1 + inletCompensation;\n\n      child.width = charMetrics.width * child.label.length + 10;\n    }\n  }\n\n  return showLayout(await elk.layout(graph));\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"showLayout = (layout => html`\n${plex}\n<div style='overflow-x: auto'>\n<svg width='${layout.width.toFixed(2)}' height='${layout.height.toFixed(2)}'>\n${layout.children.map(child)}\n${layout.edges.map(edge)}\n</svg>\n</div>\n`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"dpt = (({ x, y }) => `${x} ${y}`)","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"edge = (({ id, sections }) => {\n  let section = sections[0];\n  return svg`<g>\n    <path stroke-linejoin=\"round\" fill='none' stroke-width='2' stroke='#999' d='M${[\n      section.startPoint,\n      ...(section.bendPoints || []),\n      {\n        y: section.endPoint.y,\n        x: section.endPoint.x - 4\n      }\n    ]\n      .map((pt, i, pts) => {\n        if (i === pts.length) return dpt(pt);\n        return dpt(pt);\n      })\n      .join('L')}' />\n     ${arrowHead(section.endPoint)}\n    \n   </g>`;\n})","pinCode":false}}},{"type":"codeTool","data":{"codeData":{"value":"ELK = (require('elkjs/lib/elk.bundled.js'))","pinCode":false}}}],"version":"2.19.1"}